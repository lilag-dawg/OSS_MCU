
OSS_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  0800cef0  0800cef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dcec  0800dcec  0001dcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dcf4  0800dcf4  0001dcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dcf8  0800dcf8  0001dcf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000004  0800dcfc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000ac  0800dda4  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000104  20000148  0800de3d  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000050  2000024c  0800df41  0002024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  2000029c  0800df91  0002029c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013bc  200002b0  0800dfa2  000202b0  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  2000166c  0800dfa2  0002166c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000202ad  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_line   00026e5f  00000000  00000000  000202dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   0003b441  00000000  00000000  0004713c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00006ed0  00000000  00000000  0008257d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000027e8  00000000  00000000  00089450  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000f7b3c  00000000  00000000  0008bc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000024e8  00000000  00000000  00183778  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0002dd84  00000000  00000000  00185c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b39e4  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ab40  00000000  00000000  001b3a60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002b0 	.word	0x200002b0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ced8 	.word	0x0800ced8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002b4 	.word	0x200002b4
 800017c:	0800ced8 	.word	0x0800ced8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000530:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000532:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000534:	3304      	adds	r3, #4

08000536 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000536:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000538:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800053a:	d3f9      	bcc.n	8000530 <CopyDataInit>
  bx lr
 800053c:	4770      	bx	lr

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800053e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000540:	3004      	adds	r0, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000542:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>
  bx lr
 8000546:	4770      	bx	lr

08000548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800054a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <LoopForever+0x8>)
 800054e:	490d      	ldr	r1, [pc, #52]	; (8000584 <LoopForever+0xc>)
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <LoopForever+0x10>)
 8000552:	2300      	movs	r3, #0
 8000554:	f7ff ffef 	bl	8000536 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopForever+0x14>)
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopForever+0x18>)
 800055c:	2300      	movs	r3, #0
 800055e:	f7ff fff0 	bl	8000542 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000562:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopForever+0x1c>)
 8000564:	490c      	ldr	r1, [pc, #48]	; (8000598 <LoopForever+0x20>)
 8000566:	2300      	movs	r3, #0
 8000568:	f7ff ffeb 	bl	8000542 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800056c:	f004 faea 	bl	8004b44 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000570:	f00b fce8 	bl	800bf44 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000574:	f001 fa70 	bl	8001a58 <main>

08000578 <LoopForever>:

LoopForever:
  b LoopForever
 8000578:	e7fe      	b.n	8000578 <LoopForever>
 800057a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800057c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000580:	20000004 	.word	0x20000004
 8000584:	200000ac 	.word	0x200000ac
 8000588:	0800dcfc 	.word	0x0800dcfc
  INIT_BSS _sbss, _ebss
 800058c:	200002b0 	.word	0x200002b0
 8000590:	2000166c 	.word	0x2000166c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000594:	200301e0 	.word	0x200301e0
 8000598:	20030a57 	.word	0x20030a57

0800059c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_IRQHandler>
	...

080005a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80005aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005ae:	4905      	ldr	r1, [pc, #20]	; (80005c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	58000800 	.word	0x58000800

080005c8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4313      	orrs	r3, r2
 80005de:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000606:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800060a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4013      	ands	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000624:	68fb      	ldr	r3, [r7, #12]
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000636:	f004 fc2f 	bl	8004e98 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800063a:	f004 fc33 	bl	8004ea4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800063e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000642:	f7ff ffad 	bl	80005a0 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000646:	f009 fc39 	bl	8009ebc <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800064a:	f000 f821 	bl	8000690 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800064e:	f000 f8bf 	bl	80007d0 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000652:	bf00      	nop
}
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <APPD_EnableCPU2+0x34>)
 8000660:	1d3c      	adds	r4, r7, #4
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066c:	c403      	stmia	r4!, {r0, r1}
 800066e:	8022      	strh	r2, [r4, #0]
 8000670:	3402      	adds	r4, #2
 8000672:	0c13      	lsrs	r3, r2, #16
 8000674:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000676:	f00b f981 	bl	800b97c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f00a f888 	bl	800a792 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000682:	bf00      	nop
}
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bdb0      	pop	{r4, r5, r7, pc}
 800068a:	bf00      	nop
 800068c:	0800cef0 	.word	0x0800cef0

08000690 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	77fb      	strb	r3, [r7, #31]
 80006b4:	e033      	b.n	800071e <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	4a42      	ldr	r2, [pc, #264]	; (80007c4 <APPD_SetCPU2GpioConfig+0x134>)
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	4413      	add	r3, r2
 80006be:	799b      	ldrb	r3, [r3, #6]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d028      	beq.n	8000716 <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	4a3f      	ldr	r2, [pc, #252]	; (80007c4 <APPD_SetCPU2GpioConfig+0x134>)
 80006c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006cc:	4a3e      	ldr	r2, [pc, #248]	; (80007c8 <APPD_SetCPU2GpioConfig+0x138>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d00f      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0x62>
 80006d2:	4a3e      	ldr	r2, [pc, #248]	; (80007cc <APPD_SetCPU2GpioConfig+0x13c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d015      	beq.n	8000704 <APPD_SetCPU2GpioConfig+0x74>
 80006d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006dc:	d000      	beq.n	80006e0 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80006de:	e01b      	b.n	8000718 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80006e0:	7ffb      	ldrb	r3, [r7, #31]
 80006e2:	4a38      	ldr	r2, [pc, #224]	; (80007c4 <APPD_SetCPU2GpioConfig+0x134>)
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	4413      	add	r3, r2
 80006e8:	889a      	ldrh	r2, [r3, #4]
 80006ea:	8bbb      	ldrh	r3, [r7, #28]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	83bb      	strh	r3, [r7, #28]
          break;
 80006f0:	e012      	b.n	8000718 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80006f2:	7ffb      	ldrb	r3, [r7, #31]
 80006f4:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <APPD_SetCPU2GpioConfig+0x134>)
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	4413      	add	r3, r2
 80006fa:	889a      	ldrh	r2, [r3, #4]
 80006fc:	8b7b      	ldrh	r3, [r7, #26]
 80006fe:	4313      	orrs	r3, r2
 8000700:	837b      	strh	r3, [r7, #26]
          break;
 8000702:	e009      	b.n	8000718 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000704:	7ffb      	ldrb	r3, [r7, #31]
 8000706:	4a2f      	ldr	r2, [pc, #188]	; (80007c4 <APPD_SetCPU2GpioConfig+0x134>)
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	4413      	add	r3, r2
 800070c:	889a      	ldrh	r2, [r3, #4]
 800070e:	8b3b      	ldrh	r3, [r7, #24]
 8000710:	4313      	orrs	r3, r2
 8000712:	833b      	strh	r3, [r7, #24]
          break;
 8000714:	e000      	b.n	8000718 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8000716:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000718:	7ffb      	ldrb	r3, [r7, #31]
 800071a:	3301      	adds	r3, #1
 800071c:	77fb      	strb	r3, [r7, #31]
 800071e:	7ffb      	ldrb	r3, [r7, #31]
 8000720:	2b21      	cmp	r3, #33	; 0x21
 8000722:	d9c8      	bls.n	80006b6 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000730:	8bbb      	ldrh	r3, [r7, #28]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d014      	beq.n	8000760 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000736:	8bbb      	ldrh	r3, [r7, #28]
 8000738:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff ff44 	bl	80005c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ff5a 	bl	80005fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f005 f85b 	bl	8005808 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000752:	8bbb      	ldrh	r3, [r7, #28]
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f005 f9c4 	bl	8005ae8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000760:	8b7b      	ldrh	r3, [r7, #26]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d012      	beq.n	800078c <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000766:	8b7b      	ldrh	r3, [r7, #26]
 8000768:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff2c 	bl	80005c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000770:	2002      	movs	r0, #2
 8000772:	f7ff ff42 	bl	80005fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4813      	ldr	r0, [pc, #76]	; (80007c8 <APPD_SetCPU2GpioConfig+0x138>)
 800077c:	f005 f844 	bl	8005808 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000780:	8b7b      	ldrh	r3, [r7, #26]
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <APPD_SetCPU2GpioConfig+0x138>)
 8000788:	f005 f9ae 	bl	8005ae8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800078c:	8b3b      	ldrh	r3, [r7, #24]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d013      	beq.n	80007ba <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000792:	8b3b      	ldrh	r3, [r7, #24]
 8000794:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2004      	movs	r0, #4
 8000798:	f7ff ff16 	bl	80005c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800079c:	2004      	movs	r0, #4
 800079e:	f7ff ff2c 	bl	80005fa <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <APPD_SetCPU2GpioConfig+0x13c>)
 80007a8:	f005 f82e 	bl	8005808 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80007ac:	8b3b      	ldrh	r3, [r7, #24]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <APPD_SetCPU2GpioConfig+0x13c>)
 80007b4:	f005 f998 	bl	8005ae8 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
}
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	0800da40 	.word	0x0800da40
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800

080007d0 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80007d4:	bf00      	nop
}
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80007e2:	f001 f9d7 	bl	8001b94 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 80007e6:	bf00      	nop
}
 80007e8:	bd80      	pop	{r7, pc}

080007ea <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	460b      	mov	r3, r1
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80007f8:	897a      	ldrh	r2, [r7, #10]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68f9      	ldr	r1, [r7, #12]
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 ff32 	bl	8001668 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000804:	bf00      	nop
}
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <LL_C2_PWR_SetPowerMode+0x28>)
 8000816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800081a:	f023 0207 	bic.w	r2, r3, #7
 800081e:	4905      	ldr	r1, [pc, #20]	; (8000834 <LL_C2_PWR_SetPowerMode+0x28>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	58000400 	.word	0x58000400

08000838 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000864:	f000 f814 	bl	8000890 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000868:	4908      	ldr	r1, [pc, #32]	; (800088c <APPE_Init+0x2c>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fcfe 	bl	800126c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000870:	f7ff fedf 	bl	8000632 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000874:	2101      	movs	r1, #1
 8000876:	2001      	movs	r0, #1
 8000878:	f00b f922 	bl	800bac0 <UTIL_LPM_SetOffMode>

  Led_Init();
 800087c:	f000 f867 	bl	800094e <Led_Init>

  Button_Init();
 8000880:	f000 f875 	bl	800096e <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000884:	f000 f812 	bl	80008ac <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000888:	bf00      	nop
}
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200015a4 	.word	0x200015a4

08000890 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000894:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000898:	f7ff ffce 	bl	8000838 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800089c:	f00b f8fe 	bl	800ba9c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80008a0:	2004      	movs	r0, #4
 80008a2:	f7ff ffb3 	bl	800080c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80008a6:	bf00      	nop
}
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80008b2:	f00a fead 	bl	800b610 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <appe_Tl_Init+0x50>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008be:	f00b fa0d 	bl	800bcdc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <appe_Tl_Init+0x54>)
 80008c4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <appe_Tl_Init+0x58>)
 80008c8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <appe_Tl_Init+0x5c>)
 80008d0:	f009 ff76 	bl	800a7c0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <appe_Tl_Init+0x60>)
 80008d6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <appe_Tl_Init+0x64>)
 80008da:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <appe_Tl_Init+0x68>)
 80008de:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80008e0:	f240 533c 	movw	r3, #1340	; 0x53c
 80008e4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00a ffd2 	bl	800b894 <TL_MM_Init>

  TL_Enable();
 80008f0:	f00a fe88 	bl	800b604 <TL_Enable>

  return;
 80008f4:	bf00      	nop
}
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	0800a7f9 	.word	0x0800a7f9
 8000900:	20030724 	.word	0x20030724
 8000904:	08000919 	.word	0x08000919
 8000908:	0800092f 	.word	0x0800092f
 800090c:	2003093c 	.word	0x2003093c
 8000910:	20030830 	.word	0x20030830
 8000914:	200301e8 	.word	0x200301e8

08000918 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000922:	bf00      	nop
}
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000936:	f7ff fe8f 	bl	8000658 <APPD_EnableCPU2>

  APP_BLE_Init( );
 800093a:	f001 fd53 	bl	80023e4 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800093e:	2100      	movs	r1, #0
 8000940:	2001      	movs	r0, #1
 8000942:	f00b f8bd 	bl	800bac0 <UTIL_LPM_SetOffMode>
  return;
 8000946:	bf00      	nop
}
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000952:	2000      	movs	r0, #0
 8000954:	f004 f816 	bl	8004984 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000958:	2001      	movs	r0, #1
 800095a:	f004 f813 	bl	8004984 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800095e:	2002      	movs	r0, #2
 8000960:	f004 f810 	bl	8004984 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000964:	2001      	movs	r0, #1
 8000966:	f004 f847 	bl	80049f8 <BSP_LED_On>
#endif

  return;
 800096a:	bf00      	nop
}
 800096c:	bd80      	pop	{r7, pc}

0800096e <Button_Init>:

static void Button_Init( void )
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000972:	2101      	movs	r1, #1
 8000974:	2000      	movs	r0, #0
 8000976:	f004 f873 	bl	8004a60 <BSP_PB_Init>
#endif

  return;
 800097a:	bf00      	nop
}
 800097c:	bd80      	pop	{r7, pc}

0800097e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000982:	bf00      	nop
}
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	f00b f8bf 	bl	800bb1c <UTIL_SEQ_Run>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009b4:	f00b f9b2 	bl	800bd1c <UTIL_SEQ_SetTask>
  return;
 80009b8:	bf00      	nop
}
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80009c8:	2002      	movs	r0, #2
 80009ca:	f00b fa0d 	bl	800bde8 <UTIL_SEQ_SetEvt>
  return;
 80009ce:	bf00      	nop
}
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80009de:	2002      	movs	r0, #2
 80009e0:	f00b fa20 	bl	800be24 <UTIL_SEQ_WaitEvt>
  return;
 80009e4:	bf00      	nop
}
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d00a      	beq.n	8000a12 <HAL_GPIO_EXTI_Callback+0x26>
 80009fc:	2b10      	cmp	r3, #16
 80009fe:	d002      	beq.n	8000a06 <HAL_GPIO_EXTI_Callback+0x1a>
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_EXTI_Callback+0x20>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000a04:	e008      	b.n	8000a18 <HAL_GPIO_EXTI_Callback+0x2c>
     APP_BLE_Key_Button1_Action();
 8000a06:	f002 fba1 	bl	800314c <APP_BLE_Key_Button1_Action>
      break; 
 8000a0a:	e005      	b.n	8000a18 <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button2_Action();
 8000a0c:	f002 fba6 	bl	800315c <APP_BLE_Key_Button2_Action>
      break; 
 8000a10:	e002      	b.n	8000a18 <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button3_Action();
 8000a12:	f002 fbaa 	bl	800316a <APP_BLE_Key_Button3_Action>
      break;
 8000a16:	bf00      	nop

  }
  return;
 8000a18:	bf00      	nop
}
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <LL_EXTI_EnableIT_0_31>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <LL_EXTI_EnableIT_0_31+0x24>)
 8000a2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a2e:	4905      	ldr	r1, [pc, #20]	; (8000a44 <LL_EXTI_EnableIT_0_31+0x24>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	58000800 	.word	0x58000800

08000a48 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4904      	ldr	r1, [pc, #16]	; (8000a68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	600b      	str	r3, [r1, #0]

}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	58000800 	.word	0x58000800

08000a6c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <ReadRtcSsrValue+0x3c>)
 8000a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <ReadRtcSsrValue+0x3c>)
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a82:	e005      	b.n	8000a90 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <ReadRtcSsrValue+0x3c>)
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d1f5      	bne.n	8000a84 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a98:	683b      	ldr	r3, [r7, #0]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40002800 	.word	0x40002800

08000aac <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000abc:	79ba      	ldrb	r2, [r7, #6]
 8000abe:	491d      	ldr	r1, [pc, #116]	; (8000b34 <LinkTimerAfter+0x88>)
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	440b      	add	r3, r1
 8000aca:	3315      	adds	r3, #21
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d009      	beq.n	8000aea <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000ad6:	7bfa      	ldrb	r2, [r7, #15]
 8000ad8:	4916      	ldr	r1, [pc, #88]	; (8000b34 <LinkTimerAfter+0x88>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3314      	adds	r3, #20
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	4911      	ldr	r1, [pc, #68]	; (8000b34 <LinkTimerAfter+0x88>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	440b      	add	r3, r1
 8000af8:	3315      	adds	r3, #21
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <LinkTimerAfter+0x88>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3314      	adds	r3, #20
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b12:	79ba      	ldrb	r2, [r7, #6]
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <LinkTimerAfter+0x88>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	440b      	add	r3, r1
 8000b20:	3315      	adds	r3, #21
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	701a      	strb	r2, [r3, #0]

  return;
 8000b26:	bf00      	nop
}
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000ac 	.word	0x200000ac

08000b38 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <LinkTimerBefore+0xb8>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d032      	beq.n	8000bba <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b54:	79ba      	ldrb	r2, [r7, #6]
 8000b56:	4927      	ldr	r1, [pc, #156]	; (8000bf4 <LinkTimerBefore+0xbc>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	440b      	add	r3, r1
 8000b62:	3314      	adds	r3, #20
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	4922      	ldr	r1, [pc, #136]	; (8000bf4 <LinkTimerBefore+0xbc>)
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	440b      	add	r3, r1
 8000b76:	3315      	adds	r3, #21
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b7c:	79fa      	ldrb	r2, [r7, #7]
 8000b7e:	491d      	ldr	r1, [pc, #116]	; (8000bf4 <LinkTimerBefore+0xbc>)
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	440b      	add	r3, r1
 8000b8a:	3315      	adds	r3, #21
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	4918      	ldr	r1, [pc, #96]	; (8000bf4 <LinkTimerBefore+0xbc>)
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3314      	adds	r3, #20
 8000ba0:	7bfa      	ldrb	r2, [r7, #15]
 8000ba2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ba4:	79ba      	ldrb	r2, [r7, #6]
 8000ba6:	4913      	ldr	r1, [pc, #76]	; (8000bf4 <LinkTimerBefore+0xbc>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3314      	adds	r3, #20
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000bb8:	e014      	b.n	8000be4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bba:	79fa      	ldrb	r2, [r7, #7]
 8000bbc:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <LinkTimerBefore+0xbc>)
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3315      	adds	r3, #21
 8000bca:	79ba      	ldrb	r2, [r7, #6]
 8000bcc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bce:	79ba      	ldrb	r2, [r7, #6]
 8000bd0:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <LinkTimerBefore+0xbc>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3314      	adds	r3, #20
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	701a      	strb	r2, [r3, #0]
  return;
 8000be2:	bf00      	nop
}
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000013c 	.word	0x2000013c
 8000bf4:	200000ac 	.word	0x200000ac

08000bf8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c02:	4b4e      	ldr	r3, [pc, #312]	; (8000d3c <linkTimer+0x144>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d118      	bne.n	8000c3e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c0c:	4b4b      	ldr	r3, [pc, #300]	; (8000d3c <linkTimer+0x144>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <linkTimer+0x148>)
 8000c14:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000c16:	4a49      	ldr	r2, [pc, #292]	; (8000d3c <linkTimer+0x144>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	4949      	ldr	r1, [pc, #292]	; (8000d44 <linkTimer+0x14c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	440b      	add	r3, r1
 8000c2a:	3315      	adds	r3, #21
 8000c2c:	2206      	movs	r2, #6
 8000c2e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <linkTimer+0x150>)
 8000c32:	f04f 32ff 	mov.w	r2, #4294967295
 8000c36:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	81fb      	strh	r3, [r7, #14]
 8000c3c:	e078      	b.n	8000d30 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c3e:	f000 f909 	bl	8000e54 <ReturnTimeElapsed>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	493e      	ldr	r1, [pc, #248]	; (8000d44 <linkTimer+0x14c>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	440b      	add	r3, r1
 8000c54:	3308      	adds	r3, #8
 8000c56:	6819      	ldr	r1, [r3, #0]
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	4419      	add	r1, r3
 8000c5e:	4839      	ldr	r0, [pc, #228]	; (8000d44 <linkTimer+0x14c>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4403      	add	r3, r0
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	4934      	ldr	r1, [pc, #208]	; (8000d44 <linkTimer+0x14c>)
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <linkTimer+0x144>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <linkTimer+0x14c>)
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	440b      	add	r3, r1
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	4413      	add	r3, r2
 8000c96:	3308      	adds	r3, #8
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d337      	bcc.n	8000d10 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <linkTimer+0x144>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000ca6:	7b7a      	ldrb	r2, [r7, #13]
 8000ca8:	4926      	ldr	r1, [pc, #152]	; (8000d44 <linkTimer+0x14c>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3315      	adds	r3, #21
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000cba:	e013      	b.n	8000ce4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000cbc:	7b7a      	ldrb	r2, [r7, #13]
 8000cbe:	4921      	ldr	r1, [pc, #132]	; (8000d44 <linkTimer+0x14c>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	3315      	adds	r3, #21
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000cd0:	7b7a      	ldrb	r2, [r7, #13]
 8000cd2:	491c      	ldr	r1, [pc, #112]	; (8000d44 <linkTimer+0x14c>)
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3315      	adds	r3, #21
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ce4:	7b3b      	ldrb	r3, [r7, #12]
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d00b      	beq.n	8000d02 <linkTimer+0x10a>
 8000cea:	7b3a      	ldrb	r2, [r7, #12]
 8000cec:	4915      	ldr	r1, [pc, #84]	; (8000d44 <linkTimer+0x14c>)
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d2dc      	bcs.n	8000cbc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000d02:	7b7a      	ldrb	r2, [r7, #13]
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fecf 	bl	8000aac <LinkTimerAfter>
 8000d0e:	e00f      	b.n	8000d30 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <linkTimer+0x144>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff0c 	bl	8000b38 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <linkTimer+0x144>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <linkTimer+0x148>)
 8000d28:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <linkTimer+0x144>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d30:	89fb      	ldrh	r3, [r7, #14]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000013c 	.word	0x2000013c
 8000d40:	2000013d 	.word	0x2000013d
 8000d44:	200000ac 	.word	0x200000ac
 8000d48:	20000140 	.word	0x20000140

08000d4c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d5c:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <UnlinkTimer+0xf8>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d111      	bne.n	8000d8c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <UnlinkTimer+0xf8>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <UnlinkTimer+0xfc>)
 8000d70:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	4935      	ldr	r1, [pc, #212]	; (8000e4c <UnlinkTimer+0x100>)
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	3315      	adds	r3, #21
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <UnlinkTimer+0xf8>)
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e03e      	b.n	8000e0a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <UnlinkTimer+0x100>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3314      	adds	r3, #20
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	492a      	ldr	r1, [pc, #168]	; (8000e4c <UnlinkTimer+0x100>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	3315      	adds	r3, #21
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000db4:	79f9      	ldrb	r1, [r7, #7]
 8000db6:	7bfa      	ldrb	r2, [r7, #15]
 8000db8:	4824      	ldr	r0, [pc, #144]	; (8000e4c <UnlinkTimer+0x100>)
 8000dba:	460b      	mov	r3, r1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	440b      	add	r3, r1
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4403      	add	r3, r0
 8000dc4:	3315      	adds	r3, #21
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2d8      	uxtb	r0, r3
 8000dca:	4920      	ldr	r1, [pc, #128]	; (8000e4c <UnlinkTimer+0x100>)
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	3315      	adds	r3, #21
 8000dd8:	4602      	mov	r2, r0
 8000dda:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d013      	beq.n	8000e0a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000de2:	79f9      	ldrb	r1, [r7, #7]
 8000de4:	7bba      	ldrb	r2, [r7, #14]
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <UnlinkTimer+0x100>)
 8000de8:	460b      	mov	r3, r1
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	440b      	add	r3, r1
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4403      	add	r3, r0
 8000df2:	3314      	adds	r3, #20
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2d8      	uxtb	r0, r3
 8000df8:	4914      	ldr	r1, [pc, #80]	; (8000e4c <UnlinkTimer+0x100>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	440b      	add	r3, r1
 8000e04:	3314      	adds	r3, #20
 8000e06:	4602      	mov	r2, r0
 8000e08:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000e0a:	79fa      	ldrb	r2, [r7, #7]
 8000e0c:	490f      	ldr	r1, [pc, #60]	; (8000e4c <UnlinkTimer+0x100>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	440b      	add	r3, r1
 8000e18:	330c      	adds	r3, #12
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <UnlinkTimer+0xf8>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d107      	bne.n	8000e38 <UnlinkTimer+0xec>
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <UnlinkTimer+0x104>)
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
}
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	2000013c 	.word	0x2000013c
 8000e48:	2000013d 	.word	0x2000013d
 8000e4c:	200000ac 	.word	0x200000ac
 8000e50:	20000140 	.word	0x20000140

08000e54 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <ReturnTimeElapsed+0x70>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e62:	d026      	beq.n	8000eb2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e64:	f7ff fe02 	bl	8000a6c <ReadRtcSsrValue>
 8000e68:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <ReturnTimeElapsed+0x70>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d805      	bhi.n	8000e80 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <ReturnTimeElapsed+0x70>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e00a      	b.n	8000e96 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <ReturnTimeElapsed+0x74>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <ReturnTimeElapsed+0x70>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <ReturnTimeElapsed+0x78>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <ReturnTimeElapsed+0x7c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	e001      	b.n	8000eb6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	b29b      	uxth	r3, r3
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000140 	.word	0x20000140
 8000ec8:	200002d2 	.word	0x200002d2
 8000ecc:	200002d1 	.word	0x200002d1
 8000ed0:	200002d0 	.word	0x200002d0

08000ed4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ee4:	f7ff fdc2 	bl	8000a6c <ReadRtcSsrValue>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <RestartWakeupCounter+0xa8>)
 8000eec:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f004 f959 	bl	80051a6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000ef4:	e03e      	b.n	8000f74 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d803      	bhi.n	8000f04 <RestartWakeupCounter+0x30>
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <RestartWakeupCounter+0xac>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d002      	beq.n	8000f0a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f0a:	bf00      	nop
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <RestartWakeupCounter+0xb0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f7      	beq.n	8000f0c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <RestartWakeupCounter+0xb0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <RestartWakeupCounter+0xb0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f30:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <RestartWakeupCounter+0xb4>)
 8000f34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f38:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	f004 f941 	bl	80051c2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <RestartWakeupCounter+0xb8>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	0c1b      	lsrs	r3, r3, #16
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	4910      	ldr	r1, [pc, #64]	; (8000f8c <RestartWakeupCounter+0xb8>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f50:	f7ff fd8c 	bl	8000a6c <ReadRtcSsrValue>
 8000f54:	4602      	mov	r2, r0
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <RestartWakeupCounter+0xa8>)
 8000f58:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <RestartWakeupCounter+0xb0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <RestartWakeupCounter+0xb0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f6c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f6e:	f3af 8000 	nop.w
  return ;
 8000f72:	bf00      	nop
}
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000140 	.word	0x20000140
 8000f80:	200002d0 	.word	0x200002d0
 8000f84:	200002cc 	.word	0x200002cc
 8000f88:	58000800 	.word	0x58000800
 8000f8c:	40002800 	.word	0x40002800

08000f90 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <RescheduleTimerList+0x124>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa2:	d108      	bne.n	8000fb6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000fa4:	bf00      	nop
 8000fa6:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <RescheduleTimerList+0x128>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f7      	bne.n	8000fa6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <RescheduleTimerList+0x128>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <RescheduleTimerList+0x128>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fc8:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <RescheduleTimerList+0x12c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	493b      	ldr	r1, [pc, #236]	; (80010c0 <RescheduleTimerList+0x130>)
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	3308      	adds	r3, #8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000fe4:	f7ff ff36 	bl	8000e54 <ReturnTimeElapsed>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d205      	bcs.n	8001000 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ff8:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <RescheduleTimerList+0x134>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e04d      	b.n	800109c <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <RescheduleTimerList+0x138>)
 8001004:	8812      	ldrh	r2, [r2, #0]
 8001006:	b292      	uxth	r2, r2
 8001008:	4413      	add	r3, r2
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4293      	cmp	r3, r2
 8001010:	d906      	bls.n	8001020 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <RescheduleTimerList+0x138>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <RescheduleTimerList+0x134>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e03d      	b.n	800109c <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	b29a      	uxth	r2, r3
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <RescheduleTimerList+0x134>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001030:	e034      	b.n	800109c <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	4922      	ldr	r1, [pc, #136]	; (80010c0 <RescheduleTimerList+0x130>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	3308      	adds	r3, #8
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	429a      	cmp	r2, r3
 8001048:	d20a      	bcs.n	8001060 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	491c      	ldr	r1, [pc, #112]	; (80010c0 <RescheduleTimerList+0x130>)
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	3308      	adds	r3, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e013      	b.n	8001088 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	4917      	ldr	r1, [pc, #92]	; (80010c0 <RescheduleTimerList+0x130>)
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3308      	adds	r3, #8
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <RescheduleTimerList+0x130>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4403      	add	r3, r0
 8001084:	3308      	adds	r3, #8
 8001086:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <RescheduleTimerList+0x130>)
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3315      	adds	r3, #21
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d1c7      	bne.n	8001032 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff15 	bl	8000ed4 <RestartWakeupCounter>

  return ;
 80010aa:	bf00      	nop
}
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40002800 	.word	0x40002800
 80010b8:	200002cc 	.word	0x200002cc
 80010bc:	2000013c 	.word	0x2000013c
 80010c0:	200000ac 	.word	0x200000ac
 80010c4:	20000144 	.word	0x20000144
 80010c8:	200002d4 	.word	0x200002d4

080010cc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010d2:	f3ef 8310 	mrs	r3, PRIMASK
 80010d6:	617b      	str	r3, [r7, #20]
  return(result);
 80010d8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010de:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	22ca      	movs	r2, #202	; 0xca
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
 80010e8:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2253      	movs	r2, #83	; 0x53
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80010f2:	4b59      	ldr	r3, [pc, #356]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001104:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800110e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001112:	4953      	ldr	r1, [pc, #332]	; (8001260 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	330c      	adds	r3, #12
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d170      	bne.n	800120a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001128:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800112c:	494c      	ldr	r1, [pc, #304]	; (8001260 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800113c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001140:	4947      	ldr	r1, [pc, #284]	; (8001260 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3310      	adds	r3, #16
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001152:	4b44      	ldr	r3, [pc, #272]	; (8001264 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d04e      	beq.n	80011fa <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800115c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001160:	493f      	ldr	r1, [pc, #252]	; (8001260 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	330d      	adds	r3, #13
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d125      	bne.n	80011c2 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fde5 	bl	8000d4c <UnlinkTimer>
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800118c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001190:	4933      	ldr	r1, [pc, #204]	; (8001260 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3304      	adds	r3, #4
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f9ca 	bl	8001540 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22ca      	movs	r2, #202	; 0xca
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2253      	movs	r2, #83	; 0x53
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
 80011c0:	e013      	b.n	80011ea <HW_TS_RTC_Wakeup_Handler+0x11e>
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f92b 	bl	800142c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	22ca      	movs	r2, #202	; 0xca
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2253      	movs	r2, #83	; 0x53
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	4619      	mov	r1, r3
 80011f2:	69b8      	ldr	r0, [r7, #24]
 80011f4:	f000 fa2a 	bl	800164c <HW_TS_RTC_Int_AppNot>
 80011f8:	e024      	b.n	8001244 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80011fa:	f7ff fec9 	bl	8000f90 <RescheduleTimerList>
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	f383 8810 	msr	PRIMASK, r3
 8001208:	e01c      	b.n	8001244 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800120a:	bf00      	nop
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f7      	beq.n	800120c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001230:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001234:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800124e:	bf00      	nop
}
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002cc 	.word	0x200002cc
 800125c:	2000013c 	.word	0x2000013c
 8001260:	200000ac 	.word	0x200000ac
 8001264:	20000144 	.word	0x20000144
 8001268:	58000800 	.word	0x58000800

0800126c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001278:	4a61      	ldr	r2, [pc, #388]	; (8001400 <HW_TS_Init+0x194>)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HW_TS_Init+0x194>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	22ca      	movs	r2, #202	; 0xca
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
 8001288:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HW_TS_Init+0x194>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2253      	movs	r2, #83	; 0x53
 8001290:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HW_TS_Init+0x198>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HW_TS_Init+0x198>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800129e:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HW_TS_Init+0x198>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f1c3 0304 	rsb	r3, r3, #4
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b55      	ldr	r3, [pc, #340]	; (8001408 <HW_TS_Init+0x19c>)
 80012b2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HW_TS_Init+0x198>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012bc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012c0:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	fa92 f2a2 	rbit	r2, r2
 80012c8:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	fab2 f282 	clz	r2, r2
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	40d3      	lsrs	r3, r2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HW_TS_Init+0x1a0>)
 80012dc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <HW_TS_Init+0x198>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HW_TS_Init+0x1a4>)
 80012f0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HW_TS_Init+0x1a4>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	4a44      	ldr	r2, [pc, #272]	; (800140c <HW_TS_Init+0x1a0>)
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001304:	4a40      	ldr	r2, [pc, #256]	; (8001408 <HW_TS_Init+0x19c>)
 8001306:	7812      	ldrb	r2, [r2, #0]
 8001308:	40d3      	lsrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001312:	4293      	cmp	r3, r2
 8001314:	d904      	bls.n	8001320 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HW_TS_Init+0x1a8>)
 8001318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131c:	801a      	strh	r2, [r3, #0]
 800131e:	e003      	b.n	8001328 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HW_TS_Init+0x1a8>)
 8001326:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001328:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800132c:	f7ff fb8c 	bl	8000a48 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001330:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001334:	f7ff fb74 	bl	8000a20 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d143      	bne.n	80013c6 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HW_TS_Init+0x1ac>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <HW_TS_Init+0x1b0>)
 8001346:	f04f 32ff 	mov.w	r2, #4294967295
 800134a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
 8001350:	e00c      	b.n	800136c <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001352:	7dfa      	ldrb	r2, [r7, #23]
 8001354:	4932      	ldr	r1, [pc, #200]	; (8001420 <HW_TS_Init+0x1b4>)
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	330c      	adds	r3, #12
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	3301      	adds	r3, #1
 800136a:	75fb      	strb	r3, [r7, #23]
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b05      	cmp	r3, #5
 8001370:	d9ef      	bls.n	8001352 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HW_TS_Init+0x1b8>)
 8001374:	2206      	movs	r2, #6
 8001376:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HW_TS_Init+0x194>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HW_TS_Init+0x194>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HW_TS_Init+0x194>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HW_TS_Init+0x194>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HW_TS_Init+0x1bc>)
 80013a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013a8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013aa:	2003      	movs	r0, #3
 80013ac:	f003 ff09 	bl	80051c2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HW_TS_Init+0x194>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HW_TS_Init+0x194>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e00a      	b.n	80013dc <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HW_TS_Init+0x194>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013d6:	2003      	movs	r0, #3
 80013d8:	f003 fee5 	bl	80051a6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HW_TS_Init+0x194>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80013e6:	2200      	movs	r2, #0
 80013e8:	2103      	movs	r1, #3
 80013ea:	2003      	movs	r0, #3
 80013ec:	f003 fe99 	bl	8005122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013f0:	2003      	movs	r0, #3
 80013f2:	f003 feb0 	bl	8005156 <HAL_NVIC_EnableIRQ>

  return;
 80013f6:	bf00      	nop
}
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002cc 	.word	0x200002cc
 8001404:	40002800 	.word	0x40002800
 8001408:	200002d0 	.word	0x200002d0
 800140c:	200002d1 	.word	0x200002d1
 8001410:	200002d2 	.word	0x200002d2
 8001414:	200002d4 	.word	0x200002d4
 8001418:	20000144 	.word	0x20000144
 800141c:	20000140 	.word	0x20000140
 8001420:	200000ac 	.word	0x200000ac
 8001424:	2000013c 	.word	0x2000013c
 8001428:	58000800 	.word	0x58000800

0800142c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001436:	f3ef 8310 	mrs	r3, PRIMASK
 800143a:	60fb      	str	r3, [r7, #12]
  return(result);
 800143c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800143e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001442:	2003      	movs	r0, #3
 8001444:	f003 fe95 	bl	8005172 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HW_TS_Stop+0xfc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	22ca      	movs	r2, #202	; 0xca
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <HW_TS_Stop+0xfc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2253      	movs	r2, #83	; 0x53
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	4933      	ldr	r1, [pc, #204]	; (800152c <HW_TS_Stop+0x100>)
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	330c      	adds	r3, #12
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d148      	bne.n	8001506 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fc67 	bl	8000d4c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HW_TS_Stop+0x104>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001484:	7cfb      	ldrb	r3, [r7, #19]
 8001486:	2b06      	cmp	r3, #6
 8001488:	d135      	bne.n	80014f6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HW_TS_Stop+0x108>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001496:	d108      	bne.n	80014aa <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001498:	bf00      	nop
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HW_TS_Stop+0xfc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f7      	bne.n	800149a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <HW_TS_Stop+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HW_TS_Stop+0xfc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014bc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014be:	bf00      	nop
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HW_TS_Stop+0xfc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f7      	beq.n	80014c0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HW_TS_Stop+0xfc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HW_TS_Stop+0xfc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014e4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HW_TS_Stop+0x10c>)
 80014e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ec:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014ee:	2003      	movs	r0, #3
 80014f0:	f003 fe67 	bl	80051c2 <HAL_NVIC_ClearPendingIRQ>
 80014f4:	e007      	b.n	8001506 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HW_TS_Stop+0x110>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	7cfa      	ldrb	r2, [r7, #19]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001502:	f7ff fd45 	bl	8000f90 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HW_TS_Stop+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	22ff      	movs	r2, #255	; 0xff
 800150e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001510:	2003      	movs	r0, #3
 8001512:	f003 fe20 	bl	8005156 <HAL_NVIC_EnableIRQ>
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001520:	bf00      	nop
}
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200002cc 	.word	0x200002cc
 800152c:	200000ac 	.word	0x200000ac
 8001530:	2000013c 	.word	0x2000013c
 8001534:	40002800 	.word	0x40002800
 8001538:	58000800 	.word	0x58000800
 800153c:	2000013d 	.word	0x2000013d

08001540 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	493b      	ldr	r1, [pc, #236]	; (800163c <HW_TS_Start+0xfc>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	330c      	adds	r3, #12
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d103      	bne.n	800156c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff60 	bl	800142c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800156c:	f3ef 8310 	mrs	r3, PRIMASK
 8001570:	60fb      	str	r3, [r7, #12]
  return(result);
 8001572:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001576:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001578:	2003      	movs	r0, #3
 800157a:	f003 fdfa 	bl	8005172 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HW_TS_Start+0x100>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	22ca      	movs	r2, #202	; 0xca
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HW_TS_Start+0x100>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2253      	movs	r2, #83	; 0x53
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	4929      	ldr	r1, [pc, #164]	; (800163c <HW_TS_Start+0xfc>)
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	330c      	adds	r3, #12
 80015a2:	2202      	movs	r2, #2
 80015a4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	4924      	ldr	r1, [pc, #144]	; (800163c <HW_TS_Start+0xfc>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3308      	adds	r3, #8
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	491f      	ldr	r1, [pc, #124]	; (800163c <HW_TS_Start+0xfc>)
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	3304      	adds	r3, #4
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb11 	bl	8000bf8 <linkTimer>
 80015d6:	4603      	mov	r3, r0
 80015d8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HW_TS_Start+0x104>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HW_TS_Start+0x108>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	7c7a      	ldrb	r2, [r7, #17]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d002      	beq.n	80015f2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80015ec:	f7ff fcd0 	bl	8000f90 <RescheduleTimerList>
 80015f0:	e013      	b.n	800161a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80015f2:	79fa      	ldrb	r2, [r7, #7]
 80015f4:	4911      	ldr	r1, [pc, #68]	; (800163c <HW_TS_Start+0xfc>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	3308      	adds	r3, #8
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	8a7b      	ldrh	r3, [r7, #18]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	1ac9      	subs	r1, r1, r3
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <HW_TS_Start+0xfc>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4403      	add	r3, r0
 8001616:	3308      	adds	r3, #8
 8001618:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HW_TS_Start+0x100>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001624:	2003      	movs	r0, #3
 8001626:	f003 fd96 	bl	8005156 <HAL_NVIC_EnableIRQ>
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001634:	bf00      	nop
}
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200000ac 	.word	0x200000ac
 8001640:	200002cc 	.word	0x200002cc
 8001644:	2000013c 	.word	0x2000013c
 8001648:	2000013d 	.word	0x2000013d

0800164c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	460b      	mov	r3, r1
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4798      	blx	r3

  return;
 800165e:	bf00      	nop
}
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	4613      	mov	r3, r2
 8001678:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800167e:	2300      	movs	r3, #0
 8001680:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d000      	beq.n	800168a <HW_UART_Transmit_DMA+0x22>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001688:	e00e      	b.n	80016a8 <HW_UART_Transmit_DMA+0x40>
            HW_huart1TxCb = cb;
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HW_UART_Transmit_DMA+0x80>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HW_UART_Transmit_DMA+0x84>)
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HW_UART_Transmit_DMA+0x88>)
 8001694:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001696:	89bb      	ldrh	r3, [r7, #12]
 8001698:	461a      	mov	r2, r3
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <HW_UART_Transmit_DMA+0x84>)
 800169e:	f006 fa13 	bl	8007ac8 <HAL_UART_Transmit_DMA>
 80016a2:	4603      	mov	r3, r0
 80016a4:	75fb      	strb	r3, [r7, #23]
            break;
 80016a6:	bf00      	nop
    }

    switch (hal_status)
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d816      	bhi.n	80016dc <HW_UART_Transmit_DMA+0x74>
 80016ae:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <HW_UART_Transmit_DMA+0x4c>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080016c5 	.word	0x080016c5
 80016b8:	080016cb 	.word	0x080016cb
 80016bc:	080016d1 	.word	0x080016d1
 80016c0:	080016d7 	.word	0x080016d7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75bb      	strb	r3, [r7, #22]
            break;
 80016c8:	e009      	b.n	80016de <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75bb      	strb	r3, [r7, #22]
            break;
 80016ce:	e006      	b.n	80016de <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80016d0:	2302      	movs	r3, #2
 80016d2:	75bb      	strb	r3, [r7, #22]
            break;
 80016d4:	e003      	b.n	80016de <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80016d6:	2303      	movs	r3, #3
 80016d8:	75bb      	strb	r3, [r7, #22]
            break;
 80016da:	e000      	b.n	80016de <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80016dc:	bf00      	nop
    }

    return hw_status;
 80016de:	7dbb      	ldrb	r3, [r7, #22]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20001428 	.word	0x20001428
 80016ec:	20001518 	.word	0x20001518
 80016f0:	40013800 	.word	0x40013800

080016f4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_UART_TxCpltCallback+0x30>)
 8001704:	429a      	cmp	r2, r3
 8001706:	d000      	beq.n	800170a <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8001708:	e007      	b.n	800171a <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_UART_TxCpltCallback+0x34>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_UART_TxCpltCallback+0x34>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4798      	blx	r3
            break;
 8001718:	bf00      	nop
    }

    return;
 800171a:	bf00      	nop
}
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40013800 	.word	0x40013800
 8001728:	20001428 	.word	0x20001428

0800172c <LL_EXTI_DisableIT_0_31>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <LL_EXTI_DisableIT_0_31+0x28>)
 8001736:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	43db      	mvns	r3, r3
 800173e:	4905      	ldr	r1, [pc, #20]	; (8001754 <LL_EXTI_DisableIT_0_31+0x28>)
 8001740:	4013      	ands	r3, r2
 8001742:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	58000800 	.word	0x58000800

08001758 <LL_EXTI_DisableIT_32_63>:
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <LL_EXTI_DisableIT_32_63+0x28>)
 8001762:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	43db      	mvns	r3, r3
 800176a:	4905      	ldr	r1, [pc, #20]	; (8001780 <LL_EXTI_DisableIT_32_63+0x28>)
 800176c:	4013      	ands	r3, r2
 800176e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	58000800 	.word	0x58000800

08001784 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001792:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800179e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	cafecafe 	.word	0xcafecafe

080017c0 <LL_RCC_LSE_SetDriveCapability>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d0:	f023 0218 	bic.w	r2, r3, #24
 80017d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4313      	orrs	r3, r2
 80017dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001844:	d101      	bne.n	800184a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800186a:	d101      	bne.n	8001870 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_AHB1_GRP1_EnableClock>:
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800188a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4313      	orrs	r3, r2
 8001892:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_AHB2_GRP1_EnableClock>:
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4013      	ands	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_AHB3_GRP1_EnableClock>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	605a      	str	r2, [r3, #4]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	615a      	str	r2, [r3, #20]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	615a      	str	r2, [r3, #20]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	609a      	str	r2, [r3, #8]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <LL_LPM_EnableSleep+0x1c>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <LL_LPM_EnableSleep+0x1c>)
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	6113      	str	r3, [r2, #16]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	22ca      	movs	r2, #202	; 0xca
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2253      	movs	r2, #83	; 0x53
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 0207 	bic.w	r2, r3, #7
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5c:	f003 f98a 	bl	8004d74 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001a60:	f000 f967 	bl	8001d32 <Reset_Device>
  Config_HSE();
 8001a64:	f000 f951 	bl	8001d0a <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a68:	f000 f814 	bl	8001a94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001a6c:	f000 f946 	bl	8001cfc <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001a70:	f000 f9a1 	bl	8001db6 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a74:	f000 f935 	bl	8001ce2 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a78:	f000 f916 	bl	8001ca8 <MX_DMA_Init>
  MX_RF_Init();
 8001a7c:	f000 f8d8 	bl	8001c30 <MX_RF_Init>
  MX_RTC_Init();
 8001a80:	f000 f8de 	bl	8001c40 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001a84:	f7fe feec 	bl	8000860 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f00a f846 	bl	800bb1c <UTIL_SEQ_Run>
 8001a90:	e7fa      	b.n	8001a88 <main+0x30>
	...

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0ae      	sub	sp, #184	; 0xb8
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a9e:	2248      	movs	r2, #72	; 0x48
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00a fa7d 	bl	800bfa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2250      	movs	r2, #80	; 0x50
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00a fa6d 	bl	800bfa2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ac8:	f004 f862 	bl	8005b90 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fe77 	bl	80017c0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <SystemClock_Config+0xfc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <SystemClock_Config+0xfc>)
 8001adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <SystemClock_Config+0xfc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001aee:	2307      	movs	r3, #7
 8001af0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001af8:	2301      	movs	r3, #1
 8001afa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b02:	2340      	movs	r3, #64	; 0x40
 8001b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fbee 	bl	80062f4 <HAL_RCC_OscConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b1e:	f000 f97a 	bl	8001e16 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001b22:	236f      	movs	r3, #111	; 0x6f
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b26:	2302      	movs	r3, #2
 8001b28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b42:	2101      	movs	r1, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 ff69 	bl	8006a1c <HAL_RCC_ClockConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b50:	f000 f961 	bl	8001e16 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001b54:	f643 0303 	movw	r3, #14339	; 0x3803
 8001b58:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001b72:	2310      	movs	r3, #16
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f005 fb8a 	bl	8007292 <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001b84:	f000 f947 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001b88:	bf00      	nop
 8001b8a:	37b8      	adds	r7, #184	; 0xb8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	58000400 	.word	0x58000400

08001b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001b9a:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <MX_USART1_UART_Init+0x98>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bde:	4812      	ldr	r0, [pc, #72]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001be0:	f005 ff21 	bl	8007a26 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001bea:	f000 f914 	bl	8001e16 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001bf2:	f006 fe35 	bl	8008860 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001bfc:	f000 f90b 	bl	8001e16 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c00:	2100      	movs	r1, #0
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001c04:	f006 fe6a 	bl	80088dc <HAL_UARTEx_SetRxFifoThreshold>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001c0e:	f000 f902 	bl	8001e16 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_USART1_UART_Init+0x94>)
 8001c14:	f006 fdeb 	bl	80087ee <HAL_UARTEx_DisableFifoMode>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001c1e:	f000 f8fa 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20001518 	.word	0x20001518
 8001c2c:	40013800 	.word	0x40013800

08001c30 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <MX_RTC_Init+0x64>)
 8001c48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c52:	220f      	movs	r2, #15
 8001c54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001c5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <MX_RTC_Init+0x60>)
 8001c78:	f005 fd91 	bl	800779e <HAL_RTC_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001c82:	f000 f8c8 	bl	8001e16 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_RTC_Init+0x64>)
 8001c88:	f7ff fec3 	bl	8001a12 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_RTC_Init+0x64>)
 8001c90:	f7ff fecf 	bl	8001a32 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <MX_RTC_Init+0x64>)
 8001c96:	f7ff feaf 	bl	80019f8 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200015a4 	.word	0x200015a4
 8001ca4:	40002800 	.word	0x40002800

08001ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cac:	2004      	movs	r0, #4
 8001cae:	f7ff fde5 	bl	800187c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f7ff fde2 	bl	800187c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff fddf 	bl	800187c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	200e      	movs	r0, #14
 8001cc4:	f003 fa2d 	bl	8005122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001cc8:	200e      	movs	r0, #14
 8001cca:	f003 fa44 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	203a      	movs	r0, #58	; 0x3a
 8001cd4:	f003 fa25 	bl	8005122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001cd8:	203a      	movs	r0, #58	; 0x3a
 8001cda:	f003 fa3c 	bl	8005156 <HAL_NVIC_EnableIRQ>

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2004      	movs	r0, #4
 8001ce8:	f7ff fde1 	bl	80018ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fdde 	bl	80018ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f7ff fddb 	bl	80018ae <LL_AHB2_GRP1_EnableClock>

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001d00:	bf00      	nop
}
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f008 fbdb 	bl	800a4cc <OTP_Read>
 8001d16:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	799b      	ldrb	r3, [r3, #6]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fd2e 	bl	8001784 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
}  
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <Reset_Device>:


static void Reset_Device( void )
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001d36:	f000 f827 	bl	8001d88 <Reset_BackupDomain>

	Reset_IPCC();
 8001d3a:	f000 f803 	bl	8001d44 <Reset_IPCC>
#endif

	return;
 8001d3e:	bf00      	nop
}
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001d48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d4c:	f7ff fdc8 	bl	80018e0 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001d50:	213f      	movs	r1, #63	; 0x3f
 8001d52:	480c      	ldr	r0, [pc, #48]	; (8001d84 <Reset_IPCC+0x40>)
 8001d54:	f7ff fe23 	bl	800199e <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001d58:	213f      	movs	r1, #63	; 0x3f
 8001d5a:	480a      	ldr	r0, [pc, #40]	; (8001d84 <Reset_IPCC+0x40>)
 8001d5c:	f7ff fe2d 	bl	80019ba <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001d60:	213f      	movs	r1, #63	; 0x3f
 8001d62:	4808      	ldr	r0, [pc, #32]	; (8001d84 <Reset_IPCC+0x40>)
 8001d64:	f7ff fdd5 	bl	8001912 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001d68:	213f      	movs	r1, #63	; 0x3f
 8001d6a:	4806      	ldr	r0, [pc, #24]	; (8001d84 <Reset_IPCC+0x40>)
 8001d6c:	f7ff fdf4 	bl	8001958 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001d70:	213f      	movs	r1, #63	; 0x3f
 8001d72:	4804      	ldr	r0, [pc, #16]	; (8001d84 <Reset_IPCC+0x40>)
 8001d74:	f7ff fddf 	bl	8001936 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001d78:	213f      	movs	r1, #63	; 0x3f
 8001d7a:	4802      	ldr	r0, [pc, #8]	; (8001d84 <Reset_IPCC+0x40>)
 8001d7c:	f7ff fdfe 	bl	800197c <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001d80:	bf00      	nop
}
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58000c00 	.word	0x58000c00

08001d88 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001d8c:	f7ff fd50 	bl	8001830 <LL_RCC_IsActiveFlag_PINRST>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00d      	beq.n	8001db2 <Reset_BackupDomain+0x2a>
 8001d96:	f7ff fd5e 	bl	8001856 <LL_RCC_IsActiveFlag_SFTRST>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d108      	bne.n	8001db2 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001da0:	f003 fef6 	bl	8005b90 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001da4:	f003 fef4 	bl	8005b90 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001da8:	f7ff fd20 	bl	80017ec <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001dac:	f7ff fd2f 	bl	800180e <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
}
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <Init_Exti>:

static void Init_Exti( void )
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001dba:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbe:	f7ff fcb5 	bl	800172c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001dc2:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001dc6:	f7ff fcc7 	bl	8001758 <LL_EXTI_DisableIT_32_63>

  return;
 8001dca:	bf00      	nop
}
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd6:	f003 f83b 	bl	8004e50 <HAL_GetTick>
 8001dda:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de6:	d00a      	beq.n	8001dfe <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001de8:	f003 f84a 	bl	8004e80 <HAL_GetTickFreq>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df6:	e002      	b.n	8001dfe <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001df8:	f7ff fdee 	bl	80019d8 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001dfc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001dfe:	f003 f827 	bl	8004e50 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d8f4      	bhi.n	8001df8 <HAL_Delay+0x2a>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_SetRTCClockSource>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_EnableRTC>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_AHB2_GRP1_EnableClock>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_AHB3_GRP1_EnableClock>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_APB1_GRP1_EnableClock>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_APB1_GRP2_EnableClock>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_APB2_GRP1_EnableClock>:
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001f70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f74:	f7ff ff96 	bl	8001ea4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	202e      	movs	r0, #46	; 0x2e
 8001f7e:	f003 f8d0 	bl	8005122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001f82:	202e      	movs	r0, #46	; 0x2e
 8001f84:	f003 f8e7 	bl	8005156 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6c      	ldr	r2, [pc, #432]	; (800215c <HAL_UART_MspInit+0x1d0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d16f      	bne.n	800208e <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff ffaa 	bl	8001f08 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f7ff ff5c 	bl	8001e72 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fba:	230c      	movs	r3, #12
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f003 fc16 	bl	8005808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fdc:	2340      	movs	r3, #64	; 0x40
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001fec:	2308      	movs	r3, #8
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffa:	f003 fc05 	bl	8005808 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_UART_MspInit+0x1d8>)
 8002002:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002006:	2211      	movs	r2, #17
 8002008:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800200a:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 800200c:	2210      	movs	r2, #16
 800200e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002016:	4b52      	ldr	r3, [pc, #328]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002022:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002028:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002034:	484a      	ldr	r0, [pc, #296]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002036:	f003 f8d3 	bl	80051e0 <HAL_DMA_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002040:	f7ff fee9 	bl	8001e16 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002044:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002048:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4619      	mov	r1, r3
 8002060:	483f      	ldr	r0, [pc, #252]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002062:	f003 fb91 	bl	8005788 <HAL_DMAEx_ConfigMuxSync>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800206c:	f7ff fed3 	bl	8001e16 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002074:	675a      	str	r2, [r3, #116]	; 0x74
 8002076:	4a3a      	ldr	r2, [pc, #232]	; (8002160 <HAL_UART_MspInit+0x1d4>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	2025      	movs	r0, #37	; 0x25
 8002082:	f003 f84e 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002086:	2025      	movs	r0, #37	; 0x25
 8002088:	f003 f865 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800208c:	e061      	b.n	8002152 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a35      	ldr	r2, [pc, #212]	; (8002168 <HAL_UART_MspInit+0x1dc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d15c      	bne.n	8002152 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002098:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800209c:	f7ff ff4d 	bl	8001f3a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7ff fee6 	bl	8001e72 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	2002      	movs	r0, #2
 80020a8:	f7ff fee3 	bl	8001e72 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020be:	2307      	movs	r3, #7
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f003 fb9c 	bl	8005808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d0:	23c0      	movs	r3, #192	; 0xc0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020e0:	2307      	movs	r3, #7
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4820      	ldr	r0, [pc, #128]	; (800216c <HAL_UART_MspInit+0x1e0>)
 80020ec:	f003 fb8c 	bl	8005808 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80020f0:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 80020f2:	4a20      	ldr	r2, [pc, #128]	; (8002174 <HAL_UART_MspInit+0x1e8>)
 80020f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 80020f8:	220f      	movs	r2, #15
 80020fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 80020fe:	2210      	movs	r2, #16
 8002100:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002126:	4812      	ldr	r0, [pc, #72]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 8002128:	f003 f85a 	bl	80051e0 <HAL_DMA_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8002132:	f7ff fe70 	bl	8001e16 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 800213a:	675a      	str	r2, [r3, #116]	; 0x74
 800213c:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <HAL_UART_MspInit+0x1e4>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2024      	movs	r0, #36	; 0x24
 8002148:	f002 ffeb 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800214c:	2024      	movs	r0, #36	; 0x24
 800214e:	f003 f802 	bl	8005156 <HAL_NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3730      	adds	r7, #48	; 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40008000 	.word	0x40008000
 8002160:	200015c8 	.word	0x200015c8
 8002164:	40020044 	.word	0x40020044
 8002168:	40013800 	.word	0x40013800
 800216c:	48000400 	.word	0x48000400
 8002170:	200014b8 	.word	0x200014b8
 8002174:	40020444 	.word	0x40020444

08002178 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <HAL_RTC_MspInit+0x3c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d110      	bne.n	80021ac <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800218a:	f003 fd01 	bl	8005b90 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800218e:	f003 fcff 	bl	8005b90 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002192:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002196:	f7ff fe45 	bl	8001e24 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800219a:	f7ff fe59 	bl	8001e50 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800219e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021a2:	f7ff fe98 	bl	8001ed6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f005 fbe7 	bl	800797a <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40002800 	.word	0x40002800

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <MemManage_Handler+0x4>

080021d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler+0x4>

080021de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220c:	f002 fe0c 	bl	8004e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA1_Channel4_IRQHandler+0x10>)
 800221a:	f003 f963 	bl	80054e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200015c8 	.word	0x200015c8

08002228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <USART1_IRQHandler+0x10>)
 800222e:	f005 fccb 	bl	8007bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20001518 	.word	0x20001518

0800223c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <LPUART1_IRQHandler+0x10>)
 8002242:	f005 fcc1 	bl	8007bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000142c 	.word	0x2000142c

08002250 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002254:	f003 fc78 	bl	8005b48 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <DMA2_Channel4_IRQHandler+0x10>)
 8002262:	f003 f93f 	bl	80054e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200014b8 	.word	0x200014b8

08002270 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002274:	2010      	movs	r0, #16
 8002276:	f003 fc4f 	bl	8005b18 <HAL_GPIO_EXTI_IRQHandler>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}

0800227e <RTC_WKUP_IRQHandler>:
{

}

void RTC_WKUP_IRQHandler(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002282:	f7fe ff23 	bl	80010cc <HW_TS_RTC_Wakeup_Handler>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}

0800228a <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 800228e:	f002 fa47 	bl	8004720 <HW_IPCC_Tx_Handler>

  return;
 8002292:	bf00      	nop
}
 8002294:	bd80      	pop	{r7, pc}

08002296 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800229a:	f002 fa09 	bl	80046b0 <HW_IPCC_Rx_Handler>
  return;
 800229e:	bf00      	nop
}
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e00a      	b.n	80022ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022b4:	f3af 8000 	nop.w
 80022b8:	4601      	mov	r1, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	60ba      	str	r2, [r7, #8]
 80022c0:	b2ca      	uxtb	r2, r1
 80022c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	dbf0      	blt.n	80022b4 <_read+0x12>
	}

return len;
 80022d2:	687b      	ldr	r3, [r7, #4]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_close>:
	}
	return len;
}

int _close(int file)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002304:	605a      	str	r2, [r3, #4]
	return 0;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_isatty>:

int _isatty(int file)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	return 1;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
	return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_sbrk+0x50>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x16>
		heap_end = &end;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <_sbrk+0x50>)
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <_sbrk+0x54>)
 8002358:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <_sbrk+0x50>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <_sbrk+0x50>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	466a      	mov	r2, sp
 800236a:	4293      	cmp	r3, r2
 800236c:	d907      	bls.n	800237e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800236e:	f009 fde3 	bl	800bf38 <__errno>
 8002372:	4602      	mov	r2, r0
 8002374:	230c      	movs	r3, #12
 8002376:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
 800237c:	e006      	b.n	800238c <_sbrk+0x48>
	}

	heap_end += incr;
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <_sbrk+0x50>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a03      	ldr	r2, [pc, #12]	; (8002394 <_sbrk+0x50>)
 8002388:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200002d8 	.word	0x200002d8
 8002398:	20001670 	.word	0x20001670

0800239c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <LL_FLASH_GetUDN+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	1fff7580 	.word	0x1fff7580

080023b4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <LL_FLASH_GetDeviceID+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	1fff7584 	.word	0x1fff7584

080023cc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <LL_FLASH_GetSTCompanyID+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0a1b      	lsrs	r3, r3, #8
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	1fff7584 	.word	0x1fff7584

080023e4 <APP_BLE_Init>:
#endif
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80023ea:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <APP_BLE_Init+0x110>)
 80023ec:	463c      	mov	r4, r7
 80023ee:	461d      	mov	r5, r3
 80023f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023fc:	c407      	stmia	r4!, {r0, r1, r2}
 80023fe:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8002400:	f000 feba 	bl	8003178 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002404:	2101      	movs	r1, #1
 8002406:	2002      	movs	r0, #2
 8002408:	f009 fb5a 	bl	800bac0 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
 UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800240c:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <APP_BLE_Init+0x114>)
 800240e:	2100      	movs	r1, #0
 8002410:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002414:	f009 fc62 	bl	800bcdc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8002418:	463b      	mov	r3, r7
 800241a:	4618      	mov	r0, r3
 800241c:	f008 f9a2 	bl	800a764 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002420:	f000 fec0 	bl	80031a4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002424:	f009 f818 	bl	800b458 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 8002428:	4a34      	ldr	r2, [pc, #208]	; (80024fc <APP_BLE_Init+0x118>)
 800242a:	2100      	movs	r1, #0
 800242c:	2002      	movs	r0, #2
 800242e:	f009 fc55 	bl	800bcdc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, ConnReq1);
 8002432:	4a33      	ldr	r2, [pc, #204]	; (8002500 <APP_BLE_Init+0x11c>)
 8002434:	2100      	movs	r1, #0
 8002436:	2004      	movs	r0, #4
 8002438:	f009 fc50 	bl	800bcdc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_ADV_ID, UTIL_SEQ_RFU, Adv_Request);
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <APP_BLE_Init+0x120>)
 800243e:	2100      	movs	r1, #0
 8002440:	2001      	movs	r0, #1
 8002442:	f009 fc4b 	bl	800bcdc <UTIL_SEQ_RegTask>
#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN SCH_RegTask_Multi */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_2_ID, UTIL_SEQ_RFU, ConnReq2);
 8002446:	4a30      	ldr	r2, [pc, #192]	; (8002508 <APP_BLE_Init+0x124>)
 8002448:	2100      	movs	r1, #0
 800244a:	2008      	movs	r0, #8
 800244c:	f009 fc46 	bl	800bcdc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_3_ID, UTIL_SEQ_RFU, ConnReq3);
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <APP_BLE_Init+0x128>)
 8002452:	2100      	movs	r1, #0
 8002454:	2010      	movs	r0, #16
 8002456:	f009 fc41 	bl	800bcdc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_4_ID, UTIL_SEQ_RFU, ConnReq4);
 800245a:	4a2d      	ldr	r2, [pc, #180]	; (8002510 <APP_BLE_Init+0x12c>)
 800245c:	2100      	movs	r1, #0
 800245e:	2020      	movs	r0, #32
 8002460:	f009 fc3c 	bl	800bcdc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_5_ID, UTIL_SEQ_RFU, ConnReq5);
 8002464:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <APP_BLE_Init+0x130>)
 8002466:	2100      	movs	r1, #0
 8002468:	2040      	movs	r0, #64	; 0x40
 800246a:	f009 fc37 	bl	800bcdc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_6_ID, UTIL_SEQ_RFU, ConnReq6);
 800246e:	4a2a      	ldr	r2, [pc, #168]	; (8002518 <APP_BLE_Init+0x134>)
 8002470:	2100      	movs	r1, #0
 8002472:	2080      	movs	r0, #128	; 0x80
 8002474:	f009 fc32 	bl	800bcdc <UTIL_SEQ_RegTask>
#endif

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.SmartPhone_Connection_Status = APP_BLE_IDLE;
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <APP_BLE_Init+0x138>)
 800247a:	2200      	movs	r2, #0
 800247c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <APP_BLE_Init+0x138>)
 8002482:	2200      	movs	r2, #0
 8002484:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
  BleApplicationContext.EndDevice1Found = 0x00;
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <APP_BLE_Init+0x138>)
 800248a:	2200      	movs	r2, #0
 800248c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN Connection_Status_Multi */
  BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <APP_BLE_Init+0x138>)
 8002492:	2200      	movs	r2, #0
 8002494:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
  BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <APP_BLE_Init+0x138>)
 800249a:	2200      	movs	r2, #0
 800249c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
  BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <APP_BLE_Init+0x138>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 80024a8:	4b1c      	ldr	r3, [pc, #112]	; (800251c <APP_BLE_Init+0x138>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <APP_BLE_Init+0x138>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
/* USER CODE END Connection_Status_Multi */
/* USER CODE BEGIN EndDeviceFound_Multi_Init */
  BleApplicationContext.EndDevice2Found = 0x00;
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <APP_BLE_Init+0x138>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
  BleApplicationContext.EndDevice3Found = 0x00;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <APP_BLE_Init+0x138>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
  BleApplicationContext.EndDevice4Found = 0x00;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <APP_BLE_Init+0x138>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
  BleApplicationContext.EndDevice5Found = 0x00;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <APP_BLE_Init+0x138>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
  BleApplicationContext.EndDevice6Found = 0x00;
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <APP_BLE_Init+0x138>)
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
/* USER CODE END EndDeviceFound_Multi_Init */
#endif
/**
 * Initialize P2P Routeur Application
 */
  P2PR_APP_Init();
 80024e0:	f001 fc0a 	bl	8003cf8 <P2PR_APP_Init>

  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_ADV_ID, CFG_SCH_PRIO_0);
 80024e4:	2100      	movs	r1, #0
 80024e6:	2001      	movs	r0, #1
 80024e8:	f009 fc18 	bl	800bd1c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80024ec:	bf00      	nop
}
 80024ee:	3730      	adds	r7, #48	; 0x30
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	0800cf0c 	.word	0x0800cf0c
 80024f8:	0800a199 	.word	0x0800a199
 80024fc:	08003369 	.word	0x08003369
 8002500:	08003491 	.word	0x08003491
 8002504:	080033f5 	.word	0x080033f5
 8002508:	08003511 	.word	0x08003511
 800250c:	08003591 	.word	0x08003591
 8002510:	08003611 	.word	0x08003611
 8002514:	08003691 	.word	0x08003691
 8002518:	08003711 	.word	0x08003711
 800251c:	20000148 	.word	0x20000148

08002520 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	b09b      	sub	sp, #108	; 0x6c
 8002524:	af06      	add	r7, sp, #24
 8002526:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3301      	adds	r3, #1
 800252c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t result;
  uint8_t role, event_type, event_data_size;
  int k = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t *adv_report_data;
  uint8_t adtype, adlength;
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	3302      	adds	r3, #2
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38

  switch (event_pckt->evt)
 8002538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b3e      	cmp	r3, #62	; 0x3e
 800253e:	f000 81bf 	beq.w	80028c0 <SVCCTL_App_Notification+0x3a0>
 8002542:	2bff      	cmp	r3, #255	; 0xff
 8002544:	d004      	beq.n	8002550 <SVCCTL_App_Notification+0x30>
 8002546:	2b05      	cmp	r3, #5
 8002548:	f000 80e4 	beq.w	8002714 <SVCCTL_App_Notification+0x1f4>
 800254c:	f000 bd91 	b.w	8003072 <SVCCTL_App_Notification+0xb52>
    /* USER CODE BEGIN evt */

    /* USER CODE END evt */
    case EVT_VENDOR:
    {
      handleNotification.P2P_Evt_Opcode = P2P_SERVER1_DISCON_HANDLE_EVT;
 8002550:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <SVCCTL_App_Notification+0x1e0>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8002556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002558:	3302      	adds	r3, #2
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
      /* USER CODE BEGIN EVT_VENDOR */

      /* USER CODE END EVT_VENDOR */
      switch (blue_evt->ecode)
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f240 4207 	movw	r2, #1031	; 0x407
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <SVCCTL_App_Notification+0x54>
 800256a:	f640 0202 	movw	r2, #2050	; 0x802
 800256e:	4293      	cmp	r3, r2
 8002570:	d06e      	beq.n	8002650 <SVCCTL_App_Notification+0x130>

        default:
          /* USER CODE BEGIN ecode_default */

          /* USER CODE END ecode_default */
          break;
 8002572:	e0c2      	b.n	80026fa <SVCCTL_App_Notification+0x1da>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	3302      	adds	r3, #2
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b02      	cmp	r3, #2
 8002580:	f040 80b7 	bne.w	80026f2 <SVCCTL_App_Notification+0x1d2>
              && gap_evt_proc_complete->Status == 0x00)
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	785b      	ldrb	r3, [r3, #1]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 80b2 	bne.w	80026f2 <SVCCTL_App_Notification+0x1d2>
            BSP_LED_Off(LED_BLUE);
 800258e:	2000      	movs	r0, #0
 8002590:	f002 fa4c 	bl	8004a2c <BSP_LED_Off>
            APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n");
 8002594:	485b      	ldr	r0, [pc, #364]	; (8002704 <SVCCTL_App_Notification+0x1e4>)
 8002596:	f009 fd95 	bl	800c0c4 <puts>
            if (BleApplicationContext.EndDevice1Found == 0x01
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 800259c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d109      	bne.n	80025b8 <SVCCTL_App_Notification+0x98>
                && BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 80025a4:	4b58      	ldr	r3, [pc, #352]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 80025a6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d004      	beq.n	80025b8 <SVCCTL_App_Notification+0x98>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 80025ae:	2100      	movs	r1, #0
 80025b0:	2004      	movs	r0, #4
 80025b2:	f009 fbb3 	bl	800bd1c <UTIL_SEQ_SetTask>
 80025b6:	e04a      	b.n	800264e <SVCCTL_App_Notification+0x12e>
            else if (BleApplicationContext.EndDevice2Found == 0x01
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 80025ba:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d109      	bne.n	80025d6 <SVCCTL_App_Notification+0xb6>
                && BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 80025c4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d004      	beq.n	80025d6 <SVCCTL_App_Notification+0xb6>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	2008      	movs	r0, #8
 80025d0:	f009 fba4 	bl	800bd1c <UTIL_SEQ_SetTask>
 80025d4:	e03b      	b.n	800264e <SVCCTL_App_Notification+0x12e>
            else if (BleApplicationContext.EndDevice3Found == 0x01
 80025d6:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 80025d8:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d109      	bne.n	80025f4 <SVCCTL_App_Notification+0xd4>
                && BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 80025e0:	4b49      	ldr	r3, [pc, #292]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 80025e2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d004      	beq.n	80025f4 <SVCCTL_App_Notification+0xd4>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 80025ea:	2100      	movs	r1, #0
 80025ec:	2010      	movs	r0, #16
 80025ee:	f009 fb95 	bl	800bd1c <UTIL_SEQ_SetTask>
 80025f2:	e02c      	b.n	800264e <SVCCTL_App_Notification+0x12e>
            else if (BleApplicationContext.EndDevice4Found == 0x01
 80025f4:	4b44      	ldr	r3, [pc, #272]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 80025f6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d109      	bne.n	8002612 <SVCCTL_App_Notification+0xf2>
                && BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 80025fe:	4b42      	ldr	r3, [pc, #264]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 8002600:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002604:	2b05      	cmp	r3, #5
 8002606:	d004      	beq.n	8002612 <SVCCTL_App_Notification+0xf2>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 8002608:	2100      	movs	r1, #0
 800260a:	2020      	movs	r0, #32
 800260c:	f009 fb86 	bl	800bd1c <UTIL_SEQ_SetTask>
 8002610:	e01d      	b.n	800264e <SVCCTL_App_Notification+0x12e>
            else if (BleApplicationContext.EndDevice5Found == 0x01
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 8002614:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8002618:	2b01      	cmp	r3, #1
 800261a:	d109      	bne.n	8002630 <SVCCTL_App_Notification+0x110>
                && BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 800261e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002622:	2b05      	cmp	r3, #5
 8002624:	d004      	beq.n	8002630 <SVCCTL_App_Notification+0x110>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 8002626:	2100      	movs	r1, #0
 8002628:	2040      	movs	r0, #64	; 0x40
 800262a:	f009 fb77 	bl	800bd1c <UTIL_SEQ_SetTask>
 800262e:	e00e      	b.n	800264e <SVCCTL_App_Notification+0x12e>
            else if (BleApplicationContext.EndDevice6Found == 0x01
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 8002632:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002636:	2b01      	cmp	r3, #1
 8002638:	d15b      	bne.n	80026f2 <SVCCTL_App_Notification+0x1d2>
                && BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <SVCCTL_App_Notification+0x1e8>)
 800263c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002640:	2b05      	cmp	r3, #5
 8002642:	d056      	beq.n	80026f2 <SVCCTL_App_Notification+0x1d2>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 8002644:	2100      	movs	r1, #0
 8002646:	2080      	movs	r0, #128	; 0x80
 8002648:	f009 fb68 	bl	800bd1c <UTIL_SEQ_SetTask>
        break; /* EVT_BLUE_GAP_PAIRING_CMPLT */
 800264c:	e051      	b.n	80026f2 <SVCCTL_App_Notification+0x1d2>
 800264e:	e050      	b.n	80026f2 <SVCCTL_App_Notification+0x1d2>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	3302      	adds	r3, #2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
          APP_BLE_p2p_Conn_Update_req.Connection_Handle = pr->Connection_Handle;
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 800265e:	801a      	strh	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	789a      	ldrb	r2, [r3, #2]
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 8002666:	709a      	strb	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 8002672:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 800267e:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 800268a:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 8002696:	815a      	strh	r2, [r3, #10]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b1a      	ldr	r3, [pc, #104]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 80026a2:	819a      	strh	r2, [r3, #12]
          result = aci_l2cap_connection_parameter_update_resp(APP_BLE_p2p_Conn_Update_req.Connection_Handle,
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 80026a6:	8818      	ldrh	r0, [r3, #0]
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 80026aa:	88dc      	ldrh	r4, [r3, #6]
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 80026ae:	891d      	ldrh	r5, [r3, #8]
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 80026b2:	895e      	ldrh	r6, [r3, #10]
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 80026b6:	899b      	ldrh	r3, [r3, #12]
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <SVCCTL_App_Notification+0x1ec>)
 80026ba:	7892      	ldrb	r2, [r2, #2]
 80026bc:	2100      	movs	r1, #0
 80026be:	9104      	str	r1, [sp, #16]
 80026c0:	9203      	str	r2, [sp, #12]
 80026c2:	2210      	movs	r2, #16
 80026c4:	9202      	str	r2, [sp, #8]
 80026c6:	2210      	movs	r2, #16
 80026c8:	9201      	str	r2, [sp, #4]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4633      	mov	r3, r6
 80026ce:	462a      	mov	r2, r5
 80026d0:	4621      	mov	r1, r4
 80026d2:	f007 fb15 	bl	8009d00 <aci_l2cap_connection_parameter_update_resp>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          APP_DBG_MSG("\r\n\r** NO UPDATE \n");
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <SVCCTL_App_Notification+0x1f0>)
 80026de:	f009 fcf1 	bl	800c0c4 <puts>
          if(result != BLE_STATUS_SUCCESS) {
 80026e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <SVCCTL_App_Notification+0x1d8>
              BSP_LED_On(LED_RED);
 80026ea:	2002      	movs	r0, #2
 80026ec:	f002 f984 	bl	80049f8 <BSP_LED_On>
        break;
 80026f0:	e002      	b.n	80026f8 <SVCCTL_App_Notification+0x1d8>
        break; /* EVT_BLUE_GAP_PAIRING_CMPLT */
 80026f2:	bf00      	nop
 80026f4:	f000 bcbd 	b.w	8003072 <SVCCTL_App_Notification+0xb52>
        break;
 80026f8:	bf00      	nop
      }
    }
    break; /* EVT_VENDOR */
 80026fa:	f000 bcba 	b.w	8003072 <SVCCTL_App_Notification+0xb52>
 80026fe:	bf00      	nop
 8002700:	20001630 	.word	0x20001630
 8002704:	0800cf3c 	.word	0x0800cf3c
 8002708:	20000148 	.word	0x20000148
 800270c:	20000200 	.word	0x20000200
 8002710:	0800cf6c 	.word	0x0800cf6c
    case EVT_DISCONN_COMPLETE:

      /* USER CODE BEGIN EVT_DISCONN_COMPLETE */

      /* USER CODE END EVT_DISCONN_COMPLETE */
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice1)
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b80      	ldr	r3, [pc, #512]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800271e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002722:	429a      	cmp	r2, r3
 8002724:	d115      	bne.n	8002752 <SVCCTL_App_Notification+0x232>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 1 \n");
 8002726:	487f      	ldr	r0, [pc, #508]	; (8002924 <SVCCTL_App_Notification+0x404>)
 8002728:	f009 fccc 	bl	800c0c4 <puts>
        BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 800272c:	4b7c      	ldr	r3, [pc, #496]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800272e:	2200      	movs	r2, #0
 8002730:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
        BleApplicationContext.connectionHandleEndDevice1 = 0xFFFF;
 8002734:	4b7a      	ldr	r3, [pc, #488]	; (8002920 <SVCCTL_App_Notification+0x400>)
 8002736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
        handleNotification.P2P_Evt_Opcode = P2P_SERVER1_DISCON_HANDLE_EVT;
 800273e:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <SVCCTL_App_Notification+0x408>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 8002744:	4b79      	ldr	r3, [pc, #484]	; (800292c <SVCCTL_App_Notification+0x40c>)
 8002746:	881a      	ldrh	r2, [r3, #0]
 8002748:	4b77      	ldr	r3, [pc, #476]	; (8002928 <SVCCTL_App_Notification+0x408>)
 800274a:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 800274c:	4876      	ldr	r0, [pc, #472]	; (8002928 <SVCCTL_App_Notification+0x408>)
 800274e:	f001 f81f 	bl	8003790 <Evt_Notification>
      }

      if (cc->Connection_Handle == BleApplicationContext.connectionHandleCentral)
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002758:	b29a      	uxth	r2, r3
 800275a:	4b71      	ldr	r3, [pc, #452]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800275c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002760:	429a      	cmp	r2, r3
 8002762:	d110      	bne.n	8002786 <SVCCTL_App_Notification+0x266>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF SMART PHONE \n");
 8002764:	4872      	ldr	r0, [pc, #456]	; (8002930 <SVCCTL_App_Notification+0x410>)
 8002766:	f009 fcad 	bl	800c0c4 <puts>
        BleApplicationContext.connectionHandleCentral = APP_BLE_IDLE;
 800276a:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800276c:	2200      	movs	r2, #0
 800276e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
        handleNotification.P2P_Evt_Opcode = SMART_PHONE1_DISCON_HANDLE_EVT;
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <SVCCTL_App_Notification+0x408>)
 8002774:	2203      	movs	r2, #3
 8002776:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = 0xFFFF;
 8002778:	4b6b      	ldr	r3, [pc, #428]	; (8002928 <SVCCTL_App_Notification+0x408>)
 800277a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277e:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8002780:	4869      	ldr	r0, [pc, #420]	; (8002928 <SVCCTL_App_Notification+0x408>)
 8002782:	f001 f805 	bl	8003790 <Evt_Notification>
      }

#if (CFG_P2P_DEMO_MULTI != 0)
      /* USER CODE BEGIN EVT_DISCONN_COMPLETE_Multi */
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice2)
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <SVCCTL_App_Notification+0x400>)
 8002790:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002794:	429a      	cmp	r2, r3
 8002796:	d115      	bne.n	80027c4 <SVCCTL_App_Notification+0x2a4>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 2 \n");
 8002798:	4866      	ldr	r0, [pc, #408]	; (8002934 <SVCCTL_App_Notification+0x414>)
 800279a:	f009 fc93 	bl	800c0c4 <puts>
        BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 800279e:	4b60      	ldr	r3, [pc, #384]	; (8002920 <SVCCTL_App_Notification+0x400>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
        BleApplicationContext.connectionHandleEndDevice2 = 0xFFFF;
 80027a6:	4b5e      	ldr	r3, [pc, #376]	; (8002920 <SVCCTL_App_Notification+0x400>)
 80027a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ac:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
        handleNotification.P2P_Evt_Opcode = P2P_SERVER2_DISCON_HANDLE_EVT;
 80027b0:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80027b2:	2209      	movs	r2, #9
 80027b4:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <SVCCTL_App_Notification+0x40c>)
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80027bc:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80027be:	485a      	ldr	r0, [pc, #360]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80027c0:	f000 ffe6 	bl	8003790 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice3)
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b54      	ldr	r3, [pc, #336]	; (8002920 <SVCCTL_App_Notification+0x400>)
 80027ce:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d115      	bne.n	8002802 <SVCCTL_App_Notification+0x2e2>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 3 \n");
 80027d6:	4858      	ldr	r0, [pc, #352]	; (8002938 <SVCCTL_App_Notification+0x418>)
 80027d8:	f009 fc74 	bl	800c0c4 <puts>
        BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <SVCCTL_App_Notification+0x400>)
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
        BleApplicationContext.connectionHandleEndDevice3 = 0xFFFF;
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <SVCCTL_App_Notification+0x400>)
 80027e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ea:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        handleNotification.P2P_Evt_Opcode = P2P_SERVER3_DISCON_HANDLE_EVT;
 80027ee:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80027f0:	220a      	movs	r2, #10
 80027f2:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <SVCCTL_App_Notification+0x40c>)
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80027fa:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80027fc:	484a      	ldr	r0, [pc, #296]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80027fe:	f000 ffc7 	bl	8003790 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice4)
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002808:	b29a      	uxth	r2, r3
 800280a:	4b45      	ldr	r3, [pc, #276]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800280c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002810:	429a      	cmp	r2, r3
 8002812:	d115      	bne.n	8002840 <SVCCTL_App_Notification+0x320>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 4 \n");
 8002814:	4849      	ldr	r0, [pc, #292]	; (800293c <SVCCTL_App_Notification+0x41c>)
 8002816:	f009 fc55 	bl	800c0c4 <puts>
        BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800281c:	2200      	movs	r2, #0
 800281e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
        BleApplicationContext.connectionHandleEndDevice4 = 0xFFFF;
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <SVCCTL_App_Notification+0x400>)
 8002824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002828:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        handleNotification.P2P_Evt_Opcode = P2P_SERVER4_DISCON_HANDLE_EVT;
 800282c:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <SVCCTL_App_Notification+0x408>)
 800282e:	220b      	movs	r2, #11
 8002830:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <SVCCTL_App_Notification+0x40c>)
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <SVCCTL_App_Notification+0x408>)
 8002838:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 800283a:	483b      	ldr	r0, [pc, #236]	; (8002928 <SVCCTL_App_Notification+0x408>)
 800283c:	f000 ffa8 	bl	8003790 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice5)
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800284a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800284e:	429a      	cmp	r2, r3
 8002850:	d115      	bne.n	800287e <SVCCTL_App_Notification+0x35e>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 5 \n");
 8002852:	483b      	ldr	r0, [pc, #236]	; (8002940 <SVCCTL_App_Notification+0x420>)
 8002854:	f009 fc36 	bl	800c0c4 <puts>
        BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800285a:	2200      	movs	r2, #0
 800285c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        BleApplicationContext.connectionHandleEndDevice5 = 0xFFFF;
 8002860:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <SVCCTL_App_Notification+0x400>)
 8002862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002866:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        handleNotification.P2P_Evt_Opcode = P2P_SERVER5_DISCON_HANDLE_EVT;
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <SVCCTL_App_Notification+0x408>)
 800286c:	220c      	movs	r2, #12
 800286e:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <SVCCTL_App_Notification+0x40c>)
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <SVCCTL_App_Notification+0x408>)
 8002876:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8002878:	482b      	ldr	r0, [pc, #172]	; (8002928 <SVCCTL_App_Notification+0x408>)
 800287a:	f000 ff89 	bl	8003790 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice6)
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <SVCCTL_App_Notification+0x400>)
 8002888:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800288c:	429a      	cmp	r2, r3
 800288e:	f040 83ef 	bne.w	8003070 <SVCCTL_App_Notification+0xb50>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 6 \n");
 8002892:	482c      	ldr	r0, [pc, #176]	; (8002944 <SVCCTL_App_Notification+0x424>)
 8002894:	f009 fc16 	bl	800c0c4 <puts>
        BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <SVCCTL_App_Notification+0x400>)
 800289a:	2200      	movs	r2, #0
 800289c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        BleApplicationContext.connectionHandleEndDevice6 = 0xFFFF;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <SVCCTL_App_Notification+0x400>)
 80028a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
        handleNotification.P2P_Evt_Opcode = P2P_SERVER6_DISCON_HANDLE_EVT;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80028ac:	220d      	movs	r2, #13
 80028ae:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <SVCCTL_App_Notification+0x40c>)
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80028b6:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80028b8:	481b      	ldr	r0, [pc, #108]	; (8002928 <SVCCTL_App_Notification+0x408>)
 80028ba:	f000 ff69 	bl	8003790 <Evt_Notification>

      
      /* USER CODE END EVT_DISCONN_COMPLETE_Multi */
#endif

      break; /* EVT_DISCONN_COMPLETE */
 80028be:	e3d7      	b.n	8003070 <SVCCTL_App_Notification+0xb50>
    case EVT_LE_META_EVENT:

      /* USER CODE BEGIN EVT_LE_META_EVENT */

      /* USER CODE END EVT_LE_META_EVENT */
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	3302      	adds	r3, #2
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24

      switch (meta_evt->subevent)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d003      	beq.n	80028d6 <SVCCTL_App_Notification+0x3b6>
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	f000 827a 	beq.w	8002dc8 <SVCCTL_App_Notification+0x8a8>

          break;

      }

      break; /* HCI_EVT_LE_META_EVENT */
 80028d4:	e3cd      	b.n	8003072 <SVCCTL_App_Notification+0xb52>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	3301      	adds	r3, #1
 80028da:	613b      	str	r3, [r7, #16]
          connection_handle = connection_complete_event->Connection_Handle;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <SVCCTL_App_Notification+0x40c>)
 80028e6:	801a      	strh	r2, [r3, #0]
          role = connection_complete_event->Role;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	78db      	ldrb	r3, [r3, #3]
 80028ec:	73fb      	strb	r3, [r7, #15]
          if (role == 0x00)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 8256 	bne.w	8002da2 <SVCCTL_App_Notification+0x882>
            uint8_t dev1 = 1
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
           , dev2 = 1,dev3 = 1,dev4 = 1,dev5 = 1,dev6 = 1
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002902:	2301      	movs	r3, #1
 8002904:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002914:	2301      	movs	r3, #1
 8002916:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (int i = 0; i < 6; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	643b      	str	r3, [r7, #64]	; 0x40
 800291e:	e094      	b.n	8002a4a <SVCCTL_App_Notification+0x52a>
 8002920:	20000148 	.word	0x20000148
 8002924:	0800cf80 	.word	0x0800cf80
 8002928:	20001630 	.word	0x20001630
 800292c:	20001642 	.word	0x20001642
 8002930:	0800cfac 	.word	0x0800cfac
 8002934:	0800cfd8 	.word	0x0800cfd8
 8002938:	0800d004 	.word	0x0800d004
 800293c:	0800d030 	.word	0x0800d030
 8002940:	0800d05c 	.word	0x0800d05c
 8002944:	0800d088 	.word	0x0800d088
              dev1 &= (P2P_SERVER1_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8002948:	4a9b      	ldr	r2, [pc, #620]	; (8002bb8 <SVCCTL_App_Notification+0x698>)
 800294a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294c:	4413      	add	r3, r2
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	6939      	ldr	r1, [r7, #16]
 8002952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002954:	440b      	add	r3, r1
 8002956:	3305      	adds	r3, #5
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	b25a      	sxtb	r2, r3
 8002966:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800296a:	4013      	ands	r3, r2
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
              dev2 &= (P2P_SERVER2_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8002972:	4a92      	ldr	r2, [pc, #584]	; (8002bbc <SVCCTL_App_Notification+0x69c>)
 8002974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002976:	4413      	add	r3, r2
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	6939      	ldr	r1, [r7, #16]
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	440b      	add	r3, r1
 8002980:	3305      	adds	r3, #5
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	b25a      	sxtb	r2, r3
 8002990:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8002994:	4013      	ands	r3, r2
 8002996:	b25b      	sxtb	r3, r3
 8002998:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              dev3 &= (P2P_SERVER3_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 800299c:	4a88      	ldr	r2, [pc, #544]	; (8002bc0 <SVCCTL_App_Notification+0x6a0>)
 800299e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a0:	4413      	add	r3, r2
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	6939      	ldr	r1, [r7, #16]
 80029a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a8:	440b      	add	r3, r1
 80029aa:	3305      	adds	r3, #5
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 80029be:	4013      	ands	r3, r2
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
              dev4 &= (P2P_SERVER4_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 80029c6:	4a7f      	ldr	r2, [pc, #508]	; (8002bc4 <SVCCTL_App_Notification+0x6a4>)
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	4413      	add	r3, r2
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	6939      	ldr	r1, [r7, #16]
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	440b      	add	r3, r1
 80029d4:	3305      	adds	r3, #5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	b25a      	sxtb	r2, r3
 80029e4:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80029e8:	4013      	ands	r3, r2
 80029ea:	b25b      	sxtb	r3, r3
 80029ec:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
              dev5 &= (P2P_SERVER5_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 80029f0:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <SVCCTL_App_Notification+0x6a8>)
 80029f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f4:	4413      	add	r3, r2
 80029f6:	781a      	ldrb	r2, [r3, #0]
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fc:	440b      	add	r3, r1
 80029fe:	3305      	adds	r3, #5
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	b25a      	sxtb	r2, r3
 8002a0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002a12:	4013      	ands	r3, r2
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
              dev6 &= (P2P_SERVER6_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8002a1a:	4a6c      	ldr	r2, [pc, #432]	; (8002bcc <SVCCTL_App_Notification+0x6ac>)
 8002a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1e:	4413      	add	r3, r2
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	6939      	ldr	r1, [r7, #16]
 8002a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a26:	440b      	add	r3, r1
 8002a28:	3305      	adds	r3, #5
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	b25a      	sxtb	r2, r3
 8002a38:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (int i = 0; i < 6; i++)
 8002a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a46:	3301      	adds	r3, #1
 8002a48:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	f77f af7b 	ble.w	8002948 <SVCCTL_App_Notification+0x428>
            if (dev1 == 1)
 8002a52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d13e      	bne.n	8002ad8 <SVCCTL_App_Notification+0x5b8>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 1\n");
 8002a5a:	485d      	ldr	r0, [pc, #372]	; (8002bd0 <SVCCTL_App_Notification+0x6b0>)
 8002a5c:	f009 fb32 	bl	800c0c4 <puts>
              BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_CONNECTED;
 8002a60:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
              BleApplicationContext.connectionHandleEndDevice1 = connection_handle;
 8002a68:	4b5b      	ldr	r3, [pc, #364]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002a6e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[0] = connection_handle;
 8002a72:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002a78:	84da      	strh	r2, [r3, #38]	; 0x26
              handleNotification.P2P_Evt_Opcode = P2P_SERVER1_CONN_HANDLE_EVT;
 8002a7a:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002a80:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	4b55      	ldr	r3, [pc, #340]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002a86:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002a88:	4854      	ldr	r0, [pc, #336]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002a8a:	f000 fe81 	bl	8003790 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice1);
 8002a8e:	4b51      	ldr	r3, [pc, #324]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002a90:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002a94:	4618      	mov	r0, r3
 8002a96:	f006 fe24 	bl	80096e2 <aci_gatt_disc_all_primary_services>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <SVCCTL_App_Notification+0x596>
                APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n");
 8002aa8:	484d      	ldr	r0, [pc, #308]	; (8002be0 <SVCCTL_App_Notification+0x6c0>)
 8002aaa:	f009 fb0b 	bl	800c0c4 <puts>
                APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 8002aae:	484d      	ldr	r0, [pc, #308]	; (8002be4 <SVCCTL_App_Notification+0x6c4>)
 8002ab0:	f009 fa80 	bl	800bfb4 <iprintf>
 8002ab4:	e002      	b.n	8002abc <SVCCTL_App_Notification+0x59c>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002ab6:	484c      	ldr	r0, [pc, #304]	; (8002be8 <SVCCTL_App_Notification+0x6c8>)
 8002ab8:	f009 fa7c 	bl	800bfb4 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 8002abc:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002abe:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d008      	beq.n	8002ad8 <SVCCTL_App_Notification+0x5b8>
                  && (BleApplicationContext.EndDevice2Found == 0x01))
 8002ac6:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002ac8:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d103      	bne.n	8002ad8 <SVCCTL_App_Notification+0x5b8>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2008      	movs	r0, #8
 8002ad4:	f009 f922 	bl	800bd1c <UTIL_SEQ_SetTask>
          if (dev2 == 1)
 8002ad8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d13b      	bne.n	8002b58 <SVCCTL_App_Notification+0x638>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 2\n");
 8002ae0:	4842      	ldr	r0, [pc, #264]	; (8002bec <SVCCTL_App_Notification+0x6cc>)
 8002ae2:	f009 faef 	bl	800c0c4 <puts>
              BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_CONNECTED;
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002ae8:	2205      	movs	r2, #5
 8002aea:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
              BleApplicationContext.connectionHandleEndDevice2 = connection_handle;
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002af4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[1] = connection_handle;
 8002af8:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002afa:	881a      	ldrh	r2, [r3, #0]
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
              handleNotification.P2P_Evt_Opcode = P2P_SERVER2_CONN_HANDLE_EVT;
 8002b00:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002b02:	2204      	movs	r2, #4
 8002b04:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002b08:	881a      	ldrh	r2, [r3, #0]
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002b0c:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002b0e:	4833      	ldr	r0, [pc, #204]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002b10:	f000 fe3e 	bl	8003790 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice2);
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002b16:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f006 fde1 	bl	80096e2 <aci_gatt_disc_all_primary_services>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <SVCCTL_App_Notification+0x616>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002b2e:	4830      	ldr	r0, [pc, #192]	; (8002bf0 <SVCCTL_App_Notification+0x6d0>)
 8002b30:	f009 fa40 	bl	800bfb4 <iprintf>
 8002b34:	e002      	b.n	8002b3c <SVCCTL_App_Notification+0x61c>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002b36:	482c      	ldr	r0, [pc, #176]	; (8002be8 <SVCCTL_App_Notification+0x6c8>)
 8002b38:	f009 fa3c 	bl	800bfb4 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002b3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	d008      	beq.n	8002b58 <SVCCTL_App_Notification+0x638>
                  && (BleApplicationContext.EndDevice1Found == 0x01))
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002b48:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d103      	bne.n	8002b58 <SVCCTL_App_Notification+0x638>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8002b50:	2100      	movs	r1, #0
 8002b52:	2004      	movs	r0, #4
 8002b54:	f009 f8e2 	bl	800bd1c <UTIL_SEQ_SetTask>
            if (dev3 == 1)
 8002b58:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d15c      	bne.n	8002c1a <SVCCTL_App_Notification+0x6fa>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 3\n");
 8002b60:	4824      	ldr	r0, [pc, #144]	; (8002bf4 <SVCCTL_App_Notification+0x6d4>)
 8002b62:	f009 faaf 	bl	800c0c4 <puts>
              BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_CONNECTED;
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002b68:	2205      	movs	r2, #5
 8002b6a:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
              BleApplicationContext.connectionHandleEndDevice3 = connection_handle;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002b74:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[2] = connection_handle;
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
              handleNotification.P2P_Evt_Opcode = P2P_SERVER3_CONN_HANDLE_EVT;
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002b82:	2205      	movs	r2, #5
 8002b84:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <SVCCTL_App_Notification+0x6b8>)
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002b8c:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002b8e:	4813      	ldr	r0, [pc, #76]	; (8002bdc <SVCCTL_App_Notification+0x6bc>)
 8002b90:	f000 fdfe 	bl	8003790 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice3);
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <SVCCTL_App_Notification+0x6b4>)
 8002b96:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f006 fda1 	bl	80096e2 <aci_gatt_disc_all_primary_services>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d124      	bne.n	8002bf8 <SVCCTL_App_Notification+0x6d8>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002bae:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <SVCCTL_App_Notification+0x6d0>)
 8002bb0:	f009 fa00 	bl	800bfb4 <iprintf>
 8002bb4:	e023      	b.n	8002bfe <SVCCTL_App_Notification+0x6de>
 8002bb6:	bf00      	nop
 8002bb8:	20001644 	.word	0x20001644
 8002bbc:	2000164c 	.word	0x2000164c
 8002bc0:	20001654 	.word	0x20001654
 8002bc4:	2000163c 	.word	0x2000163c
 8002bc8:	2000165c 	.word	0x2000165c
 8002bcc:	20001628 	.word	0x20001628
 8002bd0:	0800d0b4 	.word	0x0800d0b4
 8002bd4:	20000148 	.word	0x20000148
 8002bd8:	20001642 	.word	0x20001642
 8002bdc:	20001630 	.word	0x20001630
 8002be0:	0800d0dc 	.word	0x0800d0dc
 8002be4:	0800d110 	.word	0x0800d110
 8002be8:	0800d140 	.word	0x0800d140
 8002bec:	0800d180 	.word	0x0800d180
 8002bf0:	0800d1a8 	.word	0x0800d1a8
 8002bf4:	0800d1d8 	.word	0x0800d1d8
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002bf8:	48b3      	ldr	r0, [pc, #716]	; (8002ec8 <SVCCTL_App_Notification+0x9a8>)
 8002bfa:	f009 f9db 	bl	800bfb4 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 8002bfe:	4bb3      	ldr	r3, [pc, #716]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c00:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d008      	beq.n	8002c1a <SVCCTL_App_Notification+0x6fa>
                  && (BleApplicationContext.EndDevice4Found == 0x01))
 8002c08:	4bb0      	ldr	r3, [pc, #704]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c0a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d103      	bne.n	8002c1a <SVCCTL_App_Notification+0x6fa>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 8002c12:	2100      	movs	r1, #0
 8002c14:	2020      	movs	r0, #32
 8002c16:	f009 f881 	bl	800bd1c <UTIL_SEQ_SetTask>
            if (dev4 == 1)
 8002c1a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d13b      	bne.n	8002c9a <SVCCTL_App_Notification+0x77a>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 4\n");
 8002c22:	48ab      	ldr	r0, [pc, #684]	; (8002ed0 <SVCCTL_App_Notification+0x9b0>)
 8002c24:	f009 fa4e 	bl	800c0c4 <puts>
              BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_CONNECTED;
 8002c28:	4ba8      	ldr	r3, [pc, #672]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c2a:	2205      	movs	r2, #5
 8002c2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
              BleApplicationContext.connectionHandleEndDevice4 = connection_handle;
 8002c30:	4ba8      	ldr	r3, [pc, #672]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002c32:	881a      	ldrh	r2, [r3, #0]
 8002c34:	4ba5      	ldr	r3, [pc, #660]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c36:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[3] = connection_handle;
 8002c3a:	4ba6      	ldr	r3, [pc, #664]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	4ba3      	ldr	r3, [pc, #652]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c40:	859a      	strh	r2, [r3, #44]	; 0x2c
              handleNotification.P2P_Evt_Opcode = P2P_SERVER4_CONN_HANDLE_EVT;
 8002c42:	4ba5      	ldr	r3, [pc, #660]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002c44:	2206      	movs	r2, #6
 8002c46:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002c48:	4ba2      	ldr	r3, [pc, #648]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	4ba2      	ldr	r3, [pc, #648]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002c4e:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002c50:	48a1      	ldr	r0, [pc, #644]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002c52:	f000 fd9d 	bl	8003790 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice4);
 8002c56:	4b9d      	ldr	r3, [pc, #628]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c58:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f006 fd40 	bl	80096e2 <aci_gatt_disc_all_primary_services>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <SVCCTL_App_Notification+0x758>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002c70:	489a      	ldr	r0, [pc, #616]	; (8002edc <SVCCTL_App_Notification+0x9bc>)
 8002c72:	f009 f99f 	bl	800bfb4 <iprintf>
 8002c76:	e002      	b.n	8002c7e <SVCCTL_App_Notification+0x75e>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002c78:	4893      	ldr	r0, [pc, #588]	; (8002ec8 <SVCCTL_App_Notification+0x9a8>)
 8002c7a:	f009 f99b 	bl	800bfb4 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 8002c7e:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c80:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d008      	beq.n	8002c9a <SVCCTL_App_Notification+0x77a>
                  && (BleApplicationContext.EndDevice3Found == 0x01))
 8002c88:	4b90      	ldr	r3, [pc, #576]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002c8a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d103      	bne.n	8002c9a <SVCCTL_App_Notification+0x77a>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 8002c92:	2100      	movs	r1, #0
 8002c94:	2010      	movs	r0, #16
 8002c96:	f009 f841 	bl	800bd1c <UTIL_SEQ_SetTask>
            if (dev5 == 1)
 8002c9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d13b      	bne.n	8002d1a <SVCCTL_App_Notification+0x7fa>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 5\n");
 8002ca2:	488f      	ldr	r0, [pc, #572]	; (8002ee0 <SVCCTL_App_Notification+0x9c0>)
 8002ca4:	f009 fa0e 	bl	800c0c4 <puts>
              BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_CONNECTED;
 8002ca8:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002caa:	2205      	movs	r2, #5
 8002cac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
              BleApplicationContext.connectionHandleEndDevice5 = connection_handle;
 8002cb0:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002cb6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[4] = connection_handle;
 8002cba:	4b86      	ldr	r3, [pc, #536]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002cbc:	881a      	ldrh	r2, [r3, #0]
 8002cbe:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002cc0:	85da      	strh	r2, [r3, #46]	; 0x2e
              handleNotification.P2P_Evt_Opcode = P2P_SERVER5_CONN_HANDLE_EVT;
 8002cc2:	4b85      	ldr	r3, [pc, #532]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002cc8:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002cce:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002cd0:	4881      	ldr	r0, [pc, #516]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002cd2:	f000 fd5d 	bl	8003790 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice5);
 8002cd6:	4b7d      	ldr	r3, [pc, #500]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002cd8:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f006 fd00 	bl	80096e2 <aci_gatt_disc_all_primary_services>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <SVCCTL_App_Notification+0x7d8>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002cf0:	487a      	ldr	r0, [pc, #488]	; (8002edc <SVCCTL_App_Notification+0x9bc>)
 8002cf2:	f009 f95f 	bl	800bfb4 <iprintf>
 8002cf6:	e002      	b.n	8002cfe <SVCCTL_App_Notification+0x7de>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002cf8:	4873      	ldr	r0, [pc, #460]	; (8002ec8 <SVCCTL_App_Notification+0x9a8>)
 8002cfa:	f009 f95b 	bl	800bfb4 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d00:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d008      	beq.n	8002d1a <SVCCTL_App_Notification+0x7fa>
                  && (BleApplicationContext.EndDevice6Found == 0x01))
 8002d08:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d0a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d103      	bne.n	8002d1a <SVCCTL_App_Notification+0x7fa>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 8002d12:	2100      	movs	r1, #0
 8002d14:	2080      	movs	r0, #128	; 0x80
 8002d16:	f009 f801 	bl	800bd1c <UTIL_SEQ_SetTask>
            if (dev6 == 1)
 8002d1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	f040 81a2 	bne.w	8003068 <SVCCTL_App_Notification+0xb48>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 6\n");
 8002d24:	486f      	ldr	r0, [pc, #444]	; (8002ee4 <SVCCTL_App_Notification+0x9c4>)
 8002d26:	f009 f9cd 	bl	800c0c4 <puts>
              BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_CONNECTED;
 8002d2a:	4b68      	ldr	r3, [pc, #416]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
              BleApplicationContext.connectionHandleEndDevice6 = connection_handle;
 8002d32:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d38:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[5] = connection_handle;
 8002d3c:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002d3e:	881a      	ldrh	r2, [r3, #0]
 8002d40:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d42:	861a      	strh	r2, [r3, #48]	; 0x30
              handleNotification.P2P_Evt_Opcode = P2P_SERVER6_CONN_HANDLE_EVT;
 8002d44:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002d46:	2208      	movs	r2, #8
 8002d48:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002d4a:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002d50:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002d52:	4861      	ldr	r0, [pc, #388]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002d54:	f000 fd1c 	bl	8003790 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice6);
 8002d58:	4b5c      	ldr	r3, [pc, #368]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d5a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f006 fcbf 	bl	80096e2 <aci_gatt_disc_all_primary_services>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <SVCCTL_App_Notification+0x85a>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002d72:	485a      	ldr	r0, [pc, #360]	; (8002edc <SVCCTL_App_Notification+0x9bc>)
 8002d74:	f009 f91e 	bl	800bfb4 <iprintf>
 8002d78:	e002      	b.n	8002d80 <SVCCTL_App_Notification+0x860>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002d7a:	4853      	ldr	r0, [pc, #332]	; (8002ec8 <SVCCTL_App_Notification+0x9a8>)
 8002d7c:	f009 f91a 	bl	800bfb4 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 8002d80:	4b52      	ldr	r3, [pc, #328]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d82:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	f000 816e 	beq.w	8003068 <SVCCTL_App_Notification+0xb48>
                  && (BleApplicationContext.EndDevice5Found == 0x01))
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002d8e:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	f040 8168 	bne.w	8003068 <SVCCTL_App_Notification+0xb48>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2040      	movs	r0, #64	; 0x40
 8002d9c:	f008 ffbe 	bl	800bd1c <UTIL_SEQ_SetTask>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8002da0:	e162      	b.n	8003068 <SVCCTL_App_Notification+0xb48>
            APP_DBG_MSG("-- CONNECTION SUCCESS WITH SMART PHONE\n");
 8002da2:	4851      	ldr	r0, [pc, #324]	; (8002ee8 <SVCCTL_App_Notification+0x9c8>)
 8002da4:	f009 f98e 	bl	800c0c4 <puts>
            BleApplicationContext.connectionHandleCentral = connection_handle;
 8002da8:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002dae:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
            handleNotification.P2P_Evt_Opcode = SMART_PHONE1_CONN_HANDLE_EVT;
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = connection_handle;
 8002db8:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <SVCCTL_App_Notification+0x9b4>)
 8002dba:	881a      	ldrh	r2, [r3, #0]
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002dbe:	805a      	strh	r2, [r3, #2]
            Evt_Notification(&handleNotification);
 8002dc0:	4845      	ldr	r0, [pc, #276]	; (8002ed8 <SVCCTL_App_Notification+0x9b8>)
 8002dc2:	f000 fce5 	bl	8003790 <Evt_Notification>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8002dc6:	e14f      	b.n	8003068 <SVCCTL_App_Notification+0xb48>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	3301      	adds	r3, #1
 8002dcc:	623b      	str	r3, [r7, #32]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	77fb      	strb	r3, [r7, #31]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	7a5b      	ldrb	r3, [r3, #9]
 8002dd8:	77bb      	strb	r3, [r7, #30]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	3309      	adds	r3, #9
 8002dde:	3301      	adds	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
          k = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	64fb      	str	r3, [r7, #76]	; 0x4c
          if (event_type == ADV_IND)
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 813f 	bne.w	800306c <SVCCTL_App_Notification+0xb4c>
            while(k < event_data_size)
 8002dee:	e135      	b.n	800305c <SVCCTL_App_Notification+0xb3c>
              adlength = adv_report_data[k];
 8002df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4413      	add	r3, r2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	75fb      	strb	r3, [r7, #23]
              adtype = adv_report_data[k + 1];
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4413      	add	r3, r2
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	75bb      	strb	r3, [r7, #22]
              switch (adtype)
 8002e06:	7dbb      	ldrb	r3, [r7, #22]
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	f000 8119 	beq.w	8003040 <SVCCTL_App_Notification+0xb20>
 8002e0e:	2b09      	cmp	r3, #9
 8002e10:	dc06      	bgt.n	8002e20 <SVCCTL_App_Notification+0x900>
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f000 8116 	beq.w	8003044 <SVCCTL_App_Notification+0xb24>
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	f000 8115 	beq.w	8003048 <SVCCTL_App_Notification+0xb28>
                  break;
 8002e1e:	e118      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
              switch (adtype)
 8002e20:	2b16      	cmp	r3, #22
 8002e22:	f000 8113 	beq.w	800304c <SVCCTL_App_Notification+0xb2c>
 8002e26:	2bff      	cmp	r3, #255	; 0xff
 8002e28:	d003      	beq.n	8002e32 <SVCCTL_App_Notification+0x912>
 8002e2a:	2b0a      	cmp	r3, #10
 8002e2c:	f000 8110 	beq.w	8003050 <SVCCTL_App_Notification+0xb30>
                  break;
 8002e30:	e10f      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	f240 80ff 	bls.w	8003038 <SVCCTL_App_Notification+0xb18>
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4413      	add	r3, r2
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 80f7 	bne.w	8003038 <SVCCTL_App_Notification+0xb18>
                    APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 8002e4a:	4828      	ldr	r0, [pc, #160]	; (8002eec <SVCCTL_App_Notification+0x9cc>)
 8002e4c:	f009 f93a 	bl	800c0c4 <puts>
                    switch (adv_report_data[k + 3])
 8002e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e52:	3303      	adds	r3, #3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3b83      	subs	r3, #131	; 0x83
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	f200 80ed 	bhi.w	800303c <SVCCTL_App_Notification+0xb1c>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <SVCCTL_App_Notification+0x948>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e89 	.word	0x08002e89
 8002e6c:	08002ef9 	.word	0x08002ef9
 8002e70:	0800303d 	.word	0x0800303d
 8002e74:	0800303d 	.word	0x0800303d
 8002e78:	08002f39 	.word	0x08002f39
 8002e7c:	08002f79 	.word	0x08002f79
 8002e80:	08002fb9 	.word	0x08002fb9
 8002e84:	08002ff9 	.word	0x08002ff9
                        APP_DBG_MSG("-- P2P SERVER 1 DETECTED -- VIA MAN ID\n");
 8002e88:	4819      	ldr	r0, [pc, #100]	; (8002ef0 <SVCCTL_App_Notification+0x9d0>)
 8002e8a:	f009 f91b 	bl	800c0c4 <puts>
                        BleApplicationContext.EndDevice1Found = 0x01;
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <SVCCTL_App_Notification+0x9ac>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
                        P2P_SERVER1_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	78da      	ldrb	r2, [r3, #3]
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <SVCCTL_App_Notification+0x9d4>)
 8002e9c:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER1_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	791a      	ldrb	r2, [r3, #4]
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <SVCCTL_App_Notification+0x9d4>)
 8002ea4:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER1_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	795a      	ldrb	r2, [r3, #5]
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <SVCCTL_App_Notification+0x9d4>)
 8002eac:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER1_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	799a      	ldrb	r2, [r3, #6]
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <SVCCTL_App_Notification+0x9d4>)
 8002eb4:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER1_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	79da      	ldrb	r2, [r3, #7]
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <SVCCTL_App_Notification+0x9d4>)
 8002ebc:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER1_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	7a1a      	ldrb	r2, [r3, #8]
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <SVCCTL_App_Notification+0x9d4>)
 8002ec4:	715a      	strb	r2, [r3, #5]
                        break;
 8002ec6:	e0ba      	b.n	800303e <SVCCTL_App_Notification+0xb1e>
 8002ec8:	0800d140 	.word	0x0800d140
 8002ecc:	20000148 	.word	0x20000148
 8002ed0:	0800d200 	.word	0x0800d200
 8002ed4:	20001642 	.word	0x20001642
 8002ed8:	20001630 	.word	0x20001630
 8002edc:	0800d1a8 	.word	0x0800d1a8
 8002ee0:	0800d228 	.word	0x0800d228
 8002ee4:	0800d250 	.word	0x0800d250
 8002ee8:	0800d278 	.word	0x0800d278
 8002eec:	0800d2a0 	.word	0x0800d2a0
 8002ef0:	0800d2bc 	.word	0x0800d2bc
 8002ef4:	20001644 	.word	0x20001644
                        BleApplicationContext.EndDevice2Found = 0x01;
 8002ef8:	4b60      	ldr	r3, [pc, #384]	; (800307c <SVCCTL_App_Notification+0xb5c>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
                        APP_DBG_MSG("-- P2P SERVER 2 DETECTED -- VIA MAN ID\n");
 8002f00:	485f      	ldr	r0, [pc, #380]	; (8003080 <SVCCTL_App_Notification+0xb60>)
 8002f02:	f009 f8df 	bl	800c0c4 <puts>
                        P2P_SERVER2_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	78da      	ldrb	r2, [r3, #3]
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <SVCCTL_App_Notification+0xb64>)
 8002f0c:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER2_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	791a      	ldrb	r2, [r3, #4]
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <SVCCTL_App_Notification+0xb64>)
 8002f14:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER2_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	795a      	ldrb	r2, [r3, #5]
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <SVCCTL_App_Notification+0xb64>)
 8002f1c:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER2_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	799a      	ldrb	r2, [r3, #6]
 8002f22:	4b58      	ldr	r3, [pc, #352]	; (8003084 <SVCCTL_App_Notification+0xb64>)
 8002f24:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER2_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	79da      	ldrb	r2, [r3, #7]
 8002f2a:	4b56      	ldr	r3, [pc, #344]	; (8003084 <SVCCTL_App_Notification+0xb64>)
 8002f2c:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER2_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	7a1a      	ldrb	r2, [r3, #8]
 8002f32:	4b54      	ldr	r3, [pc, #336]	; (8003084 <SVCCTL_App_Notification+0xb64>)
 8002f34:	715a      	strb	r2, [r3, #5]
                        break;
 8002f36:	e082      	b.n	800303e <SVCCTL_App_Notification+0xb1e>
                        APP_DBG_MSG("-- P2P SERVER 3 DETECTED -- VIA MAN ID\n");
 8002f38:	4853      	ldr	r0, [pc, #332]	; (8003088 <SVCCTL_App_Notification+0xb68>)
 8002f3a:	f009 f8c3 	bl	800c0c4 <puts>
                        BleApplicationContext.EndDevice3Found = 0x01;
 8002f3e:	4b4f      	ldr	r3, [pc, #316]	; (800307c <SVCCTL_App_Notification+0xb5c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
                        P2P_SERVER3_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	78da      	ldrb	r2, [r3, #3]
 8002f4a:	4b50      	ldr	r3, [pc, #320]	; (800308c <SVCCTL_App_Notification+0xb6c>)
 8002f4c:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER3_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	791a      	ldrb	r2, [r3, #4]
 8002f52:	4b4e      	ldr	r3, [pc, #312]	; (800308c <SVCCTL_App_Notification+0xb6c>)
 8002f54:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER3_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	795a      	ldrb	r2, [r3, #5]
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	; (800308c <SVCCTL_App_Notification+0xb6c>)
 8002f5c:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER3_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	799a      	ldrb	r2, [r3, #6]
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <SVCCTL_App_Notification+0xb6c>)
 8002f64:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER3_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	79da      	ldrb	r2, [r3, #7]
 8002f6a:	4b48      	ldr	r3, [pc, #288]	; (800308c <SVCCTL_App_Notification+0xb6c>)
 8002f6c:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER3_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	7a1a      	ldrb	r2, [r3, #8]
 8002f72:	4b46      	ldr	r3, [pc, #280]	; (800308c <SVCCTL_App_Notification+0xb6c>)
 8002f74:	715a      	strb	r2, [r3, #5]
                        break;
 8002f76:	e062      	b.n	800303e <SVCCTL_App_Notification+0xb1e>
                        BleApplicationContext.EndDevice4Found = 0x01;
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <SVCCTL_App_Notification+0xb5c>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
                        APP_DBG_MSG("-- P2P SERVER 4 DETECTED -- VIA MAN ID\n");
 8002f80:	4843      	ldr	r0, [pc, #268]	; (8003090 <SVCCTL_App_Notification+0xb70>)
 8002f82:	f009 f89f 	bl	800c0c4 <puts>
                        P2P_SERVER4_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	78da      	ldrb	r2, [r3, #3]
 8002f8a:	4b42      	ldr	r3, [pc, #264]	; (8003094 <SVCCTL_App_Notification+0xb74>)
 8002f8c:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER4_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	791a      	ldrb	r2, [r3, #4]
 8002f92:	4b40      	ldr	r3, [pc, #256]	; (8003094 <SVCCTL_App_Notification+0xb74>)
 8002f94:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER4_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	795a      	ldrb	r2, [r3, #5]
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <SVCCTL_App_Notification+0xb74>)
 8002f9c:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER4_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	799a      	ldrb	r2, [r3, #6]
 8002fa2:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <SVCCTL_App_Notification+0xb74>)
 8002fa4:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER4_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	79da      	ldrb	r2, [r3, #7]
 8002faa:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <SVCCTL_App_Notification+0xb74>)
 8002fac:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER4_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	7a1a      	ldrb	r2, [r3, #8]
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <SVCCTL_App_Notification+0xb74>)
 8002fb4:	715a      	strb	r2, [r3, #5]
                        break;
 8002fb6:	e042      	b.n	800303e <SVCCTL_App_Notification+0xb1e>
                        APP_DBG_MSG("-- P2P SERVER 5 DETECTED -- VIA MAN ID\n");
 8002fb8:	4837      	ldr	r0, [pc, #220]	; (8003098 <SVCCTL_App_Notification+0xb78>)
 8002fba:	f009 f883 	bl	800c0c4 <puts>
                        BleApplicationContext.EndDevice5Found = 0x01;
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <SVCCTL_App_Notification+0xb5c>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
                        P2P_SERVER5_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	78da      	ldrb	r2, [r3, #3]
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <SVCCTL_App_Notification+0xb7c>)
 8002fcc:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER5_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	791a      	ldrb	r2, [r3, #4]
 8002fd2:	4b32      	ldr	r3, [pc, #200]	; (800309c <SVCCTL_App_Notification+0xb7c>)
 8002fd4:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER5_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	795a      	ldrb	r2, [r3, #5]
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <SVCCTL_App_Notification+0xb7c>)
 8002fdc:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER5_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	799a      	ldrb	r2, [r3, #6]
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <SVCCTL_App_Notification+0xb7c>)
 8002fe4:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER5_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	79da      	ldrb	r2, [r3, #7]
 8002fea:	4b2c      	ldr	r3, [pc, #176]	; (800309c <SVCCTL_App_Notification+0xb7c>)
 8002fec:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER5_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	7a1a      	ldrb	r2, [r3, #8]
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <SVCCTL_App_Notification+0xb7c>)
 8002ff4:	715a      	strb	r2, [r3, #5]
                        break;
 8002ff6:	e022      	b.n	800303e <SVCCTL_App_Notification+0xb1e>
                        BleApplicationContext.EndDevice6Found = 0x01;
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <SVCCTL_App_Notification+0xb5c>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
                        APP_DBG_MSG("-- P2P SERVER 6 DETECTED -- VIA MAN ID\n");
 8003000:	4827      	ldr	r0, [pc, #156]	; (80030a0 <SVCCTL_App_Notification+0xb80>)
 8003002:	f009 f85f 	bl	800c0c4 <puts>
                        P2P_SERVER6_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	78da      	ldrb	r2, [r3, #3]
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <SVCCTL_App_Notification+0xb84>)
 800300c:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER6_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	791a      	ldrb	r2, [r3, #4]
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <SVCCTL_App_Notification+0xb84>)
 8003014:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER6_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	795a      	ldrb	r2, [r3, #5]
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <SVCCTL_App_Notification+0xb84>)
 800301c:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER6_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	799a      	ldrb	r2, [r3, #6]
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <SVCCTL_App_Notification+0xb84>)
 8003024:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER6_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	79da      	ldrb	r2, [r3, #7]
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <SVCCTL_App_Notification+0xb84>)
 800302c:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER6_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	7a1a      	ldrb	r2, [r3, #8]
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <SVCCTL_App_Notification+0xb84>)
 8003034:	715a      	strb	r2, [r3, #5]
                        break;
 8003036:	e002      	b.n	800303e <SVCCTL_App_Notification+0xb1e>
                  }
 8003038:	bf00      	nop
 800303a:	e00a      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
                    break;
 800303c:	bf00      	nop
                  break;
 800303e:	e008      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
                  break;
 8003040:	bf00      	nop
 8003042:	e006      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
                break;
 8003044:	bf00      	nop
 8003046:	e004      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
                  break;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
                  break;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <SVCCTL_App_Notification+0xb32>
                  break;
 8003050:	bf00      	nop
              k += adlength + 1;
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	3301      	adds	r3, #1
 8003056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003058:	4413      	add	r3, r2
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(k < event_data_size)
 800305c:	7fbb      	ldrb	r3, [r7, #30]
 800305e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003060:	429a      	cmp	r2, r3
 8003062:	f6ff aec5 	blt.w	8002df0 <SVCCTL_App_Notification+0x8d0>
          break;
 8003066:	e001      	b.n	800306c <SVCCTL_App_Notification+0xb4c>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8003068:	bf00      	nop
 800306a:	e002      	b.n	8003072 <SVCCTL_App_Notification+0xb52>
          break;
 800306c:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 800306e:	e000      	b.n	8003072 <SVCCTL_App_Notification+0xb52>
      break; /* EVT_DISCONN_COMPLETE */
 8003070:	bf00      	nop
    }
  return (SVCCTL_UserEvtFlowEnable);
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	3754      	adds	r7, #84	; 0x54
 8003078:	46bd      	mov	sp, r7
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800307c:	20000148 	.word	0x20000148
 8003080:	0800d2e4 	.word	0x0800d2e4
 8003084:	2000164c 	.word	0x2000164c
 8003088:	0800d30c 	.word	0x0800d30c
 800308c:	20001654 	.word	0x20001654
 8003090:	0800d334 	.word	0x0800d334
 8003094:	2000163c 	.word	0x2000163c
 8003098:	0800d35c 	.word	0x0800d35c
 800309c:	2000165c 	.word	0x2000165c
 80030a0:	0800d384 	.word	0x0800d384
 80030a4:	20001628 	.word	0x20001628

080030a8 <APP_BLE_Get_Client_Connection_Status>:
 * PUBLIC FUNCTIONS
 *
 *************************************************************/

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_1 */

  /* USER CODE END APP_BLE_Get_Client_Connection_Status_1 */
  APP_BLE_ConnStatus_t return_value;

  if (BleApplicationContext.connectionHandleEndDevice1 == Connection_Handle)
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80030b4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80030b8:	88fa      	ldrh	r2, [r7, #6]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d104      	bne.n	80030c8 <APP_BLE_Get_Client_Connection_Status+0x20>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[0];
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80030c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e038      	b.n	800313a <APP_BLE_Get_Client_Connection_Status+0x92>
  }
#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_Multi */
  else if (BleApplicationContext.connectionHandleEndDevice2 == Connection_Handle)
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80030ca:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d104      	bne.n	80030de <APP_BLE_Get_Client_Connection_Status+0x36>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[1];
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80030d6:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e02d      	b.n	800313a <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice3 == Connection_Handle)
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80030e0:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d104      	bne.n	80030f4 <APP_BLE_Get_Client_Connection_Status+0x4c>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[2];
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80030ec:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	e022      	b.n	800313a <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice4 == Connection_Handle)
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80030f6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d104      	bne.n	800310a <APP_BLE_Get_Client_Connection_Status+0x62>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[3];
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003102:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e017      	b.n	800313a <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice5 == Connection_Handle)
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 800310c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	429a      	cmp	r2, r3
 8003114:	d104      	bne.n	8003120 <APP_BLE_Get_Client_Connection_Status+0x78>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[4];
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003118:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e00c      	b.n	800313a <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice6 == Connection_Handle)
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003122:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	429a      	cmp	r2, r3
 800312a:	d104      	bne.n	8003136 <APP_BLE_Get_Client_Connection_Status+0x8e>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[5];
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <APP_BLE_Get_Client_Connection_Status+0xa0>)
 800312e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e001      	b.n	800313a <APP_BLE_Get_Client_Connection_Status+0x92>
  }
/* USER CODE END APP_BLE_Get_Client_Connection_Status_Multi */
#endif
  else
  {
    return_value = APP_BLE_IDLE;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_2 */

  /* USER CODE END APP_BLE_Get_Client_Connection_Status_2 */
  return (return_value);
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	20000148 	.word	0x20000148

0800314c <APP_BLE_Key_Button1_Action>:

/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 8003150:	2100      	movs	r1, #0
 8003152:	2002      	movs	r0, #2
 8003154:	f008 fde2 	bl	800bd1c <UTIL_SEQ_SetTask>
}
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}

0800315c <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <Ble_Tl_Init+0x20>)
 8003180:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <Ble_Tl_Init+0x24>)
 8003184:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003186:	463b      	mov	r3, r7
 8003188:	4619      	mov	r1, r3
 800318a:	4805      	ldr	r0, [pc, #20]	; (80031a0 <Ble_Tl_Init+0x28>)
 800318c:	f006 ffe8 	bl	800a160 <hci_init>

  return;
 8003190:	bf00      	nop
}
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20030028 	.word	0x20030028
 800319c:	080039f7 	.word	0x080039f7
 80031a0:	080039bf 	.word	0x080039bf

080031a4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80031a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a6:	b091      	sub	sp, #68	; 0x44
 80031a8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_UNKNOWN_APPEARANCE };
 80031aa:	2300      	movs	r3, #0
 80031ac:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80031ae:	f006 fd83 	bl	8009cb8 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80031b2:	f000 fb9d 	bl	80038f0 <BleGetBdAddress>
 80031b6:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	2106      	movs	r1, #6
 80031bc:	2000      	movs	r0, #0
 80031be:	f006 fcbb 	bl	8009b38 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	795a      	ldrb	r2, [r3, #5]
 80031c6:	4b62      	ldr	r3, [pc, #392]	; (8003350 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80031c8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	791a      	ldrb	r2, [r3, #4]
 80031ce:	4b60      	ldr	r3, [pc, #384]	; (8003350 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80031d0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	78da      	ldrb	r2, [r3, #3]
 80031d6:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80031d8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	789a      	ldrb	r2, [r3, #2]
 80031de:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80031e0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	785a      	ldrb	r2, [r3, #1]
 80031e6:	4b5a      	ldr	r3, [pc, #360]	; (8003350 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80031e8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	4b58      	ldr	r3, [pc, #352]	; (8003350 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80031f0:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 80031f2:	4a58      	ldr	r2, [pc, #352]	; (8003354 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80031f4:	2110      	movs	r1, #16
 80031f6:	2018      	movs	r0, #24
 80031f8:	f006 fc9e 	bl	8009b38 <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 80031fc:	4a56      	ldr	r2, [pc, #344]	; (8003358 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 80031fe:	2110      	movs	r1, #16
 8003200:	2008      	movs	r0, #8
 8003202:	f006 fc99 	bl	8009b38 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8003206:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800320a:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800320c:	f7ff f8c6 	bl	800239c <LL_FLASH_GetUDN>
 8003210:	4603      	mov	r3, r0
 8003212:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8003214:	f107 0308 	add.w	r3, r7, #8
 8003218:	461a      	mov	r2, r3
 800321a:	2106      	movs	r1, #6
 800321c:	202e      	movs	r0, #46	; 0x2e
 800321e:	f006 fc8b 	bl	8009b38 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8003222:	4a4c      	ldr	r2, [pc, #304]	; (8003354 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8003224:	2110      	movs	r1, #16
 8003226:	2018      	movs	r0, #24
 8003228:	f006 fc86 	bl	8009b38 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800322c:	4a4a      	ldr	r2, [pc, #296]	; (8003358 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 800322e:	2110      	movs	r1, #16
 8003230:	2008      	movs	r0, #8
 8003232:	f006 fc81 	bl	8009b38 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003236:	2118      	movs	r1, #24
 8003238:	2001      	movs	r0, #1
 800323a:	f006 fce6 	bl	8009c0a <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800323e:	f006 f80b 	bl	8009258 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003246:	7ffb      	ldrb	r3, [r7, #31]
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	77fb      	strb	r3, [r7, #31]
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	77fb      	strb	r3, [r7, #31]
#endif

  if (role > 0)
 8003256:	7ffb      	ldrb	r3, [r7, #31]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01e      	beq.n	800329a <Ble_Hci_Gap_Gatt_Init+0xf6>
  {
    const char *name = "MissLP";
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <Ble_Hci_Gap_Gatt_Init+0x1b8>)
 800325e:	61bb      	str	r3, [r7, #24]

    aci_gap_init(role, 0,
 8003260:	f107 0216 	add.w	r2, r7, #22
 8003264:	7ff8      	ldrb	r0, [r7, #31]
 8003266:	f107 0312 	add.w	r3, r7, #18
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	2207      	movs	r2, #7
 8003276:	2100      	movs	r1, #0
 8003278:	f005 fda6 	bl	8008dc8 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800327c:	8afc      	ldrh	r4, [r7, #22]
 800327e:	8abd      	ldrh	r5, [r7, #20]
 8003280:	69b8      	ldr	r0, [r7, #24]
 8003282:	f7fc ff7d 	bl	8000180 <strlen>
 8003286:	4603      	mov	r3, r0
 8003288:	b2da      	uxtb	r2, r3
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	2200      	movs	r2, #0
 8003292:	4629      	mov	r1, r5
 8003294:	4620      	mov	r0, r4
 8003296:	f006 f99d 	bl	80095d4 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800329a:	8af8      	ldrh	r0, [r7, #22]
 800329c:	8a79      	ldrh	r1, [r7, #18]
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2302      	movs	r3, #2
 80032a4:	2200      	movs	r2, #0
 80032a6:	f006 f995 	bl	80095d4 <aci_gatt_update_char_value>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80032aa:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032ac:	2203      	movs	r2, #3
 80032ae:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f005 fc95 	bl	8008be4 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032bc:	2201      	movs	r2, #1
 80032be:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032c8:	2208      	movs	r2, #8
 80032ca:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032ce:	2210      	movs	r2, #16
 80032d0:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 80032d2:	4b23      	ldr	r3, [pc, #140]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032da:	4a22      	ldr	r2, [pc, #136]	; (8003364 <Ble_Hci_Gap_Gatt_Init+0x1c0>)
 80032dc:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032ea:	e00b      	b.n	8003304 <Ble_Hci_Gap_Gatt_Init+0x160>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 80032ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 80032f2:	4413      	add	r3, r2
 80032f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80032f8:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 80032fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032fe:	3301      	adds	r3, #1
 8003300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d9ef      	bls.n	80032ec <Ble_Hci_Gap_Gatt_Init+0x148>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 800330e:	789d      	ldrb	r5, [r3, #2]
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 8003312:	785e      	ldrb	r6, [r3, #1]
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 8003316:	7d5b      	ldrb	r3, [r3, #21]
 8003318:	4a11      	ldr	r2, [pc, #68]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 800331a:	7d92      	ldrb	r2, [r2, #22]
 800331c:	4910      	ldr	r1, [pc, #64]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 800331e:	7d09      	ldrb	r1, [r1, #20]
 8003320:	480f      	ldr	r0, [pc, #60]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 8003322:	6980      	ldr	r0, [r0, #24]
 8003324:	2400      	movs	r4, #0
 8003326:	9404      	str	r4, [sp, #16]
 8003328:	9003      	str	r0, [sp, #12]
 800332a:	9102      	str	r1, [sp, #8]
 800332c:	9201      	str	r2, [sp, #4]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	2201      	movs	r2, #1
 8003334:	4631      	mov	r1, r6
 8003336:	4628      	mov	r0, r5
 8003338:	f005 fc9e 	bl	8008c78 <aci_gap_set_authentication_requirement>
  );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <Ble_Hci_Gap_Gatt_Init+0x1bc>)
 800333e:	789b      	ldrb	r3, [r3, #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <Ble_Hci_Gap_Gatt_Init+0x1a4>
   {
     aci_gap_configure_whitelist();
 8003344:	f005 fe27 	bl	8008f96 <aci_gap_configure_whitelist>
   }

}
 8003348:	bf00      	nop
 800334a:	372c      	adds	r7, #44	; 0x2c
 800334c:	46bd      	mov	sp, r7
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003350:	2000000c 	.word	0x2000000c
 8003354:	0800db58 	.word	0x0800db58
 8003358:	0800db68 	.word	0x0800db68
 800335c:	0800d3ac 	.word	0x0800d3ac
 8003360:	20000148 	.word	0x20000148
 8003364:	0001b207 	.word	0x0001b207

08003368 <Scan_Request>:
 * @brief  Scan Request
 * @param  None
 * @retval None
 */
static void Scan_Request( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;

  if (BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <Scan_Request+0x80>)
 8003370:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003374:	2b05      	cmp	r3, #5
 8003376:	d118      	bne.n	80033aa <Scan_Request+0x42>

#if (CFG_P2P_DEMO_MULTI != 0)
      || BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED || BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <Scan_Request+0x80>)
 800337a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800337e:	2b05      	cmp	r3, #5
 8003380:	d113      	bne.n	80033aa <Scan_Request+0x42>
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <Scan_Request+0x80>)
 8003384:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8003388:	2b05      	cmp	r3, #5
 800338a:	d10e      	bne.n	80033aa <Scan_Request+0x42>
      || BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED|| BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED || BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <Scan_Request+0x80>)
 800338e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003392:	2b05      	cmp	r3, #5
 8003394:	d109      	bne.n	80033aa <Scan_Request+0x42>
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <Scan_Request+0x80>)
 8003398:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800339c:	2b05      	cmp	r3, #5
 800339e:	d104      	bne.n	80033aa <Scan_Request+0x42>
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <Scan_Request+0x80>)
 80033a2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d01a      	beq.n	80033e0 <Scan_Request+0x78>
#endif
  )
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED */
    BSP_LED_On(LED_BLUE);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f001 fb24 	bl	80049f8 <BSP_LED_On>
    /* USER CODE END APP_BLE_CONNECTED */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 80033b0:	2301      	movs	r3, #1
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80033b8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80033bc:	f005 fe0f 	bl	8008fde <aci_gap_start_general_discovery_proc>
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <Scan_Request+0x6a>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 80033ca:	4808      	ldr	r0, [pc, #32]	; (80033ec <Scan_Request+0x84>)
 80033cc:	f008 fdf2 	bl	800bfb4 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 80033d0:	e006      	b.n	80033e0 <Scan_Request+0x78>
      BSP_LED_On(LED_RED);
 80033d2:	2002      	movs	r0, #2
 80033d4:	f001 fb10 	bl	80049f8 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 80033d8:	4805      	ldr	r0, [pc, #20]	; (80033f0 <Scan_Request+0x88>)
 80033da:	f008 fdeb 	bl	800bfb4 <iprintf>
  return;
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
}
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000148 	.word	0x20000148
 80033ec:	0800d3b4 	.word	0x0800d3b4
 80033f0:	0800d3e4 	.word	0x0800d3e4

080033f4 <Adv_Request>:
 * @brief  Advertising Enable
 * @param  None
 * @retval None
 */
static void Adv_Request( void )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  if (BleApplicationContext.SmartPhone_Connection_Status != APP_BLE_CONNECTED)
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <Adv_Request+0x84>)
 80033fc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8003400:	2b05      	cmp	r3, #5
 8003402:	d034      	beq.n	800346e <Adv_Request+0x7a>
  {
    tBleStatus result = 0x00;
 8003404:	2300      	movs	r3, #0
 8003406:	71fb      	strb	r3, [r7, #7]
    /*Start Advertising*/
    result = aci_gap_set_discoverable(ADV_IND,
 8003408:	2300      	movs	r3, #0
 800340a:	9306      	str	r3, [sp, #24]
 800340c:	2300      	movs	r3, #0
 800340e:	9305      	str	r3, [sp, #20]
 8003410:	2300      	movs	r3, #0
 8003412:	9304      	str	r3, [sp, #16]
 8003414:	2300      	movs	r3, #0
 8003416:	9303      	str	r3, [sp, #12]
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <Adv_Request+0x88>)
 800341a:	9302      	str	r3, [sp, #8]
 800341c:	2307      	movs	r3, #7
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800342a:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800342e:	2000      	movs	r0, #0
 8003430:	f005 fafa 	bl	8008a28 <aci_gap_set_discoverable>
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
                                      0,
                                      NULL,
                                      0,
                                      0);
    /* Send Advertising data */
    result = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8003438:	4911      	ldr	r1, [pc, #68]	; (8003480 <Adv_Request+0x8c>)
 800343a:	200e      	movs	r0, #14
 800343c:	f005 fd4f 	bl	8008ede <aci_gap_update_adv_data>
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.SmartPhone_Connection_Status = APP_BLE_FAST_ADV;
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <Adv_Request+0x84>)
 8003446:	2201      	movs	r2, #1
 8003448:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    if (result == BLE_STATUS_SUCCESS)
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <Adv_Request+0x6c>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
      APP_DBG_MSG("  \r\n\r");
 8003452:	480c      	ldr	r0, [pc, #48]	; (8003484 <Adv_Request+0x90>)
 8003454:	f008 fdae 	bl	800bfb4 <iprintf>
      APP_DBG_MSG("** START ADVERTISING **  \r\n\r");
 8003458:	480b      	ldr	r0, [pc, #44]	; (8003488 <Adv_Request+0x94>)
 800345a:	f008 fdab 	bl	800bfb4 <iprintf>
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800345e:	e006      	b.n	800346e <Adv_Request+0x7a>
      BSP_LED_On(LED_RED);
 8003460:	2002      	movs	r0, #2
 8003462:	f001 fac9 	bl	80049f8 <BSP_LED_On>
      APP_DBG_MSG("BLE_APP_Adv_Request(), Failed \r\n\r");
 8003466:	4809      	ldr	r0, [pc, #36]	; (800348c <Adv_Request+0x98>)
 8003468:	f008 fda4 	bl	800bfb4 <iprintf>
  return;
 800346c:	bf00      	nop
 800346e:	bf00      	nop
}
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000148 	.word	0x20000148
 800347c:	20000004 	.word	0x20000004
 8003480:	2000000c 	.word	0x2000000c
 8003484:	0800d414 	.word	0x0800d414
 8003488:	0800d41c 	.word	0x0800d41c
 800348c:	0800d43c 	.word	0x0800d43c

08003490 <ConnReq1>:
 * @brief  Connection Establishement on SERVER 1
 * @param  None
 * @retval None
 */
static void ConnReq1( void )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 1 **  \r\n\r");
 8003496:	481b      	ldr	r0, [pc, #108]	; (8003504 <ConnReq1+0x74>)
 8003498:	f008 fd8c 	bl	800bfb4 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <ConnReq1+0x78>)
 800349e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d029      	beq.n	80034fa <ConnReq1+0x6a>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_SUCCESS_END_DEVICE_1 */

    /* USER CODE END APP_BLE_CONNECTED_SUCCESS_END_DEVICE_1 */
        result = aci_gap_create_connection(
 80034a6:	2310      	movs	r3, #16
 80034a8:	9306      	str	r3, [sp, #24]
 80034aa:	2310      	movs	r3, #16
 80034ac:	9305      	str	r3, [sp, #20]
 80034ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9303      	str	r3, [sp, #12]
 80034b8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	23a0      	movs	r3, #160	; 0xa0
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	2300      	movs	r3, #0
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <ConnReq1+0x7c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 7148 	mov.w	r1, #800	; 0x320
 80034ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80034d2:	f005 fdfc 	bl	80090ce <aci_gap_create_connection>
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <ConnReq1+0x5a>
    {
    /* USER CODE BEGIN BLE_STATUS_END_DEVICE_1_SUCCESS */

    /* USER CODE END BLE_STATUS_END_DEVICE_1_SUCCESS */
    BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_CONNECTING;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <ConnReq1+0x78>)
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    /* USER CODE END BLE_STATUS_END_DEVICE_1_FAILED */
      BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
    }
  }

  return;
 80034e8:	e007      	b.n	80034fa <ConnReq1+0x6a>
      BSP_LED_On(LED_RED);
 80034ea:	2002      	movs	r0, #2
 80034ec:	f001 fa84 	bl	80049f8 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <ConnReq1+0x78>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
  return;
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
}
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	0800d460 	.word	0x0800d460
 8003508:	20000148 	.word	0x20000148
 800350c:	20001644 	.word	0x20001644

08003510 <ConnReq2>:
 * @brief  Connection Establishement on SERVER 2
 * @param  None
 * @retval None
 */
static void ConnReq2( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 2 **  \r\n\r");
 8003516:	481b      	ldr	r0, [pc, #108]	; (8003584 <ConnReq2+0x74>)
 8003518:	f008 fd4c 	bl	800bfb4 <iprintf>

  if (BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <ConnReq2+0x78>)
 800351e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8003522:	2b05      	cmp	r3, #5
 8003524:	d029      	beq.n	800357a <ConnReq2+0x6a>
  {
    result = aci_gap_create_connection(
 8003526:	2310      	movs	r3, #16
 8003528:	9306      	str	r3, [sp, #24]
 800352a:	2310      	movs	r3, #16
 800352c:	9305      	str	r3, [sp, #20]
 800352e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003532:	9304      	str	r3, [sp, #16]
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	f44f 7348 	mov.w	r3, #800	; 0x320
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	23a0      	movs	r3, #160	; 0xa0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <ConnReq2+0x7c>)
 8003548:	2200      	movs	r2, #0
 800354a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800354e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003552:	f005 fdbc 	bl	80090ce <aci_gap_create_connection>
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <ConnReq2+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_CONNECTING;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <ConnReq2+0x78>)
 8003562:	2204      	movs	r2, #4
 8003564:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;

    }
  }

  return;
 8003568:	e007      	b.n	800357a <ConnReq2+0x6a>
      BSP_LED_On(LED_RED);
 800356a:	2002      	movs	r0, #2
 800356c:	f001 fa44 	bl	80049f8 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <ConnReq2+0x78>)
 8003572:	2200      	movs	r2, #0
 8003574:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
  return;
 8003578:	bf00      	nop
 800357a:	bf00      	nop
}
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	0800d490 	.word	0x0800d490
 8003588:	20000148 	.word	0x20000148
 800358c:	2000164c 	.word	0x2000164c

08003590 <ConnReq3>:
 * @brief  Connection Establishement on SERVER 3
 * @param  None
 * @retval None
 */
static void ConnReq3( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 3 **  \r\n\r");
 8003596:	481b      	ldr	r0, [pc, #108]	; (8003604 <ConnReq3+0x74>)
 8003598:	f008 fd0c 	bl	800bfb4 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <ConnReq3+0x78>)
 800359e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d029      	beq.n	80035fa <ConnReq3+0x6a>
  {
    result = aci_gap_create_connection(
 80035a6:	2310      	movs	r3, #16
 80035a8:	9306      	str	r3, [sp, #24]
 80035aa:	2310      	movs	r3, #16
 80035ac:	9305      	str	r3, [sp, #20]
 80035ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9303      	str	r3, [sp, #12]
 80035b8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80035bc:	9302      	str	r3, [sp, #8]
 80035be:	23a0      	movs	r3, #160	; 0xa0
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <ConnReq3+0x7c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 7148 	mov.w	r1, #800	; 0x320
 80035ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80035d2:	f005 fd7c 	bl	80090ce <aci_gap_create_connection>
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <ConnReq3+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_CONNECTING;
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <ConnReq3+0x78>)
 80035e2:	2204      	movs	r2, #4
 80035e4:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;

    }
  }

  return;
 80035e8:	e007      	b.n	80035fa <ConnReq3+0x6a>
      BSP_LED_On(LED_RED);
 80035ea:	2002      	movs	r0, #2
 80035ec:	f001 fa04 	bl	80049f8 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <ConnReq3+0x78>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
  return;
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
}
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	0800d4c0 	.word	0x0800d4c0
 8003608:	20000148 	.word	0x20000148
 800360c:	20001654 	.word	0x20001654

08003610 <ConnReq4>:
 * @brief  Connection Establishement on SERVER 4
 * @param  None
 * @retval None
 */
static void ConnReq4( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 4 **  \r\n\r");
 8003616:	481b      	ldr	r0, [pc, #108]	; (8003684 <ConnReq4+0x74>)
 8003618:	f008 fccc 	bl	800bfb4 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <ConnReq4+0x78>)
 800361e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003622:	2b05      	cmp	r3, #5
 8003624:	d029      	beq.n	800367a <ConnReq4+0x6a>
  {
    result = aci_gap_create_connection(
 8003626:	2310      	movs	r3, #16
 8003628:	9306      	str	r3, [sp, #24]
 800362a:	2310      	movs	r3, #16
 800362c:	9305      	str	r3, [sp, #20]
 800362e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003632:	9304      	str	r3, [sp, #16]
 8003634:	2300      	movs	r3, #0
 8003636:	9303      	str	r3, [sp, #12]
 8003638:	f44f 7348 	mov.w	r3, #800	; 0x320
 800363c:	9302      	str	r3, [sp, #8]
 800363e:	23a0      	movs	r3, #160	; 0xa0
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2300      	movs	r3, #0
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <ConnReq4+0x7c>)
 8003648:	2200      	movs	r2, #0
 800364a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800364e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003652:	f005 fd3c 	bl	80090ce <aci_gap_create_connection>
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <ConnReq4+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_CONNECTING;
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <ConnReq4+0x78>)
 8003662:	2204      	movs	r2, #4
 8003664:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;

    }
  }

  return;
 8003668:	e007      	b.n	800367a <ConnReq4+0x6a>
      BSP_LED_On(LED_RED);
 800366a:	2002      	movs	r0, #2
 800366c:	f001 f9c4 	bl	80049f8 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <ConnReq4+0x78>)
 8003672:	2200      	movs	r2, #0
 8003674:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  return;
 8003678:	bf00      	nop
 800367a:	bf00      	nop
}
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	0800d4f0 	.word	0x0800d4f0
 8003688:	20000148 	.word	0x20000148
 800368c:	2000163c 	.word	0x2000163c

08003690 <ConnReq5>:
 * @brief  Connection Establishement on SERVER 5
 * @param  None
 * @retval None
 */
static void ConnReq5( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 5 **  \r\n\r");
 8003696:	481b      	ldr	r0, [pc, #108]	; (8003704 <ConnReq5+0x74>)
 8003698:	f008 fc8c 	bl	800bfb4 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <ConnReq5+0x78>)
 800369e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d029      	beq.n	80036fa <ConnReq5+0x6a>
  {
    result = aci_gap_create_connection(
 80036a6:	2310      	movs	r3, #16
 80036a8:	9306      	str	r3, [sp, #24]
 80036aa:	2310      	movs	r3, #16
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80036b2:	9304      	str	r3, [sp, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	9303      	str	r3, [sp, #12]
 80036b8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	23a0      	movs	r3, #160	; 0xa0
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <ConnReq5+0x7c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 7148 	mov.w	r1, #800	; 0x320
 80036ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80036d2:	f005 fcfc 	bl	80090ce <aci_gap_create_connection>
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <ConnReq5+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_CONNECTING;
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <ConnReq5+0x78>)
 80036e2:	2204      	movs	r2, #4
 80036e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;

    }
  }

  return;
 80036e8:	e007      	b.n	80036fa <ConnReq5+0x6a>
      BSP_LED_On(LED_RED);
 80036ea:	2002      	movs	r0, #2
 80036ec:	f001 f984 	bl	80049f8 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <ConnReq5+0x78>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  return;
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
}
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	0800d520 	.word	0x0800d520
 8003708:	20000148 	.word	0x20000148
 800370c:	2000165c 	.word	0x2000165c

08003710 <ConnReq6>:
 * @brief  Connection Establishement on SERVER 3
 * @param  None
 * @retval None
 */
static void ConnReq6( void )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 6 **  \r\n\r");
 8003716:	481b      	ldr	r0, [pc, #108]	; (8003784 <ConnReq6+0x74>)
 8003718:	f008 fc4c 	bl	800bfb4 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <ConnReq6+0x78>)
 800371e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8003722:	2b05      	cmp	r3, #5
 8003724:	d029      	beq.n	800377a <ConnReq6+0x6a>
  {
    result = aci_gap_create_connection(
 8003726:	2310      	movs	r3, #16
 8003728:	9306      	str	r3, [sp, #24]
 800372a:	2310      	movs	r3, #16
 800372c:	9305      	str	r3, [sp, #20]
 800372e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003732:	9304      	str	r3, [sp, #16]
 8003734:	2300      	movs	r3, #0
 8003736:	9303      	str	r3, [sp, #12]
 8003738:	f44f 7348 	mov.w	r3, #800	; 0x320
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	23a0      	movs	r3, #160	; 0xa0
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <ConnReq6+0x7c>)
 8003748:	2200      	movs	r2, #0
 800374a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800374e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003752:	f005 fcbc 	bl	80090ce <aci_gap_create_connection>
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <ConnReq6+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_CONNECTING;
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <ConnReq6+0x78>)
 8003762:	2204      	movs	r2, #4
 8003764:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;

    }
  }

  return;
 8003768:	e007      	b.n	800377a <ConnReq6+0x6a>
      BSP_LED_On(LED_RED);
 800376a:	2002      	movs	r0, #2
 800376c:	f001 f944 	bl	80049f8 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <ConnReq6+0x78>)
 8003772:	2200      	movs	r2, #0
 8003774:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
  return;
 8003778:	bf00      	nop
 800377a:	bf00      	nop
}
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	0800d550 	.word	0x0800d550
 8003788:	20000148 	.word	0x20000148
 800378c:	20001628 	.word	0x20001628

08003790 <Evt_Notification>:
 * @brief  P2P GAP Notification
 * @param  GAP Notification (Opcode & Data)
 * @retval None
 */
void Evt_Notification( P2P_ConnHandle_Not_evt_t *pNotification )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Evt_Notification_1 */

/* USER CODE END Evt_Notification_1 */
  P2PR_APP_Device_Status_t device_status = { 0 };
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	809a      	strh	r2, [r3, #4]

  switch (pNotification->P2P_Evt_Opcode)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b0d      	cmp	r3, #13
 80037a8:	f200 809d 	bhi.w	80038e6 <Evt_Notification+0x156>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <Evt_Notification+0x24>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037ed 	.word	0x080037ed
 80037b8:	080037fd 	.word	0x080037fd
 80037bc:	080038e7 	.word	0x080038e7
 80037c0:	08003815 	.word	0x08003815
 80037c4:	0800381f 	.word	0x0800381f
 80037c8:	0800382f 	.word	0x0800382f
 80037cc:	0800383f 	.word	0x0800383f
 80037d0:	0800384f 	.word	0x0800384f
 80037d4:	0800385f 	.word	0x0800385f
 80037d8:	0800386f 	.word	0x0800386f
 80037dc:	08003887 	.word	0x08003887
 80037e0:	0800389f 	.word	0x0800389f
 80037e4:	080038b7 	.word	0x080038b7
 80037e8:	080038cf 	.word	0x080038cf
    case SMART_PHONE1_CONN_HANDLE_EVT:

      break;

    case P2P_SERVER1_CONN_HANDLE_EVT:
      device_status.Device1_Status = 0x81; /* Connected */
 80037ec:	2381      	movs	r3, #129	; 0x81
 80037ee:	723b      	strb	r3, [r7, #8]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80037f0:	f107 0308 	add.w	r3, r7, #8
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f9c5 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 80037fa:	e075      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER1_DISCON_HANDLE_EVT:
      device_status.Device1_Status = 0x80; /* Not connected */
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	723b      	strb	r3, [r7, #8]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003800:	f107 0308 	add.w	r3, r7, #8
 8003804:	4618      	mov	r0, r3
 8003806:	f000 f9bd 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      /* restart Create Connection */
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800380a:	2100      	movs	r1, #0
 800380c:	2004      	movs	r0, #4
 800380e:	f008 fa85 	bl	800bd1c <UTIL_SEQ_SetTask>
      break;
 8003812:	e069      	b.n	80038e8 <Evt_Notification+0x158>

    case SMART_PHONE1_DISCON_HANDLE_EVT:
      UTIL_SEQ_SetTask(1 << CFG_TASK_START_ADV_ID, CFG_SCH_PRIO_0);
 8003814:	2100      	movs	r1, #0
 8003816:	2001      	movs	r0, #1
 8003818:	f008 fa80 	bl	800bd1c <UTIL_SEQ_SetTask>
      break;
 800381c:	e064      	b.n	80038e8 <Evt_Notification+0x158>

#if (CFG_P2P_DEMO_MULTI != 0)
    /* USER CODE BEGIN P2P_SERVER_CONN_HANDLE_EVT_Multi_Notification */
    case P2P_SERVER2_CONN_HANDLE_EVT:
      device_status.Device2_Status = 0x81; /* Connected */
 800381e:	2381      	movs	r3, #129	; 0x81
 8003820:	727b      	strb	r3, [r7, #9]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f9ac 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800382c:	e05c      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER3_CONN_HANDLE_EVT:
      device_status.Device3_Status = 0x81; /* connected */
 800382e:	2381      	movs	r3, #129	; 0x81
 8003830:	72bb      	strb	r3, [r7, #10]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f9a4 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800383c:	e054      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER4_CONN_HANDLE_EVT:
      device_status.Device4_Status = 0x81; /* Connected */
 800383e:	2381      	movs	r3, #129	; 0x81
 8003840:	72fb      	strb	r3, [r7, #11]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003842:	f107 0308 	add.w	r3, r7, #8
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f99c 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800384c:	e04c      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER5_CONN_HANDLE_EVT:
      device_status.Device5_Status = 0x81; /* Connected */
 800384e:	2381      	movs	r3, #129	; 0x81
 8003850:	733b      	strb	r3, [r7, #12]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f994 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800385c:	e044      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER6_CONN_HANDLE_EVT:
      device_status.Device6_Status = 0x81; /* Connected */
 800385e:	2381      	movs	r3, #129	; 0x81
 8003860:	737b      	strb	r3, [r7, #13]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f98c 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800386c:	e03c      	b.n	80038e8 <Evt_Notification+0x158>
    /* USER CODE END P2P_SERVER_CONN_HANDLE_EVT_Multi_Notification */
    /* USER CODE BEGIN P2P_SERVER_DISCON_HANDLE_EVT_Multi_Notification */
    case P2P_SERVER2_DISCON_HANDLE_EVT:
      device_status.Device2_Status = 0x80; /* Not connected */
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	727b      	strb	r3, [r7, #9]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f984 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 800387c:	2100      	movs	r1, #0
 800387e:	2008      	movs	r0, #8
 8003880:	f008 fa4c 	bl	800bd1c <UTIL_SEQ_SetTask>
      break;
 8003884:	e030      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER3_DISCON_HANDLE_EVT:
      device_status.Device3_Status = 0x80; /* Not connected */
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	72bb      	strb	r3, [r7, #10]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f978 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      /* Restart Create Connection */
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 8003894:	2100      	movs	r1, #0
 8003896:	2010      	movs	r0, #16
 8003898:	f008 fa40 	bl	800bd1c <UTIL_SEQ_SetTask>
      break;
 800389c:	e024      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER4_DISCON_HANDLE_EVT:
      device_status.Device4_Status = 0x80; /* Not connected */
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	72fb      	strb	r3, [r7, #11]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f96c 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 80038ac:	2100      	movs	r1, #0
 80038ae:	2020      	movs	r0, #32
 80038b0:	f008 fa34 	bl	800bd1c <UTIL_SEQ_SetTask>
      break;
 80038b4:	e018      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER5_DISCON_HANDLE_EVT:
      device_status.Device5_Status = 0x80; /* Not connected */
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	733b      	strb	r3, [r7, #12]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f960 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      /* Restart Create Connection */
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 80038c4:	2100      	movs	r1, #0
 80038c6:	2040      	movs	r0, #64	; 0x40
 80038c8:	f008 fa28 	bl	800bd1c <UTIL_SEQ_SetTask>
      break;
 80038cc:	e00c      	b.n	80038e8 <Evt_Notification+0x158>

    case P2P_SERVER6_DISCON_HANDLE_EVT:
      device_status.Device6_Status = 0x80; /* Not connected */
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	737b      	strb	r3, [r7, #13]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f954 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 80038dc:	2100      	movs	r1, #0
 80038de:	2080      	movs	r0, #128	; 0x80
 80038e0:	f008 fa1c 	bl	800bd1c <UTIL_SEQ_SetTask>
      break;
 80038e4:	e000      	b.n	80038e8 <Evt_Notification+0x158>

    default:
    /* USER CODE BEGIN P2P_Evt_Opcode_Default */

    /* USER CODE END P2P_Evt_Opcode_Default */
    break;
 80038e6:	bf00      	nop
  }
/* USER CODE BEGIN Evt_Notification_2 */

/* USER CODE END Evt_Notification_2 */
  return;
 80038e8:	bf00      	nop
}
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80038f6:	f7fe fd51 	bl	800239c <LL_FLASH_GetUDN>
 80038fa:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d023      	beq.n	800394c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003904:	f7fe fd62 	bl	80023cc <LL_FLASH_GetSTCompanyID>
 8003908:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800390a:	f7fe fd53 	bl	80023b4 <LL_FLASH_GetDeviceID>
 800390e:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <BleGetBdAddress+0x80>)
 8003916:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <BleGetBdAddress+0x80>)
 8003920:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <BleGetBdAddress+0x80>)
 800392a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <BleGetBdAddress+0x80>)
 8003932:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <BleGetBdAddress+0x80>)
 800393a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	b2da      	uxtb	r2, r3
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <BleGetBdAddress+0x80>)
 8003944:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <BleGetBdAddress+0x80>)
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e00b      	b.n	8003964 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800394c:	2000      	movs	r0, #0
 800394e:	f006 fdbd 	bl	800a4cc <OTP_Read>
 8003952:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e001      	b.n	8003964 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <BleGetBdAddress+0x84>)
 8003962:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8003964:	697b      	ldr	r3, [r7, #20]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200002dc 	.word	0x200002dc
 8003974:	0800db50 	.word	0x0800db50

08003978 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003980:	2100      	movs	r1, #0
 8003982:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003986:	f008 f9c9 	bl	800bd1c <UTIL_SEQ_SetTask>
  return;
 800398a:	bf00      	nop
}
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800399a:	2001      	movs	r0, #1
 800399c:	f008 fa24 	bl	800bde8 <UTIL_SEQ_SetEvt>
  return;
 80039a0:	bf00      	nop
}
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f008 fa37 	bl	800be24 <UTIL_SEQ_WaitEvt>
  return;
 80039b6:	bf00      	nop
}
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	3308      	adds	r3, #8
 80039d0:	4618      	mov	r0, r3
 80039d2:	f007 fda9 	bl	800b528 <SVCCTL_UserEvtRx>
 80039d6:	4603      	mov	r3, r0
 80039d8:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80039e6:	e002      	b.n	80039ee <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <BLE_StatusNot+0x16>
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d007      	beq.n	8003a1a <BLE_StatusNot+0x24>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8003a0a:	e00d      	b.n	8003a28 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003a0c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003a10:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f008 f9ac 	bl	800bd70 <UTIL_SEQ_PauseTask>
      break;
 8003a18:	e006      	b.n	8003a28 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003a1a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003a1e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f008 f9c3 	bl	800bdac <UTIL_SEQ_ResumeTask>
      break;
 8003a26:	bf00      	nop
  }
  return;
 8003a28:	bf00      	nop
}
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <EDS_STM_App_Notification>:
 * @brief  End Device service Notification
 * @param  GATT Notification (Opcode & Data)
 * @retval None
 */
void EDS_STM_App_Notification(EDS_STM_App_Notification_evt_t *pNotification)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN EDS_STM_App_Notification_1 */

/* USER CODE END EDS_STM_App_Notification_1 */
        switch(pNotification->EDS_Evt_Opcode)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <EDS_STM_App_Notification+0x24>
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d000      	beq.n	8003a46 <EDS_STM_App_Notification+0x16>

        default:
            /* USER CODE BEGIN EDS_Evt_Opcode_default */

            /* USER CODE END EDS_Evt_Opcode_default */
            break;
 8003a44:	e00d      	b.n	8003a62 <EDS_STM_App_Notification+0x32>
            APP_DBG_MSG("-- APPLICATION ROUTER : ENDDEVICEMGT NOTIFICATION ENABLED\r\n");
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <EDS_STM_App_Notification+0x3c>)
 8003a48:	f008 fb3c 	bl	800c0c4 <puts>
            P2P_Router_App_Context.Notification_EndDevice_Status = 1;
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <EDS_STM_App_Notification+0x40>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	705a      	strb	r2, [r3, #1]
            break;
 8003a52:	e006      	b.n	8003a62 <EDS_STM_App_Notification+0x32>
            APP_DBG_MSG("-- APPLICATION ROUTER : ENDDEVICEMGT NOTIFICATION DISABLED\r\n");
 8003a54:	4807      	ldr	r0, [pc, #28]	; (8003a74 <EDS_STM_App_Notification+0x44>)
 8003a56:	f008 fb35 	bl	800c0c4 <puts>
            P2P_Router_App_Context.Notification_EndDevice_Status = 0;
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <EDS_STM_App_Notification+0x40>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	705a      	strb	r2, [r3, #1]
            break;
 8003a60:	bf00      	nop
    }
/* USER CODE BEGIN EDS_STM_App_Notification_2 */

/* USER CODE END EDS_STM_App_Notification_2 */
    return;
 8003a62:	bf00      	nop
}
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	0800d580 	.word	0x0800d580
 8003a70:	20000240 	.word	0x20000240
 8003a74:	0800d5bc 	.word	0x0800d5bc

08003a78 <P2PS_STM_App_Notification>:
 * @brief  P2P service Notification
 * @param  GATT Notification (Opcode & Data)
 * @retval None
 */
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
    switch(pNotification->P2P_Evt_Opcode)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d831      	bhi.n	8003aec <P2PS_STM_App_Notification+0x74>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <P2PS_STM_App_Notification+0x18>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003aaf 	.word	0x08003aaf
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ac5 	.word	0x08003ac5
        /* USER CODE BEGIN P2P_Evt_Opcode */

        /* USER CODE END P2P_Evt_Opcode */
        case P2PS_STM__NOTIFY_ENABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : BUTTON NOTIFICATION ENABLED\n\r");
 8003aa0:	4815      	ldr	r0, [pc, #84]	; (8003af8 <P2PS_STM_App_Notification+0x80>)
 8003aa2:	f008 fa87 	bl	800bfb4 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM__NOTIFY_ENABLED_EVT */
            P2P_Router_App_Context.Notification_Button_Status = 1;
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <P2PS_STM_App_Notification+0x84>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
            /* USER CODE END P2PS_STM__NOTIFY_ENABLED_EVT */
            break;
 8003aac:	e01f      	b.n	8003aee <P2PS_STM_App_Notification+0x76>

        case P2PS_STM_NOTIFY_DISABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : BUTTON NOTIFICATION DISABLED\n\r");
 8003aae:	4814      	ldr	r0, [pc, #80]	; (8003b00 <P2PS_STM_App_Notification+0x88>)
 8003ab0:	f008 fa80 	bl	800bfb4 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM_NOTIFY_DISABLED_EVT */
            P2P_Router_App_Context.Notification_Button_Status = 0;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <P2PS_STM_App_Notification+0x84>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
            /* USER CODE END P2PS_STM_NOTIFY_DISABLED_EVT */
            break;
 8003aba:	e018      	b.n	8003aee <P2PS_STM_App_Notification+0x76>

        case P2PS_STM_READ_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : LED READ STATUS\n\r");
 8003abc:	4811      	ldr	r0, [pc, #68]	; (8003b04 <P2PS_STM_App_Notification+0x8c>)
 8003abe:	f008 fa79 	bl	800bfb4 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM_READ_EVT */

            /* USER CODE END P2PS_STM_READ_EVT */
            break;
 8003ac2:	e014      	b.n	8003aee <P2PS_STM_App_Notification+0x76>

        case P2PS_STM_WRITE_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : WRITE LED CONFIG TO ALL END DEVICE \n\r");
 8003ac4:	4810      	ldr	r0, [pc, #64]	; (8003b08 <P2PS_STM_App_Notification+0x90>)
 8003ac6:	f008 fa75 	bl	800bfb4 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM_WRITE_EVT */
            P2P_Router_App_Context.LedControlEndDevice.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <P2PS_STM_App_Notification+0x84>)
 8003ad2:	729a      	strb	r2, [r3, #10]
            P2P_Router_App_Context.LedControlEndDevice.Led1Control=pNotification->DataTransfered.pPayload[1];
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	785a      	ldrb	r2, [r3, #1]
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <P2PS_STM_App_Notification+0x84>)
 8003adc:	72da      	strb	r2, [r3, #11]
            Client_Update_Char( LED_CHAR_UUID, 0, (uint8_t *)&P2P_Router_App_Context.LedControlEndDevice);
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <P2PS_STM_App_Notification+0x94>)
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f642 3050 	movw	r0, #11088	; 0x2b50
 8003ae6:	f000 f9db 	bl	8003ea0 <Client_Update_Char>
            /* USER CODE END P2PS_STM_WRITE_EVT */
            break;
 8003aea:	e000      	b.n	8003aee <P2PS_STM_App_Notification+0x76>

        default:
            /* USER CODE BEGIN P2P_Evt_Opcode_default */

            /* USER CODE END P2P_Evt_Opcode_default */
        break;
 8003aec:	bf00      	nop
    }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
    return;
 8003aee:	bf00      	nop
}
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	0800d5f8 	.word	0x0800d5f8
 8003afc:	20000240 	.word	0x20000240
 8003b00:	0800d630 	.word	0x0800d630
 8003b04:	0800d668 	.word	0x0800d668
 8003b08:	0800d694 	.word	0x0800d694
 8003b0c:	2000024a 	.word	0x2000024a

08003b10 <P2P_Router_APP_Init>:
 * @brief  Router Application initialisation
 * @param  None
 * @retval None
 */
void P2P_Router_APP_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN P2P_Router_APP_Init_1 */
    P2PR_APP_Device_Status_t device_status;
    /* USER CODE END P2P_Router_APP_Init_1 */

    UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Client_Update_Service );
 8003b16:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <P2P_Router_APP_Init+0x6c>)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b1e:	f008 f8dd 	bl	800bcdc <UTIL_SEQ_RegTask>

    /* USER CODE BEGIN P2P_Router_APP_Init_2 */
    /**
     * Initialize LedButton Service
     */
    P2P_Router_App_Context.Notification_Button_Status=0;
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
    P2P_Router_App_Context.Notification_EndDevice_Status=0;
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	705a      	strb	r2, [r3, #1]

    P2P_Router_App_Context.EndDeviceStatus.Device1_Status=0x00;
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	709a      	strb	r2, [r3, #2]
    device_status.Device1_Status = 0x80; /* Not connected */
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	703b      	strb	r3, [r7, #0]
#if (CFG_P2P_DEMO_MULTI != 0 )   
    P2P_Router_App_Context.EndDeviceStatus.Device2_Status=0x00;
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	70da      	strb	r2, [r3, #3]
    P2P_Router_App_Context.EndDeviceStatus.Device3_Status=0x00;
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	711a      	strb	r2, [r3, #4]
    P2P_Router_App_Context.EndDeviceStatus.Device4_Status=0x00;
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	715a      	strb	r2, [r3, #5]
    P2P_Router_App_Context.EndDeviceStatus.Device5_Status=0x00;
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	719a      	strb	r2, [r3, #6]
    P2P_Router_App_Context.EndDeviceStatus.Device6_Status=0x00;
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <P2P_Router_APP_Init+0x70>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	71da      	strb	r2, [r3, #7]
    device_status.Device2_Status = 0x80; /* Not connected */
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	707b      	strb	r3, [r7, #1]
    device_status.Device3_Status = 0x80; /* Not connected */
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	70bb      	strb	r3, [r7, #2]
    device_status.Device4_Status = 0x80; /* Not connected */
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	70fb      	strb	r3, [r7, #3]
    device_status.Device5_Status = 0x80; /* Not connected */
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	713b      	strb	r3, [r7, #4]
    device_status.Device6_Status = 0x80; /* Not connected */
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	717b      	strb	r3, [r7, #5]
#endif
    /* Update EndDevice Management Service */
    
    
    P2PR_APP_End_Device_Mgt_Connection_Update( &device_status );
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f809 	bl	8003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>

    /* USER CODE END P2P_Router_APP_Init_2 */

    return;
 8003b72:	bf00      	nop
}
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	08003d09 	.word	0x08003d09
 8003b80:	20000240 	.word	0x20000240

08003b84 <P2PR_APP_End_Device_Mgt_Connection_Update>:
 * @brief  End Device Managment
 * @param  None
 * @retval None
 */
void P2PR_APP_End_Device_Mgt_Connection_Update( P2PR_APP_Device_Status_t *p_device_status )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PR_APP_End_Device_Mgt_Connection_Update_1 */

/* USER CODE END P2PR_APP_End_Device_Mgt_Connection_Update_1 */
    if( (p_device_status->Device1_Status) & (0x80) )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b25b      	sxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da06      	bge.n	8003ba4 <P2PR_APP_End_Device_Mgt_Connection_Update+0x20>
    {
    /* USER CODE BEGIN Device1_Status */
      P2P_Router_App_Context.EndDeviceStatus.Device1_Status = (p_device_status->Device1_Status) & (0x7F);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003ba2:	709a      	strb	r2, [r3, #2]
    /* USER CODE END Device1_Status */
    }
#if (CFG_P2P_DEMO_MULTI != 0 )
    /* USER CODE BEGIN CFG_P2P_DEMO_MULTI */
    if( (p_device_status->Device2_Status) & (0x80) )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	da06      	bge.n	8003bbc <P2PR_APP_End_Device_Mgt_Connection_Update+0x38>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device2_Status = (p_device_status->Device2_Status) & (0x7F);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	785b      	ldrb	r3, [r3, #1]
 8003bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003bba:	70da      	strb	r2, [r3, #3]
    }

    if( (p_device_status->Device3_Status) & (0x80) )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da06      	bge.n	8003bd4 <P2PR_APP_End_Device_Mgt_Connection_Update+0x50>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device3_Status = (p_device_status->Device3_Status) & (0x7F);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	789b      	ldrb	r3, [r3, #2]
 8003bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003bd2:	711a      	strb	r2, [r3, #4]
    }

    if( (p_device_status->Device4_Status) & (0x80) )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	78db      	ldrb	r3, [r3, #3]
 8003bd8:	b25b      	sxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da06      	bge.n	8003bec <P2PR_APP_End_Device_Mgt_Connection_Update+0x68>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device4_Status = (p_device_status->Device4_Status) & (0x7F);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	78db      	ldrb	r3, [r3, #3]
 8003be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003bea:	715a      	strb	r2, [r3, #5]
    }
    if( (p_device_status->Device5_Status) & (0x80) )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	791b      	ldrb	r3, [r3, #4]
 8003bf0:	b25b      	sxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da06      	bge.n	8003c04 <P2PR_APP_End_Device_Mgt_Connection_Update+0x80>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device5_Status = (p_device_status->Device5_Status) & (0x7F);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	791b      	ldrb	r3, [r3, #4]
 8003bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003c02:	719a      	strb	r2, [r3, #6]
    }

    if( (p_device_status->Device6_Status) & (0x80) )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	795b      	ldrb	r3, [r3, #5]
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	da06      	bge.n	8003c1c <P2PR_APP_End_Device_Mgt_Connection_Update+0x98>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device6_Status = (p_device_status->Device6_Status) & (0x7F);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	795b      	ldrb	r3, [r3, #5]
 8003c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003c1a:	71da      	strb	r2, [r3, #7]
    }

    /* USER CODE END CFG_P2P_DEMO_MULTI */
#endif
/* USER CODE BEGIN P2PR_APP_End_Device_Mgt_Connection_Update_2 */
    EDS_STM_Update_Char(END_DEVICE_STATUS_CHAR_UUID, 
 8003c1c:	4905      	ldr	r1, [pc, #20]	; (8003c34 <P2PR_APP_End_Device_Mgt_Connection_Update+0xb0>)
 8003c1e:	f642 3060 	movw	r0, #11104	; 0x2b60
 8003c22:	f006 fa7b 	bl	800a11c <EDS_STM_Update_Char>
            (uint8_t *)&P2P_Router_App_Context.EndDeviceStatus);

/* USER CODE END P2PR_APP_End_Device_Mgt_Connection_Update_2 */
    return;
 8003c26:	bf00      	nop
}
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000240 	.word	0x20000240
 8003c34:	20000242 	.word	0x20000242

08003c38 <P2P_Client_App_Notification>:
 * @brief  Notification from the Server
 * @param  Client Notification from Server side
 * @retval None
 */
void P2P_Client_App_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2P_Client_App_Notification_1 */

/* USER CODE END P2P_Client_App_Notification_1 */
    switch(pNotification->P2P_Client_Evt_Opcode)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d000      	beq.n	8003c4a <P2P_Client_App_Notification+0x12>
    /* USER CODE END P2P_Client_Evt_Opcode */
        default:
    /* USER CODE BEGIN P2P_Client_Evt_Opcode_default */

    /* USER CODE END P2P_Client_Evt_Opcode_default */
            break;
 8003c48:	e024      	b.n	8003c94 <P2P_Client_App_Notification+0x5c>
           if(P2P_Router_App_Context.Notification_Button_Status){
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <P2P_Client_App_Notification+0x64>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d019      	beq.n	8003c86 <P2P_Client_App_Notification+0x4e>
            APP_DBG_MSG("-- APPLICATION : INFORM SMART PHONE DEVICE %x BUTTON PUSHED \n\r ",pNotification->DataTransfered.pPayload[0]);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4811      	ldr	r0, [pc, #68]	; (8003ca0 <P2P_Client_App_Notification+0x68>)
 8003c5c:	f008 f9aa 	bl	800bfb4 <iprintf>
            APP_DBG_MSG("\r\n\r ");
 8003c60:	4810      	ldr	r0, [pc, #64]	; (8003ca4 <P2P_Client_App_Notification+0x6c>)
 8003c62:	f008 f9a7 	bl	800bfb4 <iprintf>
            P2P_Router_App_Context.ButtonStatusEndDevice.ButtonStatus=pNotification->DataTransfered.pPayload[1];
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	785a      	ldrb	r2, [r3, #1]
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <P2P_Client_App_Notification+0x64>)
 8003c6e:	725a      	strb	r2, [r3, #9]
            P2P_Router_App_Context.ButtonStatusEndDevice.Device_Button_Selection=pNotification->DataTransfered.pPayload[0];
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <P2P_Client_App_Notification+0x64>)
 8003c78:	721a      	strb	r2, [r3, #8]
            P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Router_App_Context.ButtonStatusEndDevice);
 8003c7a:	490b      	ldr	r1, [pc, #44]	; (8003ca8 <P2P_Client_App_Notification+0x70>)
 8003c7c:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8003c80:	f006 fd4e 	bl	800a720 <P2PS_STM_App_Update_Char>
        break;
 8003c84:	e005      	b.n	8003c92 <P2P_Client_App_Notification+0x5a>
            APP_DBG_MSG("-- APPLICATION : NOT POSSIBLE TO INFORM THE SMART PHONE - NOTIFICATION DISABLED  \n ");
 8003c86:	4809      	ldr	r0, [pc, #36]	; (8003cac <P2P_Client_App_Notification+0x74>)
 8003c88:	f008 f994 	bl	800bfb4 <iprintf>
            APP_DBG_MSG("\r\n\r ");
 8003c8c:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <P2P_Client_App_Notification+0x6c>)
 8003c8e:	f008 f991 	bl	800bfb4 <iprintf>
        break;
 8003c92:	bf00      	nop

    }
/* USER CODE BEGIN P2P_Client_App_Notification_2 */

/* USER CODE END P2P_Client_App_Notification_2 */
    return;
 8003c94:	bf00      	nop
}
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000240 	.word	0x20000240
 8003ca0:	0800d6d4 	.word	0x0800d6d4
 8003ca4:	0800d714 	.word	0x0800d714
 8003ca8:	20000248 	.word	0x20000248
 8003cac:	0800d71c 	.word	0x0800d71c

08003cb0 <P2P_Client_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2P_Client_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
    uint8_t index =0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2P_Client_Init_1 */

/* USER CODE END P2P_Client_Init_1 */

    for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	71fb      	strb	r3, [r7, #7]
 8003cbe:	e008      	b.n	8003cd2 <P2P_Client_Init+0x22>
        aP2PClientContext[index].state= APP_BLE_IDLE;
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <P2P_Client_Init+0x3c>)
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	4413      	add	r3, r2
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d9f3      	bls.n	8003cc0 <P2P_Client_Init+0x10>
    /**
     *    Register the event handler to the BLE controller
     */
    SVCCTL_RegisterCltHandler(Client_Event_Handler);
 8003cd8:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <P2P_Client_Init+0x40>)
 8003cda:	f007 fc0b 	bl	800b4f4 <SVCCTL_RegisterCltHandler>
/* USER CODE BEGIN P2P_Client_Init_2 */
    APP_DBG_MSG("-- LED BUTTON CLIENT INITIALIZED \n");
 8003cde:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <P2P_Client_Init+0x44>)
 8003ce0:	f008 f9f0 	bl	800c0c4 <puts>
/* USER CODE END P2P_Client_Init_2 */
    return;
 8003ce4:	bf00      	nop
}
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000210 	.word	0x20000210
 8003cf0:	08003f15 	.word	0x08003f15
 8003cf4:	0800d770 	.word	0x0800d770

08003cf8 <P2PR_APP_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void P2PR_APP_Init( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
    P2P_Router_APP_Init();
 8003cfc:	f7ff ff08 	bl	8003b10 <P2P_Router_APP_Init>
    P2P_Client_Init();
 8003d00:	f7ff ffd6 	bl	8003cb0 <P2P_Client_Init>
    /* USER CODE BEGIN P2PR_APP_Init */

    /* USER CODE END P2PR_APP_Init */
    return;
 8003d04:	bf00      	nop
}
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <Client_Update_Service>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Client_Update_Service( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Client_Update_Service_1 */

    /* USER CODE END Client_Update_Service_1 */
    uint16_t enable = 0x0001;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	80bb      	strh	r3, [r7, #4]

    uint8_t index;

    index = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	71fb      	strb	r3, [r7, #7]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003d16:	e0a4      	b.n	8003e62 <Client_Update_Service+0x15a>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
    {

        switch(aP2PClientContext[index].state)
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	4a5a      	ldr	r2, [pc, #360]	; (8003e84 <Client_Update_Service+0x17c>)
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4413      	add	r3, r2
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	3b06      	subs	r3, #6
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	f200 8098 	bhi.w	8003e5a <Client_Update_Service+0x152>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <Client_Update_Service+0x28>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003ded 	.word	0x08003ded
 8003d34:	08003df5 	.word	0x08003df5
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d83 	.word	0x08003d83
 8003d40:	08003e5b 	.word	0x08003e5b
 8003d44:	08003db9 	.word	0x08003db9
 8003d48:	08003e27 	.word	0x08003e27
        {
            /* USER CODE BEGIN aP2PClientContext */
            case APP_BLE_DISCOVER_LED_CHAR_DESC: /* Not Used - No decriptor */
                APP_DBG_MSG("* GATT : Discover Descriptor of Led Characteritic\n");
 8003d4c:	484e      	ldr	r0, [pc, #312]	; (8003e88 <Client_Update_Service+0x180>)
 8003d4e:	f008 f9b9 	bl	800c0c4 <puts>
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	4a4b      	ldr	r2, [pc, #300]	; (8003e84 <Client_Update_Service+0x17c>)
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4413      	add	r3, r2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	8818      	ldrh	r0, [r3, #0]
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	4a48      	ldr	r2, [pc, #288]	; (8003e84 <Client_Update_Service+0x17c>)
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4413      	add	r3, r2
 8003d66:	3308      	adds	r3, #8
 8003d68:	8819      	ldrh	r1, [r3, #0]
                        aP2PClientContext[index].P2PLedCharHdle,
                        aP2PClientContext[index].P2PLedCharHdle+2);
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	4a45      	ldr	r2, [pc, #276]	; (8003e84 <Client_Update_Service+0x17c>)
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	4413      	add	r3, r2
 8003d72:	3308      	adds	r3, #8
 8003d74:	881b      	ldrh	r3, [r3, #0]
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003d76:	3302      	adds	r3, #2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f005 fd6a 	bl	8009854 <aci_gatt_disc_all_char_desc>

                break;
 8003d80:	e06c      	b.n	8003e5c <Client_Update_Service+0x154>
            case APP_BLE_DISCOVER_BUTTON_CHAR_DESC:
                APP_DBG_MSG("* GATT : Discover Descriptor of Button Characteritic\n");
 8003d82:	4842      	ldr	r0, [pc, #264]	; (8003e8c <Client_Update_Service+0x184>)
 8003d84:	f008 f99e 	bl	800c0c4 <puts>
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4a3e      	ldr	r2, [pc, #248]	; (8003e84 <Client_Update_Service+0x17c>)
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	4413      	add	r3, r2
 8003d90:	3302      	adds	r3, #2
 8003d92:	8818      	ldrh	r0, [r3, #0]
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	4a3b      	ldr	r2, [pc, #236]	; (8003e84 <Client_Update_Service+0x17c>)
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	8819      	ldrh	r1, [r3, #0]
                        aP2PClientContext[index].P2PClientCharHdle,
                        aP2PClientContext[index].P2PClientCharHdle+2);
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	4a38      	ldr	r2, [pc, #224]	; (8003e84 <Client_Update_Service+0x17c>)
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	4413      	add	r3, r2
 8003da8:	330c      	adds	r3, #12
 8003daa:	881b      	ldrh	r3, [r3, #0]
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003dac:	3302      	adds	r3, #2
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	f005 fd4f 	bl	8009854 <aci_gatt_disc_all_char_desc>

                break;
 8003db6:	e051      	b.n	8003e5c <Client_Update_Service+0x154>
            case APP_BLE_ENABLE_NOTIFICATION_BUTTON_DESC:
                APP_DBG_MSG("* GATT : Enable Button Notification\n");
 8003db8:	4835      	ldr	r0, [pc, #212]	; (8003e90 <Client_Update_Service+0x188>)
 8003dba:	f008 f983 	bl	800c0c4 <puts>
                aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <Client_Update_Service+0x17c>)
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	8818      	ldrh	r0, [r3, #0]
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <Client_Update_Service+0x17c>)
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	4413      	add	r3, r2
 8003dd2:	330e      	adds	r3, #14
 8003dd4:	8819      	ldrh	r1, [r3, #0]
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f005 fda6 	bl	800992a <aci_gatt_write_char_desc>
                        aP2PClientContext[index].P2PClientDescHandle,
                        2,
                        (uint8_t *)&enable);

                aP2PClientContext[index].state = APP_BLE_CONNECTED;
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <Client_Update_Service+0x17c>)
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	4413      	add	r3, r2
 8003de6:	2205      	movs	r2, #5
 8003de8:	701a      	strb	r2, [r3, #0]

                break;
 8003dea:	e037      	b.n	8003e5c <Client_Update_Service+0x154>
            /* USER CODE END aP2PClientContext */
            case APP_BLE_DISCOVER_SERVICES:
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("APP_BLE_DISCOVER_SERVICES\n");
 8003dec:	4829      	ldr	r0, [pc, #164]	; (8003e94 <Client_Update_Service+0x18c>)
 8003dee:	f008 f969 	bl	800c0c4 <puts>
#endif
            /* USER CODE BEGIN APP_BLE_DISCOVER_SERVICES */

            /* USER CODE END APP_BLE_DISCOVER_SERVICES */
            break;
 8003df2:	e033      	b.n	8003e5c <Client_Update_Service+0x154>
            case APP_BLE_DISCOVER_CHARACS:
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("* GATT : Discover Led Button  Characteristics\n");
 8003df4:	4828      	ldr	r0, [pc, #160]	; (8003e98 <Client_Update_Service+0x190>)
 8003df6:	f008 f965 	bl	800c0c4 <puts>
#endif
                aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <Client_Update_Service+0x17c>)
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	4413      	add	r3, r2
 8003e02:	3302      	adds	r3, #2
 8003e04:	8818      	ldrh	r0, [r3, #0]
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <Client_Update_Service+0x17c>)
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3304      	adds	r3, #4
 8003e10:	8819      	ldrh	r1, [r3, #0]
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <Client_Update_Service+0x17c>)
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	4413      	add	r3, r2
 8003e1a:	3306      	adds	r3, #6
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f005 fcad 	bl	800977e <aci_gatt_disc_all_char_of_service>
                        aP2PClientContext[index].P2PServiceHandle,
                        aP2PClientContext[index].P2PServiceEndHandle);
            /* USER CODE BEGIN APP_BLE_DISCOVER_CHARACS */

            /* USER CODE END APP_BLE_DISCOVER_CHARACS */
                break;
 8003e24:	e01a      	b.n	8003e5c <Client_Update_Service+0x154>

            case APP_BLE_DISABLE_NOTIFICATION_TX_DESC :
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("* GATT : Disable Button Notification\n");
 8003e26:	481d      	ldr	r0, [pc, #116]	; (8003e9c <Client_Update_Service+0x194>)
 8003e28:	f008 f94c 	bl	800c0c4 <puts>
#endif
                aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <Client_Update_Service+0x17c>)
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	4413      	add	r3, r2
 8003e34:	3302      	adds	r3, #2
 8003e36:	8818      	ldrh	r0, [r3, #0]
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <Client_Update_Service+0x17c>)
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	330e      	adds	r3, #14
 8003e42:	8819      	ldrh	r1, [r3, #0]
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	2202      	movs	r2, #2
 8003e48:	f005 fd6f 	bl	800992a <aci_gatt_write_char_desc>
                        aP2PClientContext[index].P2PClientDescHandle,
                        2,
                        (uint8_t *)&enable);

                aP2PClientContext[index].state = APP_BLE_CONNECTED;
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	4a0d      	ldr	r2, [pc, #52]	; (8003e84 <Client_Update_Service+0x17c>)
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	4413      	add	r3, r2
 8003e54:	2205      	movs	r2, #5
 8003e56:	701a      	strb	r2, [r3, #0]
            /* USER CODE BEGIN APP_BLE_DISABLE_NOTIFICATION_TX_DESC */

            /* USER CODE END APP_BLE_DISABLE_NOTIFICATION_TX_DESC */
                break;
 8003e58:	e000      	b.n	8003e5c <Client_Update_Service+0x154>
            default:
            /* USER CODE BEGIN aP2PClientContext_default */

            /* USER CODE END aP2PClientContext_default */
                break;
 8003e5a:	bf00      	nop
        }
        index++;
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	71fb      	strb	r3, [r7, #7]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d808      	bhi.n	8003e7a <Client_Update_Service+0x172>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	4a06      	ldr	r2, [pc, #24]	; (8003e84 <Client_Update_Service+0x17c>)
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f af50 	bne.w	8003d18 <Client_Update_Service+0x10>
    }
    /* USER CODE BEGIN Client_Update_Service_2 */

    /* USER CODE END Client_Update_Service_2 */
    return;
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
}
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000210 	.word	0x20000210
 8003e88:	0800d794 	.word	0x0800d794
 8003e8c:	0800d7c8 	.word	0x0800d7c8
 8003e90:	0800d800 	.word	0x0800d800
 8003e94:	0800d824 	.word	0x0800d824
 8003e98:	0800d840 	.word	0x0800d840
 8003e9c:	0800d870 	.word	0x0800d870

08003ea0 <Client_Update_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Client_Update_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	603a      	str	r2, [r7, #0]
 8003eaa:	80fb      	strh	r3, [r7, #6]
 8003eac:	460b      	mov	r3, r1
 8003eae:	717b      	strb	r3, [r7, #5]
    /* USER CODE BEGIN Client_Update_Char_1 */

    /* USER CODE END Client_Update_Char_1 */
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003eb0:	2342      	movs	r3, #66	; 0x42
 8003eb2:	73fb      	strb	r3, [r7, #15]
    uint8_t index;

    index = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73bb      	strb	r3, [r7, #14]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003eb8:	e01b      	b.n	8003ef2 <Client_Update_Char+0x52>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
    {
        /* USER CODE BEGIN Client_Update_Char_2 */
        switch(UUID)
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	f642 3250 	movw	r2, #11088	; 0x2b50
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d000      	beq.n	8003ec6 <Client_Update_Char+0x26>
                        (uint8_t *)  pPayload);

                break;

            default:
                break;
 8003ec4:	e012      	b.n	8003eec <Client_Update_Char+0x4c>
                ret =aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 8003ec6:	7bbb      	ldrb	r3, [r7, #14]
 8003ec8:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <Client_Update_Char+0x70>)
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	4413      	add	r3, r2
 8003ece:	3302      	adds	r3, #2
 8003ed0:	8818      	ldrh	r0, [r3, #0]
 8003ed2:	7bbb      	ldrb	r3, [r7, #14]
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <Client_Update_Char+0x70>)
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	4413      	add	r3, r2
 8003eda:	3308      	adds	r3, #8
 8003edc:	8819      	ldrh	r1, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f005 fda7 	bl	8009a34 <aci_gatt_write_without_resp>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
                break;
 8003eea:	bf00      	nop
        }
        /* USER CODE END Client_Update_Char_2 */
        index++;
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	73bb      	strb	r3, [r7, #14]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003ef2:	7bbb      	ldrb	r3, [r7, #14]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d806      	bhi.n	8003f06 <Client_Update_Char+0x66>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <Client_Update_Char+0x70>)
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	4413      	add	r3, r2
 8003f00:	781b      	ldrb	r3, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1d9      	bne.n	8003eba <Client_Update_Char+0x1a>
    }
    /* USER CODE BEGIN Client_Update_Char_3 */

    /* USER CODE END Client_Update_Char_3 */
    return ret;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
}/* end Client_Update_Char() */
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000210 	.word	0x20000210

08003f14 <Client_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Client_Event_Handler(void *Event)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b096      	sub	sp, #88	; 0x58
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
    SVCCTL_EvtAckStatus_t return_value;
    hci_event_pckt *event_pckt;
    evt_blue_aci *blue_evt;
    P2P_Client_App_Notification_evt_t Notification;

    return_value = SVCCTL_EvtNotAck;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3301      	adds	r3, #1
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48

    switch(event_pckt->evt)
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2bff      	cmp	r3, #255	; 0xff
 8003f2e:	d000      	beq.n	8003f32 <Client_Event_Handler+0x1e>

        default:
            /* USER CODE BEGIN evt_default */

            /* USER CODE END evt_default */
            break;
 8003f30:	e2c2      	b.n	80044b8 <Client_Event_Handler+0x5a4>
            blue_evt = (evt_blue_aci*)event_pckt->data;
 8003f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f34:	3302      	adds	r3, #2
 8003f36:	647b      	str	r3, [r7, #68]	; 0x44
            switch(blue_evt->ecode)
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	f200 82ac 	bhi.w	80044a0 <Client_Event_Handler+0x58c>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <Client_Event_Handler+0x3c>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08004285 	.word	0x08004285
 8003f54:	080044a1 	.word	0x080044a1
 8003f58:	0800413b 	.word	0x0800413b
 8003f5c:	080044a1 	.word	0x080044a1
 8003f60:	080044a1 	.word	0x080044a1
 8003f64:	080044a1 	.word	0x080044a1
 8003f68:	08003f85 	.word	0x08003f85
 8003f6c:	080044a1 	.word	0x080044a1
 8003f70:	080044a1 	.word	0x080044a1
 8003f74:	080044a1 	.word	0x080044a1
 8003f78:	080044a1 	.word	0x080044a1
 8003f7c:	080043b7 	.word	0x080043b7
 8003f80:	08004449 	.word	0x08004449
                    aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 8003f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f86:	3302      	adds	r3, #2
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
                    handle = pr->Connection_Handle;
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	785b      	ldrb	r3, [r3, #1]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	4313      	orrs	r3, r2
 8003f94:	86fb      	strh	r3, [r7, #54]	; 0x36
                    index = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f9c:	e02e      	b.n	8003ffc <Client_Event_Handler+0xe8>
                        status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8003f9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003fa2:	4abc      	ldr	r2, [pc, #752]	; (8004294 <Client_Event_Handler+0x380>)
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff f87b 	bl	80030a8 <APP_BLE_Get_Client_Connection_Status>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                        if((aP2PClientContext[index].state == APP_BLE_CONNECTED)&&
 8003fb8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003fbc:	4ab5      	ldr	r2, [pc, #724]	; (8004294 <Client_Event_Handler+0x380>)
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	4413      	add	r3, r2
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d114      	bne.n	8003ff2 <Client_Event_Handler+0xde>
 8003fc8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d110      	bne.n	8003ff2 <Client_Event_Handler+0xde>
                            aP2PClientContext[index].state = APP_BLE_IDLE;
 8003fd0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003fd4:	4aaf      	ldr	r2, [pc, #700]	; (8004294 <Client_Event_Handler+0x380>)
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	4413      	add	r3, r2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
                            aP2PClientContext[index].connHandle = 0xFFFF;
 8003fde:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003fe2:	4aac      	ldr	r2, [pc, #688]	; (8004294 <Client_Event_Handler+0x380>)
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3302      	adds	r3, #2
 8003fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fee:	801a      	strh	r2, [r3, #0]
                            break;
 8003ff0:	e010      	b.n	8004014 <Client_Event_Handler+0x100>
                        index++;
 8003ff2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003ffc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004000:	2b02      	cmp	r3, #2
 8004002:	d807      	bhi.n	8004014 <Client_Event_Handler+0x100>
                            (aP2PClientContext[index].state != APP_BLE_IDLE)/* &&
 8004004:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004008:	4aa2      	ldr	r2, [pc, #648]	; (8004294 <Client_Event_Handler+0x380>)
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	4413      	add	r3, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1c4      	bne.n	8003f9e <Client_Event_Handler+0x8a>
                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8004014:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004018:	2b02      	cmp	r3, #2
 800401a:	f200 8243 	bhi.w	80044a4 <Client_Event_Handler+0x590>
                        aP2PClientContext[index].connHandle= handle;
 800401e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004022:	4a9c      	ldr	r2, [pc, #624]	; (8004294 <Client_Event_Handler+0x380>)
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	4413      	add	r3, r2
 8004028:	3302      	adds	r3, #2
 800402a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800402c:	801a      	strh	r2, [r3, #0]
                        numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	78da      	ldrb	r2, [r3, #3]
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	789b      	ldrb	r3, [r3, #2]
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                        if (pr->Attribute_Data_Length == 20)
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	789b      	ldrb	r3, [r3, #2]
 8004042:	2b14      	cmp	r3, #20
 8004044:	f040 822e 	bne.w	80044a4 <Client_Event_Handler+0x590>
                            idx = 16;
 8004048:	2310      	movs	r3, #16
 800404a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                                for (i=0; i<numServ; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004054:	e06a      	b.n	800412c <Client_Event_Handler+0x218>
                                    uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8004056:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800405a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405c:	4413      	add	r3, r2
 800405e:	791b      	ldrb	r3, [r3, #4]
 8004060:	b29a      	uxth	r2, r3
 8004062:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004068:	440b      	add	r3, r1
 800406a:	3304      	adds	r3, #4
 800406c:	3301      	adds	r3, #1
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	b29b      	uxth	r3, r3
 8004076:	4313      	orrs	r3, r2
 8004078:	867b      	strh	r3, [r7, #50]	; 0x32
                                    if(uuid == P2P_SERVICE_UUID)
 800407a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800407c:	f64f 6240 	movw	r2, #65088	; 0xfe40
 8004080:	4293      	cmp	r3, r2
 8004082:	d149      	bne.n	8004118 <Client_Event_Handler+0x204>
                                        APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 8004084:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004088:	4a82      	ldr	r2, [pc, #520]	; (8004294 <Client_Event_Handler+0x380>)
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	4413      	add	r3, r2
 800408e:	3302      	adds	r3, #2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	4619      	mov	r1, r3
 8004094:	4880      	ldr	r0, [pc, #512]	; (8004298 <Client_Event_Handler+0x384>)
 8004096:	f007 ff8d 	bl	800bfb4 <iprintf>
                                        aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800409a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800409e:	3b10      	subs	r3, #16
 80040a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a2:	4413      	add	r3, r2
 80040a4:	791b      	ldrb	r3, [r3, #4]
 80040a6:	b299      	uxth	r1, r3
 80040a8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80040ac:	3b10      	subs	r3, #16
 80040ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040b0:	4413      	add	r3, r2
 80040b2:	3304      	adds	r3, #4
 80040b4:	3301      	adds	r3, #1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	b29a      	uxth	r2, r3
 80040be:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040c2:	430a      	orrs	r2, r1
 80040c4:	b291      	uxth	r1, r2
 80040c6:	4a73      	ldr	r2, [pc, #460]	; (8004294 <Client_Event_Handler+0x380>)
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	460a      	mov	r2, r1
 80040d0:	801a      	strh	r2, [r3, #0]
                                        aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 80040d2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80040d6:	3b0e      	subs	r3, #14
 80040d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040da:	4413      	add	r3, r2
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	b299      	uxth	r1, r3
 80040e0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80040e4:	3b0e      	subs	r3, #14
 80040e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e8:	4413      	add	r3, r2
 80040ea:	3304      	adds	r3, #4
 80040ec:	3301      	adds	r3, #1
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040fa:	430a      	orrs	r2, r1
 80040fc:	b291      	uxth	r1, r2
 80040fe:	4a65      	ldr	r2, [pc, #404]	; (8004294 <Client_Event_Handler+0x380>)
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	4413      	add	r3, r2
 8004104:	3306      	adds	r3, #6
 8004106:	460a      	mov	r2, r1
 8004108:	801a      	strh	r2, [r3, #0]
                                        aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800410a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800410e:	4a61      	ldr	r2, [pc, #388]	; (8004294 <Client_Event_Handler+0x380>)
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	4413      	add	r3, r2
 8004114:	2207      	movs	r2, #7
 8004116:	701a      	strb	r2, [r3, #0]
                                    idx += 6;
 8004118:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800411c:	3306      	adds	r3, #6
 800411e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                                for (i=0; i<numServ; i++)
 8004122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004126:	3301      	adds	r3, #1
 8004128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800412c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004130:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004134:	429a      	cmp	r2, r3
 8004136:	d38e      	bcc.n	8004056 <Client_Event_Handler+0x142>
                    break;
 8004138:	e1b4      	b.n	80044a4 <Client_Event_Handler+0x590>
                    aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800413a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413c:	3302      	adds	r3, #2
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    index = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004146:	e004      	b.n	8004152 <Client_Event_Handler+0x23e>
                        index++;
 8004148:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800414c:	3301      	adds	r3, #1
 800414e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004152:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004156:	2b02      	cmp	r3, #2
 8004158:	d80b      	bhi.n	8004172 <Client_Event_Handler+0x25e>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800415a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800415e:	4a4d      	ldr	r2, [pc, #308]	; (8004294 <Client_Event_Handler+0x380>)
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4413      	add	r3, r2
 8004164:	3302      	adds	r3, #2
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800416e:	429a      	cmp	r2, r3
 8004170:	d1ea      	bne.n	8004148 <Client_Event_Handler+0x234>
                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8004172:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004176:	2b02      	cmp	r3, #2
 8004178:	f200 8196 	bhi.w	80044a8 <Client_Event_Handler+0x594>
                        idx = 17;
 800417c:	2311      	movs	r3, #17
 800417e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                        if (pr->Handle_Value_Pair_Length == 21)
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	789b      	ldrb	r3, [r3, #2]
 8004186:	2b15      	cmp	r3, #21
 8004188:	f040 818e 	bne.w	80044a8 <Client_Event_Handler+0x594>
                            pr->Data_Length -= 1;
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	78db      	ldrb	r3, [r3, #3]
 8004190:	3b01      	subs	r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	70da      	strb	r2, [r3, #3]
                            while(pr->Data_Length > 0)
 8004198:	e06f      	b.n	800427a <Client_Event_Handler+0x366>
                                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800419a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800419e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a0:	4413      	add	r3, r2
 80041a2:	791b      	ldrb	r3, [r3, #4]
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80041aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ac:	440b      	add	r3, r1
 80041ae:	3304      	adds	r3, #4
 80041b0:	3301      	adds	r3, #1
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	4313      	orrs	r3, r2
 80041bc:	857b      	strh	r3, [r7, #42]	; 0x2a
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 80041be:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80041c2:	3b0e      	subs	r3, #14
 80041c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c6:	4413      	add	r3, r2
 80041c8:	791b      	ldrb	r3, [r3, #4]
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80041d0:	3b0e      	subs	r3, #14
 80041d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041d4:	440b      	add	r3, r1
 80041d6:	3304      	adds	r3, #4
 80041d8:	3301      	adds	r3, #1
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4313      	orrs	r3, r2
 80041e4:	853b      	strh	r3, [r7, #40]	; 0x28
                                if(uuid == P2P_WRITE_CHAR_UUID)
 80041e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041e8:	f64f 6241 	movw	r2, #65089	; 0xfe41
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d11a      	bne.n	8004226 <Client_Event_Handler+0x312>
                                    APP_DBG_MSG("-- GATT : LED_CHAR_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80041f0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <Client_Event_Handler+0x380>)
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	4413      	add	r3, r2
 80041fa:	3302      	adds	r3, #2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	4826      	ldr	r0, [pc, #152]	; (800429c <Client_Event_Handler+0x388>)
 8004202:	f007 fed7 	bl	800bfb4 <iprintf>
                                    aP2PClientContext[index].state = APP_BLE_DISCOVER_LED_CHAR_DESC;
 8004206:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800420a:	4a22      	ldr	r2, [pc, #136]	; (8004294 <Client_Event_Handler+0x380>)
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	4413      	add	r3, r2
 8004210:	2208      	movs	r2, #8
 8004212:	701a      	strb	r2, [r3, #0]
                                    aP2PClientContext[index].P2PLedCharHdle = handle;
 8004214:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004218:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <Client_Event_Handler+0x380>)
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	4413      	add	r3, r2
 800421e:	3308      	adds	r3, #8
 8004220:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	e01e      	b.n	8004264 <Client_Event_Handler+0x350>
                                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 8004226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004228:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800422c:	4293      	cmp	r3, r2
 800422e:	d119      	bne.n	8004264 <Client_Event_Handler+0x350>
                                    APP_DBG_MSG("-- GATT : BUTTON_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004230:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004234:	4a17      	ldr	r2, [pc, #92]	; (8004294 <Client_Event_Handler+0x380>)
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	3302      	adds	r3, #2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	4619      	mov	r1, r3
 8004240:	4817      	ldr	r0, [pc, #92]	; (80042a0 <Client_Event_Handler+0x38c>)
 8004242:	f007 feb7 	bl	800bfb4 <iprintf>
                                    aP2PClientContext[index].state = APP_BLE_DISCOVER_BUTTON_CHAR_DESC;
 8004246:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <Client_Event_Handler+0x380>)
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	4413      	add	r3, r2
 8004250:	2209      	movs	r2, #9
 8004252:	701a      	strb	r2, [r3, #0]
                                    aP2PClientContext[index].P2PClientCharHdle = handle;
 8004254:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004258:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <Client_Event_Handler+0x380>)
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	4413      	add	r3, r2
 800425e:	330c      	adds	r3, #12
 8004260:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004262:	801a      	strh	r2, [r3, #0]
                                pr->Data_Length -= 21;
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	78db      	ldrb	r3, [r3, #3]
 8004268:	3b15      	subs	r3, #21
 800426a:	b2da      	uxtb	r2, r3
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	70da      	strb	r2, [r3, #3]
                                idx += 21;
 8004270:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004274:	3315      	adds	r3, #21
 8004276:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                            while(pr->Data_Length > 0)
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	78db      	ldrb	r3, [r3, #3]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d18b      	bne.n	800419a <Client_Event_Handler+0x286>
                break;
 8004282:	e111      	b.n	80044a8 <Client_Event_Handler+0x594>
                    aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	3302      	adds	r3, #2
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
                    index = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004290:	e00d      	b.n	80042ae <Client_Event_Handler+0x39a>
 8004292:	bf00      	nop
 8004294:	20000210 	.word	0x20000210
 8004298:	0800d898 	.word	0x0800d898
 800429c:	0800d8d4 	.word	0x0800d8d4
 80042a0:	0800d90c 	.word	0x0800d90c
                        index++;
 80042a4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80042a8:	3301      	adds	r3, #1
 80042aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80042ae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d80b      	bhi.n	80042ce <Client_Event_Handler+0x3ba>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80042b6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80042ba:	4a82      	ldr	r2, [pc, #520]	; (80044c4 <Client_Event_Handler+0x5b0>)
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	3302      	adds	r3, #2
 80042c2:	881a      	ldrh	r2, [r3, #0]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d1ea      	bne.n	80042a4 <Client_Event_Handler+0x390>
                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80042ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	f200 80ea 	bhi.w	80044ac <Client_Event_Handler+0x598>
                        numDesc = (pr->Event_Data_Length) / 4;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	78db      	ldrb	r3, [r3, #3]
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        idx = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                        if (pr->Format == UUID_TYPE_16)
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	789b      	ldrb	r3, [r3, #2]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	f040 80dd 	bne.w	80044ac <Client_Event_Handler+0x598>
                            for (i=0; i<numDesc; i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80042f8:	e056      	b.n	80043a8 <Client_Event_Handler+0x494>
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 80042fa:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80042fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004300:	4413      	add	r3, r2
 8004302:	791b      	ldrb	r3, [r3, #4]
 8004304:	b29a      	uxth	r2, r3
 8004306:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800430a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800430c:	440b      	add	r3, r1
 800430e:	3304      	adds	r3, #4
 8004310:	3301      	adds	r3, #1
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	b29b      	uxth	r3, r3
 800431a:	4313      	orrs	r3, r2
 800431c:	843b      	strh	r3, [r7, #32]
                                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800431e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004322:	3302      	adds	r3, #2
 8004324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004326:	4413      	add	r3, r2
 8004328:	791b      	ldrb	r3, [r3, #4]
 800432a:	b29a      	uxth	r2, r3
 800432c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004330:	3302      	adds	r3, #2
 8004332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004334:	440b      	add	r3, r1
 8004336:	3304      	adds	r3, #4
 8004338:	3301      	adds	r3, #1
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	b29b      	uxth	r3, r3
 8004342:	4313      	orrs	r3, r2
 8004344:	83fb      	strh	r3, [r7, #30]
                                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 8004346:	8bfb      	ldrh	r3, [r7, #30]
 8004348:	f642 1202 	movw	r2, #10498	; 0x2902
 800434c:	4293      	cmp	r3, r2
 800434e:	d121      	bne.n	8004394 <Client_Event_Handler+0x480>
                                    APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004350:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004354:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <Client_Event_Handler+0x5b0>)
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	3302      	adds	r3, #2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	4859      	ldr	r0, [pc, #356]	; (80044c8 <Client_Event_Handler+0x5b4>)
 8004362:	f007 fe27 	bl	800bfb4 <iprintf>
                                    if( aP2PClientContext[index].state == APP_BLE_DISCOVER_BUTTON_CHAR_DESC)
 8004366:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800436a:	4a56      	ldr	r2, [pc, #344]	; (80044c4 <Client_Event_Handler+0x5b0>)
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4413      	add	r3, r2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b09      	cmp	r3, #9
 8004374:	d10e      	bne.n	8004394 <Client_Event_Handler+0x480>
                                        aP2PClientContext[index].P2PClientDescHandle = handle;
 8004376:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800437a:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <Client_Event_Handler+0x5b0>)
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	4413      	add	r3, r2
 8004380:	330e      	adds	r3, #14
 8004382:	8c3a      	ldrh	r2, [r7, #32]
 8004384:	801a      	strh	r2, [r3, #0]
                                        aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_BUTTON_DESC;
 8004386:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800438a:	4a4e      	ldr	r2, [pc, #312]	; (80044c4 <Client_Event_Handler+0x5b0>)
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4413      	add	r3, r2
 8004390:	220b      	movs	r2, #11
 8004392:	701a      	strb	r2, [r3, #0]
                                idx += 4;
 8004394:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004398:	3304      	adds	r3, #4
 800439a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                            for (i=0; i<numDesc; i++)
 800439e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80043a2:	3301      	adds	r3, #1
 80043a4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80043a8:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80043ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d3a2      	bcc.n	80042fa <Client_Event_Handler+0x3e6>
                break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 80043b4:	e07a      	b.n	80044ac <Client_Event_Handler+0x598>
                    aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 80043b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b8:	3302      	adds	r3, #2
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    index = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80043c2:	e004      	b.n	80043ce <Client_Event_Handler+0x4ba>
                        index++;
 80043c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043c8:	3301      	adds	r3, #1
 80043ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80043ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d80b      	bhi.n	80043ee <Client_Event_Handler+0x4da>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80043d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043da:	4a3a      	ldr	r2, [pc, #232]	; (80044c4 <Client_Event_Handler+0x5b0>)
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	4413      	add	r3, r2
 80043e0:	3302      	adds	r3, #2
 80043e2:	881a      	ldrh	r2, [r3, #0]
 80043e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d1ea      	bne.n	80043c4 <Client_Event_Handler+0x4b0>
                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80043ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d85c      	bhi.n	80044b0 <Client_Event_Handler+0x59c>
                        if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PClientCharHdle) &&
 80043f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f8:	885b      	ldrh	r3, [r3, #2]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004400:	4930      	ldr	r1, [pc, #192]	; (80044c4 <Client_Event_Handler+0x5b0>)
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	440b      	add	r3, r1
 8004406:	330c      	adds	r3, #12
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d150      	bne.n	80044b0 <Client_Event_Handler+0x59c>
                                (pr->Attribute_Value_Length == (2)) )
 800440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004410:	791b      	ldrb	r3, [r3, #4]
                        if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PClientCharHdle) &&
 8004412:	2b02      	cmp	r3, #2
 8004414:	d14c      	bne.n	80044b0 <Client_Event_Handler+0x59c>
                            APP_DBG_MSG("-- GATT : BUTTON CHARACTERISTICS RECEIVED_EVT - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004416:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800441a:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <Client_Event_Handler+0x5b0>)
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	4413      	add	r3, r2
 8004420:	3302      	adds	r3, #2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	4619      	mov	r1, r3
 8004426:	4829      	ldr	r0, [pc, #164]	; (80044cc <Client_Event_Handler+0x5b8>)
 8004428:	f007 fdc4 	bl	800bfb4 <iprintf>
                            Notification.P2P_Client_Evt_Opcode = P2P_BUTTON_INFO_RECEIVED_EVT;
 800442c:	2302      	movs	r3, #2
 800442e:	733b      	strb	r3, [r7, #12]
                            Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	791b      	ldrb	r3, [r3, #4]
 8004434:	753b      	strb	r3, [r7, #20]
                            Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 8004436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004438:	3305      	adds	r3, #5
 800443a:	613b      	str	r3, [r7, #16]
                            P2P_Client_App_Notification(&Notification);
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fbf9 	bl	8003c38 <P2P_Client_App_Notification>
                break;/* end EVT_BLUE_GATT_NOTIFICATION */
 8004446:	e033      	b.n	80044b0 <Client_Event_Handler+0x59c>
                    aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 8004448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444a:	3302      	adds	r3, #2
 800444c:	643b      	str	r3, [r7, #64]	; 0x40
                    APP_DBG_MSG("-- GATT : EVT_BLUE_GATT_PROCEDURE_COMPLETE \n");
 800444e:	4820      	ldr	r0, [pc, #128]	; (80044d0 <Client_Event_Handler+0x5bc>)
 8004450:	f007 fe38 	bl	800c0c4 <puts>
                    APP_DBG_MSG("\n");
 8004454:	200a      	movs	r0, #10
 8004456:	f007 fdc5 	bl	800bfe4 <putchar>
                    index = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004460:	e004      	b.n	800446c <Client_Event_Handler+0x558>
                        index++;
 8004462:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004466:	3301      	adds	r3, #1
 8004468:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800446c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004470:	2b02      	cmp	r3, #2
 8004472:	d80b      	bhi.n	800448c <Client_Event_Handler+0x578>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8004474:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004478:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <Client_Event_Handler+0x5b0>)
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4413      	add	r3, r2
 800447e:	3302      	adds	r3, #2
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004488:	429a      	cmp	r2, r3
 800448a:	d1ea      	bne.n	8004462 <Client_Event_Handler+0x54e>
                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800448c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004490:	2b02      	cmp	r3, #2
 8004492:	d80f      	bhi.n	80044b4 <Client_Event_Handler+0x5a0>
                        UTIL_SEQ_SetTask(  1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0 );
 8004494:	2100      	movs	r1, #0
 8004496:	f44f 7080 	mov.w	r0, #256	; 0x100
 800449a:	f007 fc3f 	bl	800bd1c <UTIL_SEQ_SetTask>
                break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800449e:	e009      	b.n	80044b4 <Client_Event_Handler+0x5a0>
                    break;
 80044a0:	bf00      	nop
 80044a2:	e008      	b.n	80044b6 <Client_Event_Handler+0x5a2>
                    break;
 80044a4:	bf00      	nop
 80044a6:	e006      	b.n	80044b6 <Client_Event_Handler+0x5a2>
                break;
 80044a8:	bf00      	nop
 80044aa:	e004      	b.n	80044b6 <Client_Event_Handler+0x5a2>
                break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 80044ac:	bf00      	nop
 80044ae:	e002      	b.n	80044b6 <Client_Event_Handler+0x5a2>
                break;/* end EVT_BLUE_GATT_NOTIFICATION */
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <Client_Event_Handler+0x5a2>
                break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 80044b4:	bf00      	nop
            break; /* HCI_EVT_VENDOR_SPECIFIC */
 80044b6:	bf00      	nop
        }
/* USER CODE BEGIN Client_Event_Handler_2 */

/* USER CODE END Client_Event_Handler_2 */
        return(return_value);
 80044b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
    }/* end BLE_CTRL_Event_Acknowledged_Status_t */
 80044bc:	4618      	mov	r0, r3
 80044be:	3758      	adds	r7, #88	; 0x58
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000210 	.word	0x20000210
 80044c8:	0800d948 	.word	0x0800d948
 80044cc:	0800d990 	.word	0x0800d990
 80044d0:	0800d9d8 	.word	0x0800d9d8

080044d4 <LL_PWR_EnableBootC2>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <LL_PWR_EnableBootC2+0x1c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <LL_PWR_EnableBootC2+0x1c>)
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	60d3      	str	r3, [r2, #12]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58000400 	.word	0x58000400

080044f4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80044fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004502:	4905      	ldr	r1, [pc, #20]	; (8004518 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	58000800 	.word	0x58000800

0800451c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	4904      	ldr	r1, [pc, #16]	; (800453c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4313      	orrs	r3, r2
 800452e:	620b      	str	r3, [r1, #32]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	58000800 	.word	0x58000800

08004540 <LL_AHB3_GRP1_EnableClock>:
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800454e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4313      	orrs	r3, r2
 8004556:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004564:	68fb      	ldr	r3, [r7, #12]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_C1_IPCC_EnableIT_TXF>:
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_C1_IPCC_EnableIT_RXO>:
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	43db      	mvns	r3, r3
 80045c6:	401a      	ands	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	605a      	str	r2, [r3, #4]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	605a      	str	r2, [r3, #4]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_C1_IPCC_EnableReceiveChannel>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	605a      	str	r2, [r3, #4]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	609a      	str	r2, [r3, #8]
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_C1_IPCC_SetFlag_CHx>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	609a      	str	r2, [r3, #8]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4013      	ands	r3, r2
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d101      	bne.n	8004676 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	4013      	ands	r3, r2
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d101      	bne.n	80046a0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80046b4:	2102      	movs	r1, #2
 80046b6:	4819      	ldr	r0, [pc, #100]	; (800471c <HW_IPCC_Rx_Handler+0x6c>)
 80046b8:	f7ff ffe4 	bl	8004684 <LL_C2_IPCC_IsActiveFlag_CHx>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HW_IPCC_Rx_Handler+0x26>
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <HW_IPCC_Rx_Handler+0x6c>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80046d0:	f000 f8e6 	bl	80048a0 <HW_IPCC_SYS_EvtHandler>
 80046d4:	e01f      	b.n	8004716 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80046d6:	2101      	movs	r1, #1
 80046d8:	4810      	ldr	r0, [pc, #64]	; (800471c <HW_IPCC_Rx_Handler+0x6c>)
 80046da:	f7ff ffd3 	bl	8004684 <LL_C2_IPCC_IsActiveFlag_CHx>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HW_IPCC_Rx_Handler+0x46>
 80046e4:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HW_IPCC_Rx_Handler+0x6c>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80046f0:	f000 f89a 	bl	8004828 <HW_IPCC_BLE_EvtHandler>
 80046f4:	e00f      	b.n	8004716 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80046f6:	2108      	movs	r1, #8
 80046f8:	4808      	ldr	r0, [pc, #32]	; (800471c <HW_IPCC_Rx_Handler+0x6c>)
 80046fa:	f7ff ffc3 	bl	8004684 <LL_C2_IPCC_IsActiveFlag_CHx>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <HW_IPCC_Rx_Handler+0x68>
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <HW_IPCC_Rx_Handler+0x6c>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	43db      	mvns	r3, r3
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8004712:	f000 f911 	bl	8004938 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8004716:	bf00      	nop
 8004718:	bf00      	nop
}
 800471a:	bd80      	pop	{r7, pc}
 800471c:	58000c00 	.word	0x58000c00

08004720 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004724:	2102      	movs	r1, #2
 8004726:	4822      	ldr	r0, [pc, #136]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 8004728:	f7ff ff97 	bl	800465a <LL_C1_IPCC_IsActiveFlag_CHx>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HW_IPCC_Tx_Handler+0x26>
 8004732:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	43db      	mvns	r3, r3
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004740:	f000 f8a2 	bl	8004888 <HW_IPCC_SYS_CmdEvtHandler>
 8004744:	e031      	b.n	80047aa <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004746:	2102      	movs	r1, #2
 8004748:	4819      	ldr	r0, [pc, #100]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 800474a:	f7ff ff86 	bl	800465a <LL_C1_IPCC_IsActiveFlag_CHx>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HW_IPCC_Tx_Handler+0x48>
 8004754:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	43db      	mvns	r3, r3
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004762:	f000 f891 	bl	8004888 <HW_IPCC_SYS_CmdEvtHandler>
 8004766:	e020      	b.n	80047aa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8004768:	2108      	movs	r1, #8
 800476a:	4811      	ldr	r0, [pc, #68]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 800476c:	f7ff ff75 	bl	800465a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HW_IPCC_Tx_Handler+0x6a>
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	43db      	mvns	r3, r3
 800477c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8004784:	f000 f8ba 	bl	80048fc <HW_IPCC_MM_FreeBufHandler>
 8004788:	e00f      	b.n	80047aa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800478a:	2120      	movs	r1, #32
 800478c:	4808      	ldr	r0, [pc, #32]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 800478e:	f7ff ff64 	bl	800465a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HW_IPCC_Tx_Handler+0x8c>
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HW_IPCC_Tx_Handler+0x90>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	43db      	mvns	r3, r3
 800479e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80047a6:	f000 f84b 	bl	8004840 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
}
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	58000c00 	.word	0x58000c00

080047b4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80047b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047bc:	f7ff fe9a 	bl	80044f4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80047c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047c4:	f7ff feaa 	bl	800451c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80047c8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80047ca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80047cc:	f7ff fe82 	bl	80044d4 <LL_PWR_EnableBootC2>

  return;
 80047d0:	bf00      	nop
}
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80047d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80047dc:	f7ff feb0 	bl	8004540 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80047e0:	4806      	ldr	r0, [pc, #24]	; (80047fc <HW_IPCC_Init+0x28>)
 80047e2:	f7ff fed6 	bl	8004592 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80047e6:	4805      	ldr	r0, [pc, #20]	; (80047fc <HW_IPCC_Init+0x28>)
 80047e8:	f7ff fec3 	bl	8004572 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80047ec:	202c      	movs	r0, #44	; 0x2c
 80047ee:	f000 fcb2 	bl	8005156 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80047f2:	202d      	movs	r0, #45	; 0x2d
 80047f4:	f000 fcaf 	bl	8005156 <HAL_NVIC_EnableIRQ>

  return;
 80047f8:	bf00      	nop
}
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58000c00 	.word	0x58000c00

08004800 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004804:	2101      	movs	r1, #1
 8004806:	4802      	ldr	r0, [pc, #8]	; (8004810 <HW_IPCC_BLE_Init+0x10>)
 8004808:	f7ff fef8 	bl	80045fc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800480c:	bf00      	nop
}
 800480e:	bd80      	pop	{r7, pc}
 8004810:	58000c00 	.word	0x58000c00

08004814 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8004818:	2101      	movs	r1, #1
 800481a:	4802      	ldr	r0, [pc, #8]	; (8004824 <HW_IPCC_BLE_SendCmd+0x10>)
 800481c:	f7ff ff0e 	bl	800463c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004820:	bf00      	nop
}
 8004822:	bd80      	pop	{r7, pc}
 8004824:	58000c00 	.word	0x58000c00

08004828 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800482c:	f006 ff7a 	bl	800b724 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004830:	2101      	movs	r1, #1
 8004832:	4802      	ldr	r0, [pc, #8]	; (800483c <HW_IPCC_BLE_EvtHandler+0x14>)
 8004834:	f7ff fef4 	bl	8004620 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004838:	bf00      	nop
}
 800483a:	bd80      	pop	{r7, pc}
 800483c:	58000c00 	.word	0x58000c00

08004840 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004844:	2120      	movs	r1, #32
 8004846:	4803      	ldr	r0, [pc, #12]	; (8004854 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004848:	f7ff fec6 	bl	80045d8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800484c:	f006 ff9a 	bl	800b784 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004850:	bf00      	nop
}
 8004852:	bd80      	pop	{r7, pc}
 8004854:	58000c00 	.word	0x58000c00

08004858 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800485c:	2102      	movs	r1, #2
 800485e:	4802      	ldr	r0, [pc, #8]	; (8004868 <HW_IPCC_SYS_Init+0x10>)
 8004860:	f7ff fecc 	bl	80045fc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004864:	bf00      	nop
}
 8004866:	bd80      	pop	{r7, pc}
 8004868:	58000c00 	.word	0x58000c00

0800486c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004870:	2102      	movs	r1, #2
 8004872:	4804      	ldr	r0, [pc, #16]	; (8004884 <HW_IPCC_SYS_SendCmd+0x18>)
 8004874:	f7ff fee2 	bl	800463c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004878:	2102      	movs	r1, #2
 800487a:	4802      	ldr	r0, [pc, #8]	; (8004884 <HW_IPCC_SYS_SendCmd+0x18>)
 800487c:	f7ff fe99 	bl	80045b2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004880:	bf00      	nop
}
 8004882:	bd80      	pop	{r7, pc}
 8004884:	58000c00 	.word	0x58000c00

08004888 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800488c:	2102      	movs	r1, #2
 800488e:	4803      	ldr	r0, [pc, #12]	; (800489c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004890:	f7ff fea2 	bl	80045d8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004894:	f006 ffc6 	bl	800b824 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004898:	bf00      	nop
}
 800489a:	bd80      	pop	{r7, pc}
 800489c:	58000c00 	.word	0x58000c00

080048a0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80048a4:	f006 ffd4 	bl	800b850 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80048a8:	2102      	movs	r1, #2
 80048aa:	4802      	ldr	r0, [pc, #8]	; (80048b4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80048ac:	f7ff feb8 	bl	8004620 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80048b0:	bf00      	nop
}
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	58000c00 	.word	0x58000c00

080048b8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80048c0:	2108      	movs	r1, #8
 80048c2:	480c      	ldr	r0, [pc, #48]	; (80048f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80048c4:	f7ff fec9 	bl	800465a <LL_C1_IPCC_IsActiveFlag_CHx>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80048ce:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80048d4:	2108      	movs	r1, #8
 80048d6:	4807      	ldr	r0, [pc, #28]	; (80048f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80048d8:	f7ff fe6b 	bl	80045b2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80048dc:	e006      	b.n	80048ec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80048e2:	2108      	movs	r1, #8
 80048e4:	4803      	ldr	r0, [pc, #12]	; (80048f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80048e6:	f7ff fea9 	bl	800463c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80048ea:	bf00      	nop
}
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	58000c00 	.word	0x58000c00
 80048f8:	200002e4 	.word	0x200002e4

080048fc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004900:	2108      	movs	r1, #8
 8004902:	4806      	ldr	r0, [pc, #24]	; (800491c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004904:	f7ff fe68 	bl	80045d8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800490e:	2108      	movs	r1, #8
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004912:	f7ff fe93 	bl	800463c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004916:	bf00      	nop
}
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	58000c00 	.word	0x58000c00
 8004920:	200002e4 	.word	0x200002e4

08004924 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004928:	2108      	movs	r1, #8
 800492a:	4802      	ldr	r0, [pc, #8]	; (8004934 <HW_IPCC_TRACES_Init+0x10>)
 800492c:	f7ff fe66 	bl	80045fc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004930:	bf00      	nop
}
 8004932:	bd80      	pop	{r7, pc}
 8004934:	58000c00 	.word	0x58000c00

08004938 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800493c:	f007 f830 	bl	800b9a0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004940:	2108      	movs	r1, #8
 8004942:	4802      	ldr	r0, [pc, #8]	; (800494c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004944:	f7ff fe6c 	bl	8004620 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004948:	bf00      	nop
}
 800494a:	bd80      	pop	{r7, pc}
 800494c:	58000c00 	.word	0x58000c00

08004950 <LL_AHB2_GRP1_EnableClock>:
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800495e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4313      	orrs	r3, r2
 8004966:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004974:	68fb      	ldr	r3, [r7, #12]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800498e:	f107 030c 	add.w	r3, r7, #12
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800499e:	2002      	movs	r0, #2
 80049a0:	f7ff ffd6 	bl	8004950 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <BSP_LED_Init+0x6c>)
 80049a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ac:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ae:	2301      	movs	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b6:	2302      	movs	r3, #2
 80049b8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <BSP_LED_Init+0x70>)
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	f107 020c 	add.w	r2, r7, #12
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 ff1d 	bl	8005808 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <BSP_LED_Init+0x70>)
 80049d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	4a05      	ldr	r2, [pc, #20]	; (80049f0 <BSP_LED_Init+0x6c>)
 80049da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049de:	2200      	movs	r2, #0
 80049e0:	4619      	mov	r1, r3
 80049e2:	f001 f881 	bl	8005ae8 <HAL_GPIO_WritePin>
}
 80049e6:	bf00      	nop
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	0800db78 	.word	0x0800db78
 80049f4:	2000001c 	.word	0x2000001c

080049f8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <BSP_LED_On+0x2c>)
 8004a06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	4a06      	ldr	r2, [pc, #24]	; (8004a28 <BSP_LED_On+0x30>)
 8004a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a12:	2201      	movs	r2, #1
 8004a14:	4619      	mov	r1, r3
 8004a16:	f001 f867 	bl	8005ae8 <HAL_GPIO_WritePin>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	2000001c 	.word	0x2000001c
 8004a28:	0800db78 	.word	0x0800db78

08004a2c <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <BSP_LED_Off+0x2c>)
 8004a3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4a06      	ldr	r2, [pc, #24]	; (8004a5c <BSP_LED_Off+0x30>)
 8004a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a46:	2200      	movs	r2, #0
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f001 f84d 	bl	8005ae8 <HAL_GPIO_WritePin>
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2000001c 	.word	0x2000001c
 8004a5c:	0800db78 	.word	0x0800db78

08004a60 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	460a      	mov	r2, r1
 8004a6a:	71fb      	strb	r3, [r7, #7]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d103      	bne.n	8004a8e <BSP_PB_Init+0x2e>
 8004a86:	2004      	movs	r0, #4
 8004a88:	f7ff ff62 	bl	8004950 <LL_AHB2_GRP1_EnableClock>
 8004a8c:	e00c      	b.n	8004aa8 <BSP_PB_Init+0x48>
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d103      	bne.n	8004a9c <BSP_PB_Init+0x3c>
 8004a94:	2008      	movs	r0, #8
 8004a96:	f7ff ff5b 	bl	8004950 <LL_AHB2_GRP1_EnableClock>
 8004a9a:	e005      	b.n	8004aa8 <BSP_PB_Init+0x48>
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d102      	bne.n	8004aa8 <BSP_PB_Init+0x48>
 8004aa2:	2008      	movs	r0, #8
 8004aa4:	f7ff ff54 	bl	8004950 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004aa8:	79bb      	ldrb	r3, [r7, #6]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d117      	bne.n	8004ade <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <BSP_PB_Init+0xd4>)
 8004ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004abc:	2301      	movs	r3, #1
 8004abe:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <BSP_PB_Init+0xd8>)
 8004ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004acc:	f107 020c 	add.w	r2, r7, #12
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fe98 	bl	8005808 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f7fd f978 	bl	8001dce <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004ade:	79bb      	ldrb	r3, [r7, #6]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d122      	bne.n	8004b2a <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <BSP_PB_Init+0xd4>)
 8004ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aec:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004aee:	2301      	movs	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <BSP_PB_Init+0xdc>)
 8004af4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	4a0f      	ldr	r2, [pc, #60]	; (8004b38 <BSP_PB_Init+0xd8>)
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	f107 020c 	add.w	r2, r7, #12
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fe7f 	bl	8005808 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <BSP_PB_Init+0xe0>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	2200      	movs	r2, #0
 8004b14:	210f      	movs	r1, #15
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fb03 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <BSP_PB_Init+0xe0>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fb16 	bl	8005156 <HAL_NVIC_EnableIRQ>
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	0800db80 	.word	0x0800db80
 8004b38:	20000028 	.word	0x20000028
 8004b3c:	10210000 	.word	0x10210000
 8004b40:	0800db88 	.word	0x0800db88

08004b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004b48:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <SystemInit+0xa0>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004b4e:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <SystemInit+0xa0>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	4a23      	ldr	r2, [pc, #140]	; (8004be4 <SystemInit+0xa0>)
 8004b56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004b76:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b82:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <SystemInit+0xa4>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b94:	f023 0305 	bic.w	r3, r3, #5
 8004b98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	4a0d      	ldr	r2, [pc, #52]	; (8004bec <SystemInit+0xa8>)
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbc:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <SystemInit+0xa8>)
 8004bbe:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000ed00 	.word	0xe000ed00
 8004be8:	faf6fefb 	.word	0xfaf6fefb
 8004bec:	22041000 	.word	0x22041000

08004bf0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	091b      	lsrs	r3, r3, #4
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <SystemCoreClockUpdate+0x130>)
 8004c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b0c      	cmp	r3, #12
 8004c16:	d867      	bhi.n	8004ce8 <SystemCoreClockUpdate+0xf8>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <SystemCoreClockUpdate+0x30>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004ce9 	.word	0x08004ce9
 8004c28:	08004ce9 	.word	0x08004ce9
 8004c2c:	08004ce9 	.word	0x08004ce9
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	08004ce9 	.word	0x08004ce9
 8004c38:	08004ce9 	.word	0x08004ce9
 8004c3c:	08004ce9 	.word	0x08004ce9
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004ce9 	.word	0x08004ce9
 8004c48:	08004ce9 	.word	0x08004ce9
 8004c4c:	08004ce9 	.word	0x08004ce9
 8004c50:	08004c6d 	.word	0x08004c6d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8004c54:	4a33      	ldr	r2, [pc, #204]	; (8004d24 <SystemCoreClockUpdate+0x134>)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6013      	str	r3, [r2, #0]
      break;
 8004c5a:	e049      	b.n	8004cf0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8004c5c:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <SystemCoreClockUpdate+0x134>)
 8004c5e:	4a32      	ldr	r2, [pc, #200]	; (8004d28 <SystemCoreClockUpdate+0x138>)
 8004c60:	601a      	str	r2, [r3, #0]
      break;
 8004c62:	e045      	b.n	8004cf0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <SystemCoreClockUpdate+0x134>)
 8004c66:	4a31      	ldr	r2, [pc, #196]	; (8004d2c <SystemCoreClockUpdate+0x13c>)
 8004c68:	601a      	str	r2, [r3, #0]
      break;
 8004c6a:	e041      	b.n	8004cf0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	091b      	lsrs	r3, r3, #4
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	3301      	adds	r3, #1
 8004c86:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d105      	bne.n	8004c9a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8004c8e:	4a26      	ldr	r2, [pc, #152]	; (8004d28 <SystemCoreClockUpdate+0x138>)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e00d      	b.n	8004cb6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d105      	bne.n	8004cac <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <SystemCoreClockUpdate+0x13c>)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e004      	b.n	8004cb6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0f5b      	lsrs	r3, r3, #29
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <SystemCoreClockUpdate+0x134>)
 8004ce4:	6013      	str	r3, [r2, #0]
      break;
 8004ce6:	e003      	b.n	8004cf0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8004ce8:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <SystemCoreClockUpdate+0x134>)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6013      	str	r3, [r2, #0]
      break;
 8004cee:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <SystemCoreClockUpdate+0x140>)
 8004cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d02:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <SystemCoreClockUpdate+0x134>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <SystemCoreClockUpdate+0x134>)
 8004d10:	6013      	str	r3, [r2, #0]

}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	0800dbec 	.word	0x0800dbec
 8004d24:	20000034 	.word	0x20000034
 8004d28:	00f42400 	.word	0x00f42400
 8004d2c:	01e84800 	.word	0x01e84800
 8004d30:	0800db8c 	.word	0x0800db8c

08004d34 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6053      	str	r3, [r2, #4]
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	e0042000 	.word	0xe0042000

08004d54 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a04      	ldr	r2, [pc, #16]	; (8004d70 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004d5e:	f043 0302 	orr.w	r3, r3, #2
 8004d62:	6053      	str	r3, [r2, #4]
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e0042000 	.word	0xe0042000

08004d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_Init+0x3c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <HAL_Init+0x3c>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d8a:	2003      	movs	r0, #3
 8004d8c:	f000 f9be 	bl	800510c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d90:	2000      	movs	r0, #0
 8004d92:	f000 f80f 	bl	8004db4 <HAL_InitTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	71fb      	strb	r3, [r7, #7]
 8004da0:	e001      	b.n	8004da6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004da2:	f7fd f8e3 	bl	8001f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004da6:	79fb      	ldrb	r3, [r7, #7]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	58004000 	.word	0x58004000

08004db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <HAL_InitTick+0x6c>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d024      	beq.n	8004e12 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004dc8:	f001 ffce 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <HAL_InitTick+0x6c>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f9d4 	bl	800518e <HAL_SYSTICK_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10f      	bne.n	8004e0c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b0f      	cmp	r3, #15
 8004df0:	d809      	bhi.n	8004e06 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004df2:	2200      	movs	r2, #0
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfa:	f000 f992 	bl	8005122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_InitTick+0x70>)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e007      	b.n	8004e16 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e004      	b.n	8004e16 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	e001      	b.n	8004e16 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	2000003c 	.word	0x2000003c
 8004e24:	20000038 	.word	0x20000038

08004e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_IncTick+0x20>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_IncTick+0x24>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4413      	add	r3, r2
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_IncTick+0x24>)
 8004e3a:	6013      	str	r3, [r2, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	2000003c 	.word	0x2000003c
 8004e4c:	20001664 	.word	0x20001664

08004e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return uwTick;
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <HAL_GetTick+0x14>)
 8004e56:	681b      	ldr	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20001664 	.word	0x20001664

08004e68 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_GetTickPrio+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000038 	.word	0x20000038

08004e80 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_GetTickFreq+0x14>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2000003c 	.word	0x2000003c

08004e98 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004e9c:	f7ff ff4a 	bl	8004d34 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004ea0:	bf00      	nop
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004ea8:	f7ff ff54 	bl	8004d54 <LL_DBGMCU_EnableDBGStopMode>
}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ee2:	4a04      	ldr	r2, [pc, #16]	; (8004ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	60d3      	str	r3, [r2, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004efc:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <__NVIC_GetPriorityGrouping+0x18>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	0a1b      	lsrs	r3, r3, #8
 8004f02:	f003 0307 	and.w	r3, r3, #7
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	db0b      	blt.n	8004f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	f003 021f 	and.w	r2, r3, #31
 8004f2c:	4907      	ldr	r1, [pc, #28]	; (8004f4c <__NVIC_EnableIRQ+0x38>)
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2001      	movs	r0, #1
 8004f36:	fa00 f202 	lsl.w	r2, r0, r2
 8004f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e100 	.word	0xe000e100

08004f50 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	db10      	blt.n	8004f84 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	f003 021f 	and.w	r2, r3, #31
 8004f68:	4909      	ldr	r1, [pc, #36]	; (8004f90 <__NVIC_DisableIRQ+0x40>)
 8004f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2001      	movs	r0, #1
 8004f72:	fa00 f202 	lsl.w	r2, r0, r2
 8004f76:	3320      	adds	r3, #32
 8004f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f80:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	e000e100 	.word	0xe000e100

08004f94 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db0c      	blt.n	8004fc0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	4907      	ldr	r1, [pc, #28]	; (8004fcc <__NVIC_SetPendingIRQ+0x38>)
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fba:	3340      	adds	r3, #64	; 0x40
 8004fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	e000e100 	.word	0xe000e100

08004fd0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	db0c      	blt.n	8004ffc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	4907      	ldr	r1, [pc, #28]	; (8005008 <__NVIC_ClearPendingIRQ+0x38>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff6:	3360      	adds	r3, #96	; 0x60
 8004ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	e000e100 	.word	0xe000e100

0800500c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	6039      	str	r1, [r7, #0]
 8005016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501c:	2b00      	cmp	r3, #0
 800501e:	db0a      	blt.n	8005036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	490c      	ldr	r1, [pc, #48]	; (8005058 <__NVIC_SetPriority+0x4c>)
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	0112      	lsls	r2, r2, #4
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	440b      	add	r3, r1
 8005030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005034:	e00a      	b.n	800504c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4908      	ldr	r1, [pc, #32]	; (800505c <__NVIC_SetPriority+0x50>)
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	3b04      	subs	r3, #4
 8005044:	0112      	lsls	r2, r2, #4
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	440b      	add	r3, r1
 800504a:	761a      	strb	r2, [r3, #24]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000e100 	.word	0xe000e100
 800505c:	e000ed00 	.word	0xe000ed00

08005060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	; 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f1c3 0307 	rsb	r3, r3, #7
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf28      	it	cs
 800507e:	2304      	movcs	r3, #4
 8005080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3304      	adds	r3, #4
 8005086:	2b06      	cmp	r3, #6
 8005088:	d902      	bls.n	8005090 <NVIC_EncodePriority+0x30>
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3b03      	subs	r3, #3
 800508e:	e000      	b.n	8005092 <NVIC_EncodePriority+0x32>
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005094:	f04f 32ff 	mov.w	r2, #4294967295
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43da      	mvns	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	401a      	ands	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a8:	f04f 31ff 	mov.w	r1, #4294967295
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	43d9      	mvns	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b8:	4313      	orrs	r3, r2
         );
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3724      	adds	r7, #36	; 0x24
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d8:	d301      	bcc.n	80050de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050da:	2301      	movs	r3, #1
 80050dc:	e00f      	b.n	80050fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <SysTick_Config+0x40>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050e6:	210f      	movs	r1, #15
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ec:	f7ff ff8e 	bl	800500c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <SysTick_Config+0x40>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <SysTick_Config+0x40>)
 80050f8:	2207      	movs	r2, #7
 80050fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	e000e010 	.word	0xe000e010

0800510c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fecb 	bl	8004eb0 <__NVIC_SetPriorityGrouping>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b086      	sub	sp, #24
 8005126:	af00      	add	r7, sp, #0
 8005128:	4603      	mov	r3, r0
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005130:	f7ff fee2 	bl	8004ef8 <__NVIC_GetPriorityGrouping>
 8005134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	6978      	ldr	r0, [r7, #20]
 800513c:	f7ff ff90 	bl	8005060 <NVIC_EncodePriority>
 8005140:	4602      	mov	r2, r0
 8005142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff ff5f 	bl	800500c <__NVIC_SetPriority>
}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fed5 	bl	8004f14 <__NVIC_EnableIRQ>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	4603      	mov	r3, r0
 800517a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800517c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fee5 	bl	8004f50 <__NVIC_DisableIRQ>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff ff96 	bl	80050c8 <SysTick_Config>
 800519c:	4603      	mov	r3, r0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	4603      	mov	r3, r0
 80051ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80051b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff feed 	bl	8004f94 <__NVIC_SetPendingIRQ>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	4603      	mov	r3, r0
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80051cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fefd 	bl	8004fd0 <__NVIC_ClearPendingIRQ>
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e08e      	b.n	8005310 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_DMA_Init+0x138>)
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d80f      	bhi.n	800521e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	4b45      	ldr	r3, [pc, #276]	; (800531c <HAL_DMA_Init+0x13c>)
 8005206:	4413      	add	r3, r2
 8005208:	4a45      	ldr	r2, [pc, #276]	; (8005320 <HAL_DMA_Init+0x140>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	091b      	lsrs	r3, r3, #4
 8005210:	009a      	lsls	r2, r3, #2
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a42      	ldr	r2, [pc, #264]	; (8005324 <HAL_DMA_Init+0x144>)
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
 800521c:	e00e      	b.n	800523c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	4b40      	ldr	r3, [pc, #256]	; (8005328 <HAL_DMA_Init+0x148>)
 8005226:	4413      	add	r3, r2
 8005228:	4a3d      	ldr	r2, [pc, #244]	; (8005320 <HAL_DMA_Init+0x140>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	091b      	lsrs	r3, r3, #4
 8005230:	009a      	lsls	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a3c      	ldr	r2, [pc, #240]	; (800532c <HAL_DMA_Init+0x14c>)
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa16 	bl	80056c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529c:	d102      	bne.n	80052a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80052b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_DMA_Init+0x106>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d80c      	bhi.n	80052e6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa35 	bl	800573c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052e2:	605a      	str	r2, [r3, #4]
 80052e4:	e008      	b.n	80052f8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40020407 	.word	0x40020407
 800531c:	bffdfff8 	.word	0xbffdfff8
 8005320:	cccccccd 	.word	0xcccccccd
 8005324:	40020000 	.word	0x40020000
 8005328:	bffdfbf8 	.word	0xbffdfbf8
 800532c:	40020400 	.word	0x40020400

08005330 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_DMA_Start_IT+0x20>
 800534c:	2302      	movs	r3, #2
 800534e:	e066      	b.n	800541e <HAL_DMA_Start_IT+0xee>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d155      	bne.n	8005410 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f95a 	bl	8005642 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 020e 	orr.w	r2, r2, #14
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e00f      	b.n	80053c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 020a 	orr.w	r2, r2, #10
 80053c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e005      	b.n	800541c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005418:	2302      	movs	r3, #2
 800541a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800541c:	7dfb      	ldrb	r3, [r7, #23]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d005      	beq.n	800544a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2204      	movs	r2, #4
 8005442:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	73fb      	strb	r3, [r7, #15]
 8005448:	e047      	b.n	80054da <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 020e 	bic.w	r2, r2, #14
 8005458:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f003 021c 	and.w	r2, r3, #28
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2101      	movs	r1, #1
 8005488:	fa01 f202 	lsl.w	r2, r1, r2
 800548c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005496:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00c      	beq.n	80054ba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    }
  }
  return status;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	f003 031c 	and.w	r3, r3, #28
 8005504:	2204      	movs	r2, #4
 8005506:	409a      	lsls	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d026      	beq.n	800555e <HAL_DMA_IRQHandler+0x7a>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d021      	beq.n	800555e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0204 	bic.w	r2, r2, #4
 8005536:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f003 021c 	and.w	r2, r3, #28
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2104      	movs	r1, #4
 8005546:	fa01 f202 	lsl.w	r2, r1, r2
 800554a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	2b00      	cmp	r3, #0
 8005552:	d071      	beq.n	8005638 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800555c:	e06c      	b.n	8005638 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	f003 031c 	and.w	r3, r3, #28
 8005566:	2202      	movs	r2, #2
 8005568:	409a      	lsls	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02e      	beq.n	80055d0 <HAL_DMA_IRQHandler+0xec>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d029      	beq.n	80055d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 020a 	bic.w	r2, r2, #10
 8005598:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	f003 021c 	and.w	r2, r3, #28
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	2102      	movs	r1, #2
 80055b0:	fa01 f202 	lsl.w	r2, r1, r2
 80055b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d038      	beq.n	8005638 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055ce:	e033      	b.n	8005638 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	f003 031c 	and.w	r3, r3, #28
 80055d8:	2208      	movs	r2, #8
 80055da:	409a      	lsls	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02a      	beq.n	800563a <HAL_DMA_IRQHandler+0x156>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d025      	beq.n	800563a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 020e 	bic.w	r2, r2, #14
 80055fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f003 021c 	and.w	r2, r3, #28
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2101      	movs	r1, #1
 800560c:	fa01 f202 	lsl.w	r2, r1, r2
 8005610:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005638:	bf00      	nop
 800563a:	bf00      	nop
}
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005658:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	f003 021c 	and.w	r2, r3, #28
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	2101      	movs	r1, #1
 800567a:	fa01 f202 	lsl.w	r2, r1, r2
 800567e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b10      	cmp	r3, #16
 800568e:	d108      	bne.n	80056a2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056a0:	e007      	b.n	80056b2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	60da      	str	r2, [r3, #12]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b17      	ldr	r3, [pc, #92]	; (800572c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d80a      	bhi.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6493      	str	r3, [r2, #72]	; 0x48
 80056e8:	e007      	b.n	80056fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	009a      	lsls	r2, r3, #2
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056f4:	4413      	add	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	3b08      	subs	r3, #8
 8005702:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005710:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	2201      	movs	r2, #1
 800571a:	409a      	lsls	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40020407 	.word	0x40020407
 8005730:	4002081c 	.word	0x4002081c
 8005734:	cccccccd 	.word	0xcccccccd
 8005738:	40020880 	.word	0x40020880

0800573c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800574c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	461a      	mov	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005760:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3b01      	subs	r3, #1
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2201      	movs	r2, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	1000823f 	.word	0x1000823f
 8005784:	40020940 	.word	0x40020940

08005788 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d12b      	bne.n	80057f6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_DMAEx_ConfigMuxSync+0x24>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e025      	b.n	80057f8 <HAL_DMAEx_ConfigMuxSync+0x70>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 80057bc:	4013      	ands	r3, r2
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	6811      	ldr	r1, [r2, #0]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	68d2      	ldr	r2, [r2, #12]
 80057c6:	3a01      	subs	r2, #1
 80057c8:	04d2      	lsls	r2, r2, #19
 80057ca:	4311      	orrs	r1, r2
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	6852      	ldr	r2, [r2, #4]
 80057d0:	4311      	orrs	r1, r2
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	7a12      	ldrb	r2, [r2, #8]
 80057d6:	0412      	lsls	r2, r2, #16
 80057d8:	4311      	orrs	r1, r2
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	7a52      	ldrb	r2, [r2, #9]
 80057de:	0252      	lsls	r2, r2, #9
 80057e0:	4311      	orrs	r1, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057e6:	430b      	orrs	r3, r1
 80057e8:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e000      	b.n	80057f8 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	e000fdff 	.word	0xe000fdff

08005808 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005816:	e14c      	b.n	8005ab2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	2101      	movs	r1, #1
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 813e 	beq.w	8005aac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d00b      	beq.n	8005850 <HAL_GPIO_Init+0x48>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d007      	beq.n	8005850 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005844:	2b11      	cmp	r3, #17
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b12      	cmp	r3, #18
 800584e:	d130      	bne.n	80058b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2203      	movs	r2, #3
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005886:	2201      	movs	r2, #1
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	f003 0201 	and.w	r2, r3, #1
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	2203      	movs	r2, #3
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4013      	ands	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_Init+0xea>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b12      	cmp	r3, #18
 80058f0:	d123      	bne.n	800593a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	08da      	lsrs	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3208      	adds	r2, #8
 80058fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	220f      	movs	r2, #15
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43db      	mvns	r3, r3
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4013      	ands	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	08da      	lsrs	r2, r3, #3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3208      	adds	r2, #8
 8005934:	6939      	ldr	r1, [r7, #16]
 8005936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2203      	movs	r2, #3
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 0203 	and.w	r2, r3, #3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8098 	beq.w	8005aac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800597c:	4a54      	ldr	r2, [pc, #336]	; (8005ad0 <HAL_GPIO_Init+0x2c8>)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	3302      	adds	r3, #2
 8005984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	220f      	movs	r2, #15
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4013      	ands	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059a6:	d019      	beq.n	80059dc <HAL_GPIO_Init+0x1d4>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a4a      	ldr	r2, [pc, #296]	; (8005ad4 <HAL_GPIO_Init+0x2cc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <HAL_GPIO_Init+0x1d0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a49      	ldr	r2, [pc, #292]	; (8005ad8 <HAL_GPIO_Init+0x2d0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00d      	beq.n	80059d4 <HAL_GPIO_Init+0x1cc>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a48      	ldr	r2, [pc, #288]	; (8005adc <HAL_GPIO_Init+0x2d4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <HAL_GPIO_Init+0x1c8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a47      	ldr	r2, [pc, #284]	; (8005ae0 <HAL_GPIO_Init+0x2d8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <HAL_GPIO_Init+0x1c4>
 80059c8:	2304      	movs	r3, #4
 80059ca:	e008      	b.n	80059de <HAL_GPIO_Init+0x1d6>
 80059cc:	2307      	movs	r3, #7
 80059ce:	e006      	b.n	80059de <HAL_GPIO_Init+0x1d6>
 80059d0:	2303      	movs	r3, #3
 80059d2:	e004      	b.n	80059de <HAL_GPIO_Init+0x1d6>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e002      	b.n	80059de <HAL_GPIO_Init+0x1d6>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <HAL_GPIO_Init+0x1d6>
 80059dc:	2300      	movs	r3, #0
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	f002 0203 	and.w	r2, r2, #3
 80059e4:	0092      	lsls	r2, r2, #2
 80059e6:	4093      	lsls	r3, r2
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059ee:	4938      	ldr	r1, [pc, #224]	; (8005ad0 <HAL_GPIO_Init+0x2c8>)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	3302      	adds	r3, #2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059fc:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 80059fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a22:	4a30      	ldr	r2, [pc, #192]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005a2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a50:	4a24      	ldr	r2, [pc, #144]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a58:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4013      	ands	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005aa6:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <HAL_GPIO_Init+0x2dc>)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f47f aeab 	bne.w	8005818 <HAL_GPIO_Init+0x10>
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	48000400 	.word	0x48000400
 8005ad8:	48000800 	.word	0x48000800
 8005adc:	48000c00 	.word	0x48000c00
 8005ae0:	48001000 	.word	0x48001000
 8005ae4:	58000800 	.word	0x58000800

08005ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	807b      	strh	r3, [r7, #2]
 8005af4:	4613      	mov	r3, r2
 8005af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005af8:	787b      	ldrb	r3, [r7, #1]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b04:	e002      	b.n	8005b0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d006      	beq.n	8005b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b2e:	4a05      	ldr	r2, [pc, #20]	; (8005b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fa ff58 	bl	80009ec <HAL_GPIO_EXTI_Callback>
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	58000800 	.word	0x58000800

08005b48 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <HAL_HSEM_IRQHandler+0x30>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <HAL_HSEM_IRQHandler+0x30>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <HAL_HSEM_IRQHandler+0x30>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005b62:	4a05      	ldr	r2, [pc, #20]	; (8005b78 <HAL_HSEM_IRQHandler+0x30>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f807 	bl	8005b7c <HAL_HSEM_FreeCallback>
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	58001500 	.word	0x58001500

08005b7c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a04      	ldr	r2, [pc, #16]	; (8005bac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9e:	6013      	str	r3, [r2, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	58000400 	.word	0x58000400

08005bb0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	58000400 	.word	0x58000400

08005bcc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bde:	d101      	bne.n	8005be4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <LL_RCC_HSE_EnableBypass>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c02:	6013      	str	r3, [r2, #0]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <LL_RCC_HSE_DisableBypass>:
{
 8005c0e:	b480      	push	{r7}
 8005c10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c20:	6013      	str	r3, [r2, #0]
}
 8005c22:	bf00      	nop
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_RCC_HSE_Enable>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c3e:	6013      	str	r3, [r2, #0]
}
 8005c40:	bf00      	nop
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <LL_RCC_HSE_Disable>:
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5c:	6013      	str	r3, [r2, #0]
}
 8005c5e:	bf00      	nop
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <LL_RCC_HSE_IsReady>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c7a:	d101      	bne.n	8005c80 <LL_RCC_HSE_IsReady+0x18>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <LL_RCC_HSE_IsReady+0x1a>
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_HSI_Enable>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <LL_RCC_HSI_Disable>:
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cbc:	6013      	str	r3, [r2, #0]
}
 8005cbe:	bf00      	nop
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <LL_RCC_HSI_IsReady>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cda:	d101      	bne.n	8005ce0 <LL_RCC_HSI_IsReady+0x18>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <LL_RCC_HSI_IsReady+0x1a>
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_RCC_HSI_SetCalibTrimming>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d06:	4313      	orrs	r3, r2
 8005d08:	604b      	str	r3, [r1, #4]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <LL_RCC_HSI48_Enable>:
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d2e:	bf00      	nop
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <LL_RCC_HSI48_Disable>:
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d50:	bf00      	nop
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_HSI48_IsReady>:
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d101      	bne.n	8005d72 <LL_RCC_HSI48_IsReady+0x18>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <LL_RCC_HSI48_IsReady+0x1a>
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <LL_RCC_LSE_Enable>:
{
 8005d7e:	b480      	push	{r7}
 8005d80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d96:	bf00      	nop
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_RCC_LSE_Disable>:
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <LL_RCC_LSE_EnableBypass>:
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_RCC_LSE_DisableBypass>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df4:	f023 0304 	bic.w	r3, r3, #4
 8005df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dfc:	bf00      	nop
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <LL_RCC_LSE_IsReady>:
{
 8005e06:	b480      	push	{r7}
 8005e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d101      	bne.n	8005e1e <LL_RCC_LSE_IsReady+0x18>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <LL_RCC_LSE_IsReady+0x1a>
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <LL_RCC_LSI1_Enable>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <LL_RCC_LSI1_Disable>:
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <LL_RCC_LSI1_IsReady>:
{
 8005e6e:	b480      	push	{r7}
 8005e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d101      	bne.n	8005e86 <LL_RCC_LSI1_IsReady+0x18>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <LL_RCC_LSI1_IsReady+0x1a>
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <LL_RCC_LSI2_Enable>:
{
 8005e92:	b480      	push	{r7}
 8005e94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea2:	f043 0304 	orr.w	r3, r3, #4
 8005ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005eaa:	bf00      	nop
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_RCC_LSI2_Disable>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec4:	f023 0304 	bic.w	r3, r3, #4
 8005ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <LL_RCC_LSI2_IsReady>:
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d101      	bne.n	8005eee <LL_RCC_LSI2_IsReady+0x18>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <LL_RCC_LSI2_IsReady+0x1a>
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <LL_RCC_LSI2_SetTrimming>:
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <LL_RCC_MSI_Enable>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	6013      	str	r3, [r2, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_RCC_MSI_Disable>:
{
 8005f46:	b480      	push	{r7}
 8005f48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	6013      	str	r3, [r2, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_RCC_MSI_IsReady>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d101      	bne.n	8005f7a <LL_RCC_MSI_IsReady+0x16>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <LL_RCC_MSI_IsReady+0x18>
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <LL_RCC_MSI_SetRange>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	600b      	str	r3, [r1, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <LL_RCC_MSI_GetRange>:
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2bb0      	cmp	r3, #176	; 0xb0
 8005fc4:	d901      	bls.n	8005fca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005fc6:	23b0      	movs	r3, #176	; 0xb0
 8005fc8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005fca:	687b      	ldr	r3, [r7, #4]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	604b      	str	r3, [r1, #4]
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <LL_RCC_SetSysClkSource>:
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800600a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f023 0203 	bic.w	r2, r3, #3
 8006014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <LL_RCC_GetSysClkSource>:
{
 800602a:	b480      	push	{r7}
 800602c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800602e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 030c 	and.w	r3, r3, #12
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <LL_RCC_SetAHBPrescaler>:
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4313      	orrs	r3, r2
 800605c:	608b      	str	r3, [r1, #8]
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <LL_C2_RCC_SetAHBPrescaler>:
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006076:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800607a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800607e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <LL_RCC_SetAHB4Prescaler>:
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060a6:	f023 020f 	bic.w	r2, r3, #15
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_RCC_SetAPB1Prescaler>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80060cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4313      	orrs	r3, r2
 80060de:	608b      	str	r3, [r1, #8]
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_RCC_SetAPB2Prescaler>:
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80060f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4313      	orrs	r3, r2
 8006106:	608b      	str	r3, [r1, #8]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <LL_RCC_GetAHBPrescaler>:
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <LL_RCC_GetAHB4Prescaler>:
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006134:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800613e:	4618      	mov	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_RCC_GetAPB1Prescaler>:
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006156:	4618      	mov	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_GetAPB2Prescaler>:
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800616e:	4618      	mov	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_RCC_PLL_Enable>:
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800617c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800618a:	6013      	str	r3, [r2, #0]
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <LL_RCC_PLL_Disable>:
{
 8006196:	b480      	push	{r7}
 8006198:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800619a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061a8:	6013      	str	r3, [r2, #0]
}
 80061aa:	bf00      	nop
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <LL_RCC_PLL_IsReady>:
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061c6:	d101      	bne.n	80061cc <LL_RCC_PLL_IsReady+0x18>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <LL_RCC_PLL_IsReady+0x1a>
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <LL_RCC_PLL_GetN>:
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_PLL_GetR>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006200:	4618      	mov	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <LL_RCC_PLL_GetDivider>:
{
 800620a:	b480      	push	{r7}
 800620c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800620e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006218:	4618      	mov	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <LL_RCC_PLL_GetMainSource>:
{
 8006222:	b480      	push	{r7}
 8006224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0303 	and.w	r3, r3, #3
}
 8006230:	4618      	mov	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <LL_RCC_IsActiveFlag_HPRE>:
{
 800623a:	b480      	push	{r7}
 800623c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624c:	d101      	bne.n	8006252 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800625e:	b480      	push	{r7}
 8006260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006266:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800626a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006272:	d101      	bne.n	8006278 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d101      	bne.n	800629e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <LL_RCC_IsActiveFlag_PPRE1>:
{
 80062aa:	b480      	push	{r7}
 80062ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80062ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062bc:	d101      	bne.n	80062c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <LL_RCC_IsActiveFlag_PPRE2>:
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062e0:	d101      	bne.n	80062e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
	...

080062f4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b08d      	sub	sp, #52	; 0x34
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e386      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 808f 	beq.w	8006432 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006314:	f7ff fe89 	bl	800602a <LL_RCC_GetSysClkSource>
 8006318:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800631a:	f7ff ff82 	bl	8006222 <LL_RCC_PLL_GetMainSource>
 800631e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <HAL_RCC_OscConfig+0x3e>
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d149      	bne.n	80063c0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	2b01      	cmp	r3, #1
 8006330:	d146      	bne.n	80063c0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006332:	f7ff fe17 	bl	8005f64 <LL_RCC_MSI_IsReady>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_RCC_OscConfig+0x54>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e365      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800634c:	f7ff fe2f 	bl	8005fae <LL_RCC_MSI_GetRange>
 8006350:	4603      	mov	r3, r0
 8006352:	429c      	cmp	r4, r3
 8006354:	d914      	bls.n	8006380 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fd44 	bl	8006de8 <RCC_SetFlashLatencyFromMSIRange>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e354      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fe09 	bl	8005f86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fe2d 	bl	8005fd8 <LL_RCC_MSI_SetCalibTrimming>
 800637e:	e013      	b.n	80063a8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fdfe 	bl	8005f86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fe22 	bl	8005fd8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fd25 	bl	8006de8 <RCC_SetFlashLatencyFromMSIRange>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e335      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80063a8:	f7fe fc22 	bl	8004bf0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063ac:	4bb4      	ldr	r3, [pc, #720]	; (8006680 <HAL_RCC_OscConfig+0x38c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe fcff 	bl	8004db4 <HAL_InitTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d039      	beq.n	8006430 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e329      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01e      	beq.n	8006406 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063c8:	f7ff fdae 	bl	8005f28 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063cc:	f7fe fd40 	bl	8004e50 <HAL_GetTick>
 80063d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063d4:	f7fe fd3c 	bl	8004e50 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e316      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 80063e6:	f7ff fdbd 	bl	8005f64 <LL_RCC_MSI_IsReady>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f1      	beq.n	80063d4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff fdc6 	bl	8005f86 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fdea 	bl	8005fd8 <LL_RCC_MSI_SetCalibTrimming>
 8006404:	e015      	b.n	8006432 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006406:	f7ff fd9e 	bl	8005f46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800640a:	f7fe fd21 	bl	8004e50 <HAL_GetTick>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006412:	f7fe fd1d 	bl	8004e50 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e2f7      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006424:	f7ff fd9e 	bl	8005f64 <LL_RCC_MSI_IsReady>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f1      	bne.n	8006412 <HAL_RCC_OscConfig+0x11e>
 800642e:	e000      	b.n	8006432 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006430:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d05a      	beq.n	80064f4 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643e:	f7ff fdf4 	bl	800602a <LL_RCC_GetSysClkSource>
 8006442:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006444:	f7ff feed 	bl	8006222 <LL_RCC_PLL_GetMainSource>
 8006448:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d005      	beq.n	800645c <HAL_RCC_OscConfig+0x168>
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	2b0c      	cmp	r3, #12
 8006454:	d10d      	bne.n	8006472 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d10a      	bne.n	8006472 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800645c:	f7ff fc04 	bl	8005c68 <LL_RCC_HSE_IsReady>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d045      	beq.n	80064f2 <HAL_RCC_OscConfig+0x1fe>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d141      	bne.n	80064f2 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e2d0      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647a:	d102      	bne.n	8006482 <HAL_RCC_OscConfig+0x18e>
 800647c:	f7ff fbd6 	bl	8005c2c <LL_RCC_HSE_Enable>
 8006480:	e00d      	b.n	800649e <HAL_RCC_OscConfig+0x1aa>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800648a:	d104      	bne.n	8006496 <HAL_RCC_OscConfig+0x1a2>
 800648c:	f7ff fbb0 	bl	8005bf0 <LL_RCC_HSE_EnableBypass>
 8006490:	f7ff fbcc 	bl	8005c2c <LL_RCC_HSE_Enable>
 8006494:	e003      	b.n	800649e <HAL_RCC_OscConfig+0x1aa>
 8006496:	f7ff fbd8 	bl	8005c4a <LL_RCC_HSE_Disable>
 800649a:	f7ff fbb8 	bl	8005c0e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d012      	beq.n	80064cc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a6:	f7fe fcd3 	bl	8004e50 <HAL_GetTick>
 80064aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ae:	f7fe fccf 	bl	8004e50 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b64      	cmp	r3, #100	; 0x64
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e2a9      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80064c0:	f7ff fbd2 	bl	8005c68 <LL_RCC_HSE_IsReady>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f1      	beq.n	80064ae <HAL_RCC_OscConfig+0x1ba>
 80064ca:	e013      	b.n	80064f4 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fe fcc0 	bl	8004e50 <HAL_GetTick>
 80064d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fe fcbc 	bl	8004e50 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e296      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 80064e6:	f7ff fbbf 	bl	8005c68 <LL_RCC_HSE_IsReady>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f1      	bne.n	80064d4 <HAL_RCC_OscConfig+0x1e0>
 80064f0:	e000      	b.n	80064f4 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d051      	beq.n	80065a4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006500:	f7ff fd93 	bl	800602a <LL_RCC_GetSysClkSource>
 8006504:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006506:	f7ff fe8c 	bl	8006222 <LL_RCC_PLL_GetMainSource>
 800650a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b04      	cmp	r3, #4
 8006510:	d005      	beq.n	800651e <HAL_RCC_OscConfig+0x22a>
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b0c      	cmp	r3, #12
 8006516:	d113      	bne.n	8006540 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d110      	bne.n	8006540 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800651e:	f7ff fbd3 	bl	8005cc8 <LL_RCC_HSI_IsReady>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_OscConfig+0x240>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e26f      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fbd7 	bl	8005cec <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800653e:	e031      	b.n	80065a4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d019      	beq.n	800657c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006548:	f7ff fba0 	bl	8005c8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fe fc80 	bl	8004e50 <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006554:	f7fe fc7c 	bl	8004e50 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e256      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006566:	f7ff fbaf 	bl	8005cc8 <LL_RCC_HSI_IsReady>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f1      	beq.n	8006554 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff fbb9 	bl	8005cec <LL_RCC_HSI_SetCalibTrimming>
 800657a:	e013      	b.n	80065a4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800657c:	f7ff fb95 	bl	8005caa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fe fc66 	bl	8004e50 <HAL_GetTick>
 8006584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006588:	f7fe fc62 	bl	8004e50 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e23c      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 800659a:	f7ff fb95 	bl	8005cc8 <LL_RCC_HSI_IsReady>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1f1      	bne.n	8006588 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80a2 	beq.w	8006702 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d075      	beq.n	80066b2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d046      	beq.n	8006660 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80065d2:	f7ff fc4c 	bl	8005e6e <LL_RCC_LSI1_IsReady>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d113      	bne.n	8006604 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80065dc:	f7ff fc25 	bl	8005e2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065e0:	f7fe fc36 	bl	8004e50 <HAL_GetTick>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065e8:	f7fe fc32 	bl	8004e50 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e20c      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80065fa:	f7ff fc38 	bl	8005e6e <LL_RCC_LSI1_IsReady>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f1      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006604:	f7ff fc45 	bl	8005e92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fe fc22 	bl	8004e50 <HAL_GetTick>
 800660c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006610:	f7fe fc1e 	bl	8004e50 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b03      	cmp	r3, #3
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e1f8      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006622:	f7ff fc58 	bl	8005ed6 <LL_RCC_LSI2_IsReady>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f1      	beq.n	8006610 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fc62 	bl	8005efa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006636:	f7ff fc09 	bl	8005e4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663a:	f7fe fc09 	bl	8004e50 <HAL_GetTick>
 800663e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006642:	f7fe fc05 	bl	8004e50 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e1df      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006654:	f7ff fc0b 	bl	8005e6e <LL_RCC_LSI1_IsReady>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f1      	bne.n	8006642 <HAL_RCC_OscConfig+0x34e>
 800665e:	e050      	b.n	8006702 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006660:	f7ff fbe3 	bl	8005e2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fe fbf4 	bl	8004e50 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800666a:	e00b      	b.n	8006684 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800666c:	f7fe fbf0 	bl	8004e50 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d904      	bls.n	8006684 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e1ca      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
 800667e:	bf00      	nop
 8006680:	20000038 	.word	0x20000038
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006684:	f7ff fbf3 	bl	8005e6e <LL_RCC_LSI1_IsReady>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0ee      	beq.n	800666c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800668e:	f7ff fc11 	bl	8005eb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006694:	f7fe fbdc 	bl	8004e50 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e1b6      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80066a6:	f7ff fc16 	bl	8005ed6 <LL_RCC_LSI2_IsReady>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f1      	bne.n	8006694 <HAL_RCC_OscConfig+0x3a0>
 80066b0:	e027      	b.n	8006702 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80066b2:	f7ff fbff 	bl	8005eb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b6:	f7fe fbcb 	bl	8004e50 <HAL_GetTick>
 80066ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80066be:	f7fe fbc7 	bl	8004e50 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e1a1      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80066d0:	f7ff fc01 	bl	8005ed6 <LL_RCC_LSI2_IsReady>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f1      	bne.n	80066be <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80066da:	f7ff fbb7 	bl	8005e4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066de:	f7fe fbb7 	bl	8004e50 <HAL_GetTick>
 80066e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80066e6:	f7fe fbb3 	bl	8004e50 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e18d      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80066f8:	f7ff fbb9 	bl	8005e6e <LL_RCC_LSI1_IsReady>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f1      	bne.n	80066e6 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d05b      	beq.n	80067c6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800670e:	4bb5      	ldr	r3, [pc, #724]	; (80069e4 <HAL_RCC_OscConfig+0x6f0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	2b00      	cmp	r3, #0
 8006718:	d114      	bne.n	8006744 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800671a:	f7ff fa39 	bl	8005b90 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800671e:	f7fe fb97 	bl	8004e50 <HAL_GetTick>
 8006722:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006726:	f7fe fb93 	bl	8004e50 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e16d      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006738:	4baa      	ldr	r3, [pc, #680]	; (80069e4 <HAL_RCC_OscConfig+0x6f0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_RCC_OscConfig+0x45e>
 800674c:	f7ff fb17 	bl	8005d7e <LL_RCC_LSE_Enable>
 8006750:	e00c      	b.n	800676c <HAL_RCC_OscConfig+0x478>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b05      	cmp	r3, #5
 8006758:	d104      	bne.n	8006764 <HAL_RCC_OscConfig+0x470>
 800675a:	f7ff fb32 	bl	8005dc2 <LL_RCC_LSE_EnableBypass>
 800675e:	f7ff fb0e 	bl	8005d7e <LL_RCC_LSE_Enable>
 8006762:	e003      	b.n	800676c <HAL_RCC_OscConfig+0x478>
 8006764:	f7ff fb1c 	bl	8005da0 <LL_RCC_LSE_Disable>
 8006768:	f7ff fb3c 	bl	8005de4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d014      	beq.n	800679e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fe fb6c 	bl	8004e50 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800677a:	e00a      	b.n	8006792 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677c:	f7fe fb68 	bl	8004e50 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	; 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e140      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006792:	f7ff fb38 	bl	8005e06 <LL_RCC_LSE_IsReady>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ef      	beq.n	800677c <HAL_RCC_OscConfig+0x488>
 800679c:	e013      	b.n	80067c6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7fe fb57 	bl	8004e50 <HAL_GetTick>
 80067a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fe fb53 	bl	8004e50 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e12b      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80067bc:	f7ff fb23 	bl	8005e06 <LL_RCC_LSE_IsReady>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1ef      	bne.n	80067a6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d02c      	beq.n	800682c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067da:	f7ff fa9c 	bl	8005d16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067de:	f7fe fb37 	bl	8004e50 <HAL_GetTick>
 80067e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067e6:	f7fe fb33 	bl	8004e50 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e10d      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80067f8:	f7ff faaf 	bl	8005d5a <LL_RCC_HSI48_IsReady>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f1      	beq.n	80067e6 <HAL_RCC_OscConfig+0x4f2>
 8006802:	e013      	b.n	800682c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006804:	f7ff fa98 	bl	8005d38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006808:	f7fe fb22 	bl	8004e50 <HAL_GetTick>
 800680c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006810:	f7fe fb1e 	bl	8004e50 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e0f8      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006822:	f7ff fa9a 	bl	8005d5a <LL_RCC_HSI48_IsReady>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f1      	bne.n	8006810 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80ee 	beq.w	8006a12 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006836:	f7ff fbf8 	bl	800602a <LL_RCC_GetSysClkSource>
 800683a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800683c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	2b02      	cmp	r3, #2
 800684a:	f040 80af 	bne.w	80069ac <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 0203 	and.w	r2, r3, #3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	429a      	cmp	r2, r3
 800685a:	d123      	bne.n	80068a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d11c      	bne.n	80068a4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	0a1b      	lsrs	r3, r3, #8
 800686e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d114      	bne.n	80068a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d10d      	bne.n	80068a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006892:	429a      	cmp	r2, r3
 8006894:	d106      	bne.n	80068a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d05d      	beq.n	8006960 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b0c      	cmp	r3, #12
 80068a8:	d058      	beq.n	800695c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80068aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0ab      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068bc:	f7ff fc6b 	bl	8006196 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068c0:	f7fe fac6 	bl	8004e50 <HAL_GetTick>
 80068c4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fe fac2 	bl	8004e50 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e09c      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1ef      	bne.n	80068c8 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	4b3e      	ldr	r3, [pc, #248]	; (80069e8 <HAL_RCC_OscConfig+0x6f4>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068fa:	4311      	orrs	r1, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006900:	0212      	lsls	r2, r2, #8
 8006902:	4311      	orrs	r1, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006908:	4311      	orrs	r1, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800690e:	4311      	orrs	r1, r2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006914:	430a      	orrs	r2, r1
 8006916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800691a:	4313      	orrs	r3, r2
 800691c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800691e:	f7ff fc2b 	bl	8006178 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800692c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006930:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006932:	f7fe fa8d 	bl	8004e50 <HAL_GetTick>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800693a:	f7fe fa89 	bl	8004e50 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e063      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800694c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0ef      	beq.n	800693a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800695a:	e05a      	b.n	8006a12 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e059      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d151      	bne.n	8006a12 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800696e:	f7ff fc03 	bl	8006178 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006982:	f7fe fa65 	bl	8004e50 <HAL_GetTick>
 8006986:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800698a:	f7fe fa61 	bl	8004e50 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e03b      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800699c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ef      	beq.n	800698a <HAL_RCC_OscConfig+0x696>
 80069aa:	e032      	b.n	8006a12 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b0c      	cmp	r3, #12
 80069b0:	d02d      	beq.n	8006a0e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b2:	f7ff fbf0 	bl	8006196 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80069b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80069c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069d0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80069d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069da:	f7fe fa39 	bl	8004e50 <HAL_GetTick>
 80069de:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e0:	e00d      	b.n	80069fe <HAL_RCC_OscConfig+0x70a>
 80069e2:	bf00      	nop
 80069e4:	58000400 	.word	0x58000400
 80069e8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ec:	f7fe fa30 	bl	8004e50 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e00a      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ef      	bne.n	80069ec <HAL_RCC_OscConfig+0x6f8>
 8006a0c:	e001      	b.n	8006a12 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3734      	adds	r7, #52	; 0x34
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd90      	pop	{r4, r7, pc}

08006a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e12a      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a30:	4b97      	ldr	r3, [pc, #604]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d91b      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3e:	4b94      	ldr	r3, [pc, #592]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f023 0207 	bic.w	r2, r3, #7
 8006a46:	4992      	ldr	r1, [pc, #584]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4e:	f7fe f9ff 	bl	8004e50 <HAL_GetTick>
 8006a52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a56:	f7fe f9fb 	bl	8004e50 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e10e      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a68:	4b89      	ldr	r3, [pc, #548]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d1ef      	bne.n	8006a56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff fadb 	bl	8006042 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a8c:	f7fe f9e0 	bl	8004e50 <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a94:	f7fe f9dc 	bl	8004e50 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e0ef      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006aa6:	f7ff fbc8 	bl	800623a <LL_RCC_IsActiveFlag_HPRE>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f1      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d016      	beq.n	8006aea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fad2 	bl	800606a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ac6:	f7fe f9c3 	bl	8004e50 <HAL_GetTick>
 8006aca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ace:	f7fe f9bf 	bl	8004e50 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e0d2      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006ae0:	f7ff fbbd 	bl	800625e <LL_RCC_IsActiveFlag_C2HPRE>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f1      	beq.n	8006ace <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d016      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff facb 	bl	8006096 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b00:	f7fe f9a6 	bl	8004e50 <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b08:	f7fe f9a2 	bl	8004e50 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e0b5      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006b1a:	f7ff fbb3 	bl	8006284 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f1      	beq.n	8006b08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d016      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fac5 	bl	80060c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b3a:	f7fe f989 	bl	8004e50 <HAL_GetTick>
 8006b3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b42:	f7fe f985 	bl	8004e50 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e098      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006b54:	f7ff fba9 	bl	80062aa <LL_RCC_IsActiveFlag_PPRE1>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0f1      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d017      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff fabb 	bl	80060ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b76:	f7fe f96b 	bl	8004e50 <HAL_GetTick>
 8006b7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b7e:	f7fe f967 	bl	8004e50 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e07a      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b90:	f7ff fb9d 	bl	80062ce <LL_RCC_IsActiveFlag_PPRE2>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f1      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d043      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d106      	bne.n	8006bbc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006bae:	f7ff f85b 	bl	8005c68 <LL_RCC_HSE_IsReady>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11e      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e064      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d106      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006bc4:	f7ff faf6 	bl	80061b4 <LL_RCC_PLL_IsReady>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d113      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e059      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006bda:	f7ff f9c3 	bl	8005f64 <LL_RCC_MSI_IsReady>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e04e      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006be8:	f7ff f86e 	bl	8005cc8 <LL_RCC_HSI_IsReady>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e047      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fa01 	bl	8006002 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c00:	f7fe f926 	bl	8004e50 <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c06:	e00a      	b.n	8006c1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c08:	f7fe f922 	bl	8004e50 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e033      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1e:	f7ff fa04 	bl	800602a <LL_RCC_GetSysClkSource>
 8006c22:	4602      	mov	r2, r0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d1ec      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c2e:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d21b      	bcs.n	8006c74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3c:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f023 0207 	bic.w	r2, r3, #7
 8006c44:	4912      	ldr	r1, [pc, #72]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c4c:	f7fe f900 	bl	8004e50 <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c54:	f7fe f8fc 	bl	8004e50 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e00f      	b.n	8006c86 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c66:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <HAL_RCC_ClockConfig+0x274>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d1ef      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8006c74:	f7fd ffbc 	bl	8004bf0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006c78:	f7fe f8f6 	bl	8004e68 <HAL_GetTickPrio>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe f898 	bl	8004db4 <HAL_InitTick>
 8006c84:	4603      	mov	r3, r0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	58004000 	.word	0x58004000

08006c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c9a:	f7ff f9c6 	bl	800602a <LL_RCC_GetSysClkSource>
 8006c9e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006ca6:	f7ff f982 	bl	8005fae <LL_RCC_MSI_GetRange>
 8006caa:	4603      	mov	r3, r0
 8006cac:	091b      	lsrs	r3, r3, #4
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e04a      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d102      	bne.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cc2:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e044      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d10a      	bne.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006cce:	f7fe ff7d 	bl	8005bcc <LL_RCC_HSE_IsEnabledDiv2>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d102      	bne.n	8006cde <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006cd8:	4b21      	ldr	r3, [pc, #132]	; (8006d60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e039      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006cde:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	e036      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006ce4:	f7ff fa9d 	bl	8006222 <LL_RCC_PLL_GetMainSource>
 8006ce8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d002      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0x62>
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCC_GetSysClockFreq+0x68>
 8006cf4:	e00d      	b.n	8006d12 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006cf8:	60bb      	str	r3, [r7, #8]
        break;
 8006cfa:	e015      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006cfc:	f7fe ff66 	bl	8005bcc <LL_RCC_HSE_IsEnabledDiv2>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d102      	bne.n	8006d0c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006d08:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006d0a:	e00d      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006d0c:	4b15      	ldr	r3, [pc, #84]	; (8006d64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d0e:	60bb      	str	r3, [r7, #8]
        break;
 8006d10:	e00a      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006d12:	f7ff f94c 	bl	8005fae <LL_RCC_MSI_GetRange>
 8006d16:	4603      	mov	r3, r0
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	4a0f      	ldr	r2, [pc, #60]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d24:	60bb      	str	r3, [r7, #8]
        break;
 8006d26:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006d28:	f7ff fa56 	bl	80061d8 <LL_RCC_PLL_GetN>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	fb03 f402 	mul.w	r4, r3, r2
 8006d34:	f7ff fa69 	bl	800620a <LL_RCC_PLL_GetDivider>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	091b      	lsrs	r3, r3, #4
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006d42:	f7ff fa56 	bl	80061f2 <LL_RCC_PLL_GetR>
 8006d46:	4603      	mov	r3, r0
 8006d48:	0f5b      	lsrs	r3, r3, #29
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006d50:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd90      	pop	{r4, r7, pc}
 8006d5c:	0800dbec 	.word	0x0800dbec
 8006d60:	00f42400 	.word	0x00f42400
 8006d64:	01e84800 	.word	0x01e84800

08006d68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d68:	b598      	push	{r3, r4, r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006d6c:	f7ff ff92 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 8006d70:	4604      	mov	r4, r0
 8006d72:	f7ff f9cf 	bl	8006114 <LL_RCC_GetAHBPrescaler>
 8006d76:	4603      	mov	r3, r0
 8006d78:	091b      	lsrs	r3, r3, #4
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	4a03      	ldr	r2, [pc, #12]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x24>)
 8006d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd98      	pop	{r3, r4, r7, pc}
 8006d8c:	0800db8c 	.word	0x0800db8c

08006d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d90:	b598      	push	{r3, r4, r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d94:	f7ff ffe8 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006d98:	4604      	mov	r4, r0
 8006d9a:	f7ff f9d5 	bl	8006148 <LL_RCC_GetAPB1Prescaler>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	0a1b      	lsrs	r3, r3, #8
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dac:	f003 031f 	and.w	r3, r3, #31
 8006db0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd98      	pop	{r3, r4, r7, pc}
 8006db8:	0800dbcc 	.word	0x0800dbcc

08006dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dbc:	b598      	push	{r3, r4, r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006dc0:	f7ff ffd2 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	f7ff f9cb 	bl	8006160 <LL_RCC_GetAPB2Prescaler>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	0adb      	lsrs	r3, r3, #11
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	4a04      	ldr	r2, [pc, #16]	; (8006de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	bd98      	pop	{r3, r4, r7, pc}
 8006de4:	0800dbcc 	.word	0x0800dbcc

08006de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2bb0      	cmp	r3, #176	; 0xb0
 8006df4:	d903      	bls.n	8006dfe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006df6:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e007      	b.n	8006e0e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006e0e:	f7ff f98d 	bl	800612c <LL_RCC_GetAHB4Prescaler>
 8006e12:	4603      	mov	r3, r0
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e26:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	0c9c      	lsrs	r4, r3, #18
 8006e32:	f7fe febd 	bl	8005bb0 <HAL_PWREx_GetVoltageRange>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 f80c 	bl	8006e58 <RCC_SetFlashLatency>
 8006e40:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd90      	pop	{r4, r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	0800dbec 	.word	0x0800dbec
 8006e50:	0800db8c 	.word	0x0800db8c
 8006e54:	431bde83 	.word	0x431bde83

08006e58 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b093      	sub	sp, #76	; 0x4c
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006e62:	4b39      	ldr	r3, [pc, #228]	; (8006f48 <RCC_SetFlashLatency+0xf0>)
 8006e64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006e6e:	4a37      	ldr	r2, [pc, #220]	; (8006f4c <RCC_SetFlashLatency+0xf4>)
 8006e70:	f107 031c 	add.w	r3, r7, #28
 8006e74:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006e7a:	4b35      	ldr	r3, [pc, #212]	; (8006f50 <RCC_SetFlashLatency+0xf8>)
 8006e7c:	f107 040c 	add.w	r4, r7, #12
 8006e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006e86:	2300      	movs	r3, #0
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e90:	d11c      	bne.n	8006ecc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e92:	2300      	movs	r3, #0
 8006e94:	643b      	str	r3, [r7, #64]	; 0x40
 8006e96:	e015      	b.n	8006ec4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d808      	bhi.n	8006ebe <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006eba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006ebc:	e022      	b.n	8006f04 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d9e6      	bls.n	8006e98 <RCC_SetFlashLatency+0x40>
 8006eca:	e01b      	b.n	8006f04 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed0:	e015      	b.n	8006efe <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006eda:	4413      	add	r3, r2
 8006edc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d808      	bhi.n	8006ef8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006eee:	4413      	add	r3, r2
 8006ef0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006ef4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006ef6:	e005      	b.n	8006f04 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efa:	3301      	adds	r3, #1
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d9e6      	bls.n	8006ed2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006f04:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <RCC_SetFlashLatency+0xfc>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 0207 	bic.w	r2, r3, #7
 8006f0c:	4911      	ldr	r1, [pc, #68]	; (8006f54 <RCC_SetFlashLatency+0xfc>)
 8006f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f10:	4313      	orrs	r3, r2
 8006f12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f14:	f7fd ff9c 	bl	8004e50 <HAL_GetTick>
 8006f18:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006f1a:	e008      	b.n	8006f2e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006f1c:	f7fd ff98 	bl	8004e50 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e007      	b.n	8006f3e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <RCC_SetFlashLatency+0xfc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d1ef      	bne.n	8006f1c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	374c      	adds	r7, #76	; 0x4c
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd90      	pop	{r4, r7, pc}
 8006f46:	bf00      	nop
 8006f48:	0800da04 	.word	0x0800da04
 8006f4c:	0800da14 	.word	0x0800da14
 8006f50:	0800da20 	.word	0x0800da20
 8006f54:	58004000 	.word	0x58004000

08006f58 <LL_RCC_LSE_IsEnabled>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <LL_RCC_LSE_IsEnabled+0x18>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <LL_RCC_LSE_IsEnabled+0x1a>
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <LL_RCC_LSE_IsReady>:
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d101      	bne.n	8006f94 <LL_RCC_LSE_IsReady+0x18>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <LL_RCC_LSE_IsReady+0x1a>
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <LL_RCC_SetRFWKPClockSource>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <LL_RCC_SetSMPSClockSource>:
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	f023 0203 	bic.w	r2, r3, #3
 8006fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <LL_RCC_SetSMPSPrescaler>:
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4313      	orrs	r3, r2
 800700e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <LL_RCC_SetUSARTClockSource>:
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702c:	f023 0203 	bic.w	r2, r3, #3
 8007030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <LL_RCC_SetLPUARTClockSource>:
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800705c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <LL_RCC_SetI2CClockSource>:
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800707c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007080:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	091b      	lsrs	r3, r3, #4
 8007088:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800708c:	43db      	mvns	r3, r3
 800708e:	401a      	ands	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <LL_RCC_SetLPTIMClockSource>:
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80070b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	43db      	mvns	r3, r3
 80070c6:	401a      	ands	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	041b      	lsls	r3, r3, #16
 80070cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <LL_RCC_SetSAIClockSource>:
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80070ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <LL_RCC_SetRNGClockSource>:
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <LL_RCC_SetCLK48ClockSource>:
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800714e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <LL_RCC_SetUSBClockSource>:
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff ffe3 	bl	800713a <LL_RCC_SetCLK48ClockSource>
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <LL_RCC_SetADCClockSource>:
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <LL_RCC_SetRTCClockSource>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80071b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <LL_RCC_GetRTCClockSource>:
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <LL_RCC_ForceBackupDomainReset>:
{
 80071ee:	b480      	push	{r7}
 80071f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80071f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007206:	bf00      	nop
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007228:	bf00      	nop
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <LL_RCC_PLLSAI1_Enable>:
{
 8007232:	b480      	push	{r7}
 8007234:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007244:	6013      	str	r3, [r2, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <LL_RCC_PLLSAI1_Disable>:
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800725e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007262:	6013      	str	r3, [r2, #0]
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <LL_RCC_PLLSAI1_IsReady>:
{
 800726e:	b480      	push	{r7}
 8007270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800727c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007280:	d101      	bne.n	8007286 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b088      	sub	sp, #32
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800729a:	2300      	movs	r3, #0
 800729c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800729e:	2300      	movs	r3, #0
 80072a0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d033      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072b6:	d00c      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80072b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072bc:	d802      	bhi.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80072c2:	e017      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80072c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072c8:	d017      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x68>
 80072ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072ce:	d016      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80072d0:	e010      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80072d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072e0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80072e2:	e00d      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f947 	bl	800757c <RCCEx_PLLSAI1_ConfigNP>
 80072ee:	4603      	mov	r3, r0
 80072f0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80072f2:	e005      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	77fb      	strb	r3, [r7, #31]
        break;
 80072f8:	e002      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80072fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007300:	7ffb      	ldrb	r3, [r7, #31]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d105      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fee9 	bl	80070e2 <LL_RCC_SetSAIClockSource>
 8007310:	e001      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007312:	7ffb      	ldrb	r3, [r7, #31]
 8007314:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731e:	2b00      	cmp	r3, #0
 8007320:	d046      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007322:	f7ff ff57 	bl	80071d4 <LL_RCC_GetRTCClockSource>
 8007326:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	429a      	cmp	r2, r3
 8007330:	d03c      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007332:	f7fe fc2d 	bl	8005b90 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff31 	bl	80071a8 <LL_RCC_SetRTCClockSource>
 8007346:	e02e      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007350:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007352:	f7ff ff4c 	bl	80071ee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007356:	f7ff ff5b 	bl	8007210 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007372:	f7ff fdf1 	bl	8006f58 <LL_RCC_LSE_IsEnabled>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	d114      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800737c:	f7fd fd68 	bl	8004e50 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007382:	e00b      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007384:	f7fd fd64 	bl	8004e50 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007392:	4293      	cmp	r3, r2
 8007394:	d902      	bls.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	77fb      	strb	r3, [r7, #31]
              break;
 800739a:	e004      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800739c:	f7ff fdee 	bl	8006f7c <LL_RCC_LSE_IsReady>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d1ee      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80073a6:	7ffb      	ldrb	r3, [r7, #31]
 80073a8:	77bb      	strb	r3, [r7, #30]
 80073aa:	e001      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ac:	7ffb      	ldrb	r3, [r7, #31]
 80073ae:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fe2b 	bl	800701c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff fe36 	bl	8007048 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fe5e 	bl	80070ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fe53 	bl	80070ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fe2b 	bl	8007074 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fe20 	bl	8007074 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d022      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fe8e 	bl	8007166 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007452:	d107      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800745e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007462:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800746c:	d10b      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3304      	adds	r3, #4
 8007472:	4618      	mov	r0, r3
 8007474:	f000 f8dd 	bl	8007632 <RCCEx_PLLSAI1_ConfigNQ>
 8007478:	4603      	mov	r3, r0
 800747a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800747c:	7ffb      	ldrb	r3, [r7, #31]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8007482:	7ffb      	ldrb	r3, [r7, #31]
 8007484:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800748e:	2b00      	cmp	r3, #0
 8007490:	d02b      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749a:	d008      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a4:	d003      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d105      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x228>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fe2b 	bl	800710e <LL_RCC_SetRNGClockSource>
 80074b8:	e00a      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	2000      	movs	r0, #0
 80074c6:	f7ff fe22 	bl	800710e <LL_RCC_SetRNGClockSource>
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fe35 	bl	800713a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80074d8:	d107      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80074da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074e8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d022      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff fe3e 	bl	800717c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007508:	d107      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800750a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007518:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007522:	d10b      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3304      	adds	r3, #4
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f8dd 	bl	80076e8 <RCCEx_PLLSAI1_ConfigNR>
 800752e:	4603      	mov	r3, r0
 8007530:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007532:	7ffb      	ldrb	r3, [r7, #31]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8007538:	7ffb      	ldrb	r3, [r7, #31]
 800753a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff fd27 	bl	8006fa0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff fd46 	bl	8006ff4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fd2d 	bl	8006fcc <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8007572:	7fbb      	ldrb	r3, [r7, #30]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3720      	adds	r7, #32
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007588:	f7ff fe62 	bl	8007250 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800758c:	f7fd fc60 	bl	8004e50 <HAL_GetTick>
 8007590:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007592:	e009      	b.n	80075a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007594:	f7fd fc5c 	bl	8004e50 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d902      	bls.n	80075a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	73fb      	strb	r3, [r7, #15]
      break;
 80075a6:	e004      	b.n	80075b2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075a8:	f7ff fe61 	bl	800726e <LL_RCC_PLLSAI1_IsReady>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f0      	bne.n	8007594 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d137      	bne.n	8007628 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80075b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075cc:	4313      	orrs	r3, r2
 80075ce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80075d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075e2:	4313      	orrs	r3, r2
 80075e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80075e6:	f7ff fe24 	bl	8007232 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ea:	f7fd fc31 	bl	8004e50 <HAL_GetTick>
 80075ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075f0:	e009      	b.n	8007606 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075f2:	f7fd fc2d 	bl	8004e50 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d902      	bls.n	8007606 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	73fb      	strb	r3, [r7, #15]
        break;
 8007604:	e004      	b.n	8007610 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007606:	f7ff fe32 	bl	800726e <LL_RCC_PLLSAI1_IsReady>
 800760a:	4603      	mov	r3, r0
 800760c:	2b01      	cmp	r3, #1
 800760e:	d1f0      	bne.n	80075f2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d108      	bne.n	8007628 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007624:	4313      	orrs	r3, r2
 8007626:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800763e:	f7ff fe07 	bl	8007250 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007642:	f7fd fc05 	bl	8004e50 <HAL_GetTick>
 8007646:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007648:	e009      	b.n	800765e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800764a:	f7fd fc01 	bl	8004e50 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d902      	bls.n	800765e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	73fb      	strb	r3, [r7, #15]
      break;
 800765c:	e004      	b.n	8007668 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800765e:	f7ff fe06 	bl	800726e <LL_RCC_PLLSAI1_IsReady>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f0      	bne.n	800764a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d137      	bne.n	80076de <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800766e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007682:	4313      	orrs	r3, r2
 8007684:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007698:	4313      	orrs	r3, r2
 800769a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800769c:	f7ff fdc9 	bl	8007232 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a0:	f7fd fbd6 	bl	8004e50 <HAL_GetTick>
 80076a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076a6:	e009      	b.n	80076bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076a8:	f7fd fbd2 	bl	8004e50 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d902      	bls.n	80076bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	73fb      	strb	r3, [r7, #15]
        break;
 80076ba:	e004      	b.n	80076c6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076bc:	f7ff fdd7 	bl	800726e <LL_RCC_PLLSAI1_IsReady>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d1f0      	bne.n	80076a8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d108      	bne.n	80076de <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80076cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076da:	4313      	orrs	r3, r2
 80076dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80076f4:	f7ff fdac 	bl	8007250 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076f8:	f7fd fbaa 	bl	8004e50 <HAL_GetTick>
 80076fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076fe:	e009      	b.n	8007714 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007700:	f7fd fba6 	bl	8004e50 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d902      	bls.n	8007714 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	73fb      	strb	r3, [r7, #15]
      break;
 8007712:	e004      	b.n	800771e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007714:	f7ff fdab 	bl	800726e <LL_RCC_PLLSAI1_IsReady>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d137      	bne.n	8007794 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007738:	4313      	orrs	r3, r2
 800773a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800773c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800774e:	4313      	orrs	r3, r2
 8007750:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007752:	f7ff fd6e 	bl	8007232 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007756:	f7fd fb7b 	bl	8004e50 <HAL_GetTick>
 800775a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800775c:	e009      	b.n	8007772 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800775e:	f7fd fb77 	bl	8004e50 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d902      	bls.n	8007772 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	73fb      	strb	r3, [r7, #15]
        break;
 8007770:	e004      	b.n	800777c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007772:	f7ff fd7c 	bl	800726e <LL_RCC_PLLSAI1_IsReady>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d1f0      	bne.n	800775e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d108      	bne.n	8007794 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007790:	4313      	orrs	r3, r2
 8007792:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e090      	b.n	80078d2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fa fcd7 	bl	8002178 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	22ca      	movs	r2, #202	; 0xca
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2253      	movs	r2, #83	; 0x53
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f89f 	bl	8007926 <RTC_EnterInitMode>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	22ff      	movs	r2, #255	; 0xff
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2204      	movs	r2, #4
 80077fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e067      	b.n	80078d2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007814:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6899      	ldr	r1, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68d2      	ldr	r2, [r2, #12]
 800783c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6919      	ldr	r1, [r3, #16]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	041a      	lsls	r2, r3, #16
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007860:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0203 	bic.w	r2, r2, #3
 8007870:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d113      	bne.n	80078c0 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f81e 	bl	80078da <HAL_RTC_WaitForSynchro>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00d      	beq.n	80078c0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	22ff      	movs	r2, #255	; 0xff
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2204      	movs	r2, #4
 80078b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e008      	b.n	80078d2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80078d0:	2300      	movs	r3, #0
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078f0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80078f2:	f7fd faad 	bl	8004e50 <HAL_GetTick>
 80078f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078f8:	e009      	b.n	800790e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80078fa:	f7fd faa9 	bl	8004e50 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007908:	d901      	bls.n	800790e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e007      	b.n	800791e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0ee      	beq.n	80078fa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d119      	bne.n	8007970 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f04f 32ff 	mov.w	r2, #4294967295
 8007944:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007946:	f7fd fa83 	bl	8004e50 <HAL_GetTick>
 800794a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800794c:	e009      	b.n	8007962 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800794e:	f7fd fa7f 	bl	8004e50 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800795c:	d901      	bls.n	8007962 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e007      	b.n	8007972 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0ee      	beq.n	800794e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_RTCEx_EnableBypassShadow+0x16>
 800798c:	2302      	movs	r3, #2
 800798e:	e024      	b.n	80079da <HAL_RTCEx_EnableBypassShadow+0x60>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	22ca      	movs	r2, #202	; 0xca
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2253      	movs	r2, #83	; 0x53
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0220 	orr.w	r2, r2, #32
 80079be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <LL_RCC_GetUSARTClockSource>:
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80079ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4013      	ands	r3, r2
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <LL_RCC_GetLPUARTClockSource>:
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4013      	ands	r3, r2
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e042      	b.n	8007abe <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fa fa9e 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2224      	movs	r2, #36	; 0x24
 8007a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fa41 	bl	8007ef0 <UART_SetConfig>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e022      	b.n	8007abe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc43 	bl	800830c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007aa4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fcca 	bl	8008450 <UART_CheckIdleState>
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d168      	bne.n	8007bb2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_UART_Transmit_DMA+0x24>
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e061      	b.n	8007bb4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Transmit_DMA+0x36>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e05a      	b.n	8007bb4 <HAL_UART_Transmit_DMA+0xec>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2221      	movs	r2, #33	; 0x21
 8007b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02c      	beq.n	8007b8e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b38:	4a20      	ldr	r2, [pc, #128]	; (8007bbc <HAL_UART_Transmit_DMA+0xf4>)
 8007b3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b40:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <HAL_UART_Transmit_DMA+0xf8>)
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b48:	4a1e      	ldr	r2, [pc, #120]	; (8007bc4 <HAL_UART_Transmit_DMA+0xfc>)
 8007b4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b50:	2200      	movs	r2, #0
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3328      	adds	r3, #40	; 0x28
 8007b64:	461a      	mov	r2, r3
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	f7fd fbe2 	bl	8005330 <HAL_DMA_Start_IT>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00d      	beq.n	8007b8e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2210      	movs	r2, #16
 8007b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e012      	b.n	8007bb4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2240      	movs	r2, #64	; 0x40
 8007b94:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bac:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e000      	b.n	8007bb4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8007bb2:	2302      	movs	r3, #2
  }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	08008663 	.word	0x08008663
 8007bc0:	080086b7 	.word	0x080086b7
 8007bc4:	080086d3 	.word	0x080086d3

08007bc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	f640 030f 	movw	r3, #2063	; 0x80f
 8007bee:	4013      	ands	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d118      	bne.n	8007c2a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d013      	beq.n	8007c2a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8145 	beq.w	8007eaa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
      }
      return;
 8007c28:	e13f      	b.n	8007eaa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 80e8 	beq.w	8007e02 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4ba1      	ldr	r3, [pc, #644]	; (8007ebc <HAL_UART_IRQHandler+0x2f4>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d105      	bne.n	8007c48 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4ba0      	ldr	r3, [pc, #640]	; (8007ec0 <HAL_UART_IRQHandler+0x2f8>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80dd 	beq.w	8007e02 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d010      	beq.n	8007c74 <HAL_UART_IRQHandler+0xac>
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2201      	movs	r2, #1
 8007c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6a:	f043 0201 	orr.w	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d010      	beq.n	8007ca0 <HAL_UART_IRQHandler+0xd8>
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c96:	f043 0204 	orr.w	r2, r3, #4
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d010      	beq.n	8007ccc <HAL_UART_IRQHandler+0x104>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2204      	movs	r2, #4
 8007cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	f043 0202 	orr.w	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d015      	beq.n	8007d02 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4b76      	ldr	r3, [pc, #472]	; (8007ebc <HAL_UART_IRQHandler+0x2f4>)
 8007ce4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00b      	beq.n	8007d02 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2208      	movs	r2, #8
 8007cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf8:	f043 0208 	orr.w	r2, r3, #8
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d011      	beq.n	8007d30 <HAL_UART_IRQHandler+0x168>
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00c      	beq.n	8007d30 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80b9 	beq.w	8007eae <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d011      	beq.n	8007d6a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7c:	2b40      	cmp	r3, #64	; 0x40
 8007d7e:	d004      	beq.n	8007d8a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d031      	beq.n	8007dee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fc46 	bl	800861c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b40      	cmp	r3, #64	; 0x40
 8007d9c:	d123      	bne.n	8007de6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d013      	beq.n	8007dde <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dba:	4a42      	ldr	r2, [pc, #264]	; (8007ec4 <HAL_UART_IRQHandler+0x2fc>)
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fd fb2f 	bl	8005426 <HAL_DMA_Abort_IT>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d017      	beq.n	8007dfe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ddc:	e00f      	b.n	8007dfe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f87c 	bl	8007edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de4:	e00b      	b.n	8007dfe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f878 	bl	8007edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dec:	e007      	b.n	8007dfe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f874 	bl	8007edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007dfc:	e057      	b.n	8007eae <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfe:	bf00      	nop
    return;
 8007e00:	e055      	b.n	8007eae <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00d      	beq.n	8007e28 <HAL_UART_IRQHandler+0x260>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d008      	beq.n	8007e28 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fcc6 	bl	80087b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e26:	e045      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d012      	beq.n	8007e58 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d031      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
    }
    return;
 8007e56:	e02c      	b.n	8007eb2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d008      	beq.n	8007e74 <HAL_UART_IRQHandler+0x2ac>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc86 	bl	800877e <UART_EndTransmit_IT>
    return;
 8007e72:	e01f      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d008      	beq.n	8007e90 <HAL_UART_IRQHandler+0x2c8>
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fca6 	bl	80087da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e8e:	e011      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00c      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	da09      	bge.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fc90 	bl	80087c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ea6:	bf00      	nop
 8007ea8:	e004      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8007eaa:	bf00      	nop
 8007eac:	e002      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007eae:	bf00      	nop
 8007eb0:	e000      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007eb2:	bf00      	nop
  }
}
 8007eb4:	3720      	adds	r7, #32
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	10000001 	.word	0x10000001
 8007ec0:	04000120 	.word	0x04000120
 8007ec4:	08008753 	.word	0x08008753

08007ec8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ef0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007ef4:	b088      	sub	sp, #32
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4ba4      	ldr	r3, [pc, #656]	; (80081b8 <UART_SetConfig+0x2c8>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	69f9      	ldr	r1, [r7, #28]
 8007f30:	430b      	orrs	r3, r1
 8007f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a99      	ldr	r2, [pc, #612]	; (80081bc <UART_SetConfig+0x2cc>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d004      	beq.n	8007f64 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	69f9      	ldr	r1, [r7, #28]
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	f023 010f 	bic.w	r1, r3, #15
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a8a      	ldr	r2, [pc, #552]	; (80081c0 <UART_SetConfig+0x2d0>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d121      	bne.n	8007fe0 <UART_SetConfig+0xf0>
 8007f9c:	2003      	movs	r0, #3
 8007f9e:	f7ff fd22 	bl	80079e6 <LL_RCC_GetUSARTClockSource>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d817      	bhi.n	8007fd8 <UART_SetConfig+0xe8>
 8007fa8:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <UART_SetConfig+0xc0>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fc1 	.word	0x08007fc1
 8007fb4:	08007fcd 	.word	0x08007fcd
 8007fb8:	08007fc7 	.word	0x08007fc7
 8007fbc:	08007fd3 	.word	0x08007fd3
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	76fb      	strb	r3, [r7, #27]
 8007fc4:	e038      	b.n	8008038 <UART_SetConfig+0x148>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	76fb      	strb	r3, [r7, #27]
 8007fca:	e035      	b.n	8008038 <UART_SetConfig+0x148>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	76fb      	strb	r3, [r7, #27]
 8007fd0:	e032      	b.n	8008038 <UART_SetConfig+0x148>
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	76fb      	strb	r3, [r7, #27]
 8007fd6:	e02f      	b.n	8008038 <UART_SetConfig+0x148>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	76fb      	strb	r3, [r7, #27]
 8007fdc:	bf00      	nop
 8007fde:	e02b      	b.n	8008038 <UART_SetConfig+0x148>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a75      	ldr	r2, [pc, #468]	; (80081bc <UART_SetConfig+0x2cc>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d124      	bne.n	8008034 <UART_SetConfig+0x144>
 8007fea:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007fee:	f7ff fd0a 	bl	8007a06 <LL_RCC_GetLPUARTClockSource>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff8:	d012      	beq.n	8008020 <UART_SetConfig+0x130>
 8007ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffe:	d802      	bhi.n	8008006 <UART_SetConfig+0x116>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <UART_SetConfig+0x124>
 8008004:	e012      	b.n	800802c <UART_SetConfig+0x13c>
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800a:	d006      	beq.n	800801a <UART_SetConfig+0x12a>
 800800c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008010:	d009      	beq.n	8008026 <UART_SetConfig+0x136>
 8008012:	e00b      	b.n	800802c <UART_SetConfig+0x13c>
 8008014:	2300      	movs	r3, #0
 8008016:	76fb      	strb	r3, [r7, #27]
 8008018:	e00e      	b.n	8008038 <UART_SetConfig+0x148>
 800801a:	2302      	movs	r3, #2
 800801c:	76fb      	strb	r3, [r7, #27]
 800801e:	e00b      	b.n	8008038 <UART_SetConfig+0x148>
 8008020:	2304      	movs	r3, #4
 8008022:	76fb      	strb	r3, [r7, #27]
 8008024:	e008      	b.n	8008038 <UART_SetConfig+0x148>
 8008026:	2308      	movs	r3, #8
 8008028:	76fb      	strb	r3, [r7, #27]
 800802a:	e005      	b.n	8008038 <UART_SetConfig+0x148>
 800802c:	2310      	movs	r3, #16
 800802e:	76fb      	strb	r3, [r7, #27]
 8008030:	bf00      	nop
 8008032:	e001      	b.n	8008038 <UART_SetConfig+0x148>
 8008034:	2310      	movs	r3, #16
 8008036:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a5f      	ldr	r2, [pc, #380]	; (80081bc <UART_SetConfig+0x2cc>)
 800803e:	4293      	cmp	r3, r2
 8008040:	f040 808e 	bne.w	8008160 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008044:	7efb      	ldrb	r3, [r7, #27]
 8008046:	2b08      	cmp	r3, #8
 8008048:	d823      	bhi.n	8008092 <UART_SetConfig+0x1a2>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x160>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008075 	.word	0x08008075
 8008054:	08008093 	.word	0x08008093
 8008058:	0800807d 	.word	0x0800807d
 800805c:	08008093 	.word	0x08008093
 8008060:	08008083 	.word	0x08008083
 8008064:	08008093 	.word	0x08008093
 8008068:	08008093 	.word	0x08008093
 800806c:	08008093 	.word	0x08008093
 8008070:	0800808b 	.word	0x0800808b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008074:	f7fe fe8c 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 8008078:	6178      	str	r0, [r7, #20]
        break;
 800807a:	e00f      	b.n	800809c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800807c:	4b51      	ldr	r3, [pc, #324]	; (80081c4 <UART_SetConfig+0x2d4>)
 800807e:	617b      	str	r3, [r7, #20]
        break;
 8008080:	e00c      	b.n	800809c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008082:	f7fe fe07 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 8008086:	6178      	str	r0, [r7, #20]
        break;
 8008088:	e008      	b.n	800809c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800808e:	617b      	str	r3, [r7, #20]
        break;
 8008090:	e004      	b.n	800809c <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	76bb      	strb	r3, [r7, #26]
        break;
 800809a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 811c 	beq.w	80082dc <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	4a47      	ldr	r2, [pc, #284]	; (80081c8 <UART_SetConfig+0x2d8>)
 80080aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ae:	461a      	mov	r2, r3
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	4413      	add	r3, r2
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d305      	bcc.n	80080d4 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d902      	bls.n	80080da <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	76bb      	strb	r3, [r7, #26]
 80080d8:	e100      	b.n	80082dc <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	4618      	mov	r0, r3
 80080de:	f04f 0100 	mov.w	r1, #0
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	4a38      	ldr	r2, [pc, #224]	; (80081c8 <UART_SetConfig+0x2d8>)
 80080e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f04f 0400 	mov.w	r4, #0
 80080f2:	461a      	mov	r2, r3
 80080f4:	4623      	mov	r3, r4
 80080f6:	f7f8 f89b 	bl	8000230 <__aeabi_uldivmod>
 80080fa:	4603      	mov	r3, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	4619      	mov	r1, r3
 8008100:	4622      	mov	r2, r4
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	f04f 0400 	mov.w	r4, #0
 800810a:	0214      	lsls	r4, r2, #8
 800810c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008110:	020b      	lsls	r3, r1, #8
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6852      	ldr	r2, [r2, #4]
 8008116:	0852      	lsrs	r2, r2, #1
 8008118:	4611      	mov	r1, r2
 800811a:	f04f 0200 	mov.w	r2, #0
 800811e:	eb13 0b01 	adds.w	fp, r3, r1
 8008122:	eb44 0c02 	adc.w	ip, r4, r2
 8008126:	4658      	mov	r0, fp
 8008128:	4661      	mov	r1, ip
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f04f 0400 	mov.w	r4, #0
 8008132:	461a      	mov	r2, r3
 8008134:	4623      	mov	r3, r4
 8008136:	f7f8 f87b 	bl	8000230 <__aeabi_uldivmod>
 800813a:	4603      	mov	r3, r0
 800813c:	460c      	mov	r4, r1
 800813e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008146:	d308      	bcc.n	800815a <UART_SetConfig+0x26a>
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814e:	d204      	bcs.n	800815a <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	60da      	str	r2, [r3, #12]
 8008158:	e0c0      	b.n	80082dc <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	76bb      	strb	r3, [r7, #26]
 800815e:	e0bd      	b.n	80082dc <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008168:	d169      	bne.n	800823e <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800816a:	7efb      	ldrb	r3, [r7, #27]
 800816c:	3b01      	subs	r3, #1
 800816e:	2b07      	cmp	r3, #7
 8008170:	d82c      	bhi.n	80081cc <UART_SetConfig+0x2dc>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <UART_SetConfig+0x288>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	08008199 	.word	0x08008199
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081cd 	.word	0x080081cd
 8008184:	080081a7 	.word	0x080081a7
 8008188:	080081cd 	.word	0x080081cd
 800818c:	080081cd 	.word	0x080081cd
 8008190:	080081cd 	.word	0x080081cd
 8008194:	080081af 	.word	0x080081af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008198:	f7fe fe10 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 800819c:	6178      	str	r0, [r7, #20]
        break;
 800819e:	e01a      	b.n	80081d6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a0:	4b08      	ldr	r3, [pc, #32]	; (80081c4 <UART_SetConfig+0x2d4>)
 80081a2:	617b      	str	r3, [r7, #20]
        break;
 80081a4:	e017      	b.n	80081d6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081a6:	f7fe fd75 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 80081aa:	6178      	str	r0, [r7, #20]
        break;
 80081ac:	e013      	b.n	80081d6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b2:	617b      	str	r3, [r7, #20]
        break;
 80081b4:	e00f      	b.n	80081d6 <UART_SetConfig+0x2e6>
 80081b6:	bf00      	nop
 80081b8:	cfff69f3 	.word	0xcfff69f3
 80081bc:	40008000 	.word	0x40008000
 80081c0:	40013800 	.word	0x40013800
 80081c4:	00f42400 	.word	0x00f42400
 80081c8:	0800dc2c 	.word	0x0800dc2c
      default:
        pclk = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	76bb      	strb	r3, [r7, #26]
        break;
 80081d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d07f      	beq.n	80082dc <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	4a48      	ldr	r2, [pc, #288]	; (8008304 <UART_SetConfig+0x414>)
 80081e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e6:	461a      	mov	r2, r3
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ee:	005a      	lsls	r2, r3, #1
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	085b      	lsrs	r3, r3, #1
 80081f6:	441a      	add	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008200:	b29b      	uxth	r3, r3
 8008202:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2b0f      	cmp	r3, #15
 8008208:	d916      	bls.n	8008238 <UART_SetConfig+0x348>
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008210:	d212      	bcs.n	8008238 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	b29b      	uxth	r3, r3
 8008216:	f023 030f 	bic.w	r3, r3, #15
 800821a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	085b      	lsrs	r3, r3, #1
 8008220:	b29b      	uxth	r3, r3
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	b29a      	uxth	r2, r3
 8008228:	89fb      	ldrh	r3, [r7, #14]
 800822a:	4313      	orrs	r3, r2
 800822c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	89fa      	ldrh	r2, [r7, #14]
 8008234:	60da      	str	r2, [r3, #12]
 8008236:	e051      	b.n	80082dc <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	76bb      	strb	r3, [r7, #26]
 800823c:	e04e      	b.n	80082dc <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800823e:	7efb      	ldrb	r3, [r7, #27]
 8008240:	3b01      	subs	r3, #1
 8008242:	2b07      	cmp	r3, #7
 8008244:	d821      	bhi.n	800828a <UART_SetConfig+0x39a>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <UART_SetConfig+0x35c>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	0800826d 	.word	0x0800826d
 8008250:	08008275 	.word	0x08008275
 8008254:	0800828b 	.word	0x0800828b
 8008258:	0800827b 	.word	0x0800827b
 800825c:	0800828b 	.word	0x0800828b
 8008260:	0800828b 	.word	0x0800828b
 8008264:	0800828b 	.word	0x0800828b
 8008268:	08008283 	.word	0x08008283
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800826c:	f7fe fda6 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 8008270:	6178      	str	r0, [r7, #20]
        break;
 8008272:	e00f      	b.n	8008294 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008274:	4b24      	ldr	r3, [pc, #144]	; (8008308 <UART_SetConfig+0x418>)
 8008276:	617b      	str	r3, [r7, #20]
        break;
 8008278:	e00c      	b.n	8008294 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800827a:	f7fe fd0b 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 800827e:	6178      	str	r0, [r7, #20]
        break;
 8008280:	e008      	b.n	8008294 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008286:	617b      	str	r3, [r7, #20]
        break;
 8008288:	e004      	b.n	8008294 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	76bb      	strb	r3, [r7, #26]
        break;
 8008292:	bf00      	nop
    }

    if (pclk != 0U)
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d020      	beq.n	80082dc <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	4a19      	ldr	r2, [pc, #100]	; (8008304 <UART_SetConfig+0x414>)
 80082a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a4:	461a      	mov	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	085b      	lsrs	r3, r3, #1
 80082b2:	441a      	add	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	b29b      	uxth	r3, r3
 80082be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b0f      	cmp	r3, #15
 80082c4:	d908      	bls.n	80082d8 <UART_SetConfig+0x3e8>
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082cc:	d204      	bcs.n	80082d8 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	60da      	str	r2, [r3, #12]
 80082d6:	e001      	b.n	80082dc <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80082f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3720      	adds	r7, #32
 80082fe:	46bd      	mov	sp, r7
 8008300:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008304:	0800dc2c 	.word	0x0800dc2c
 8008308:	00f42400 	.word	0x00f42400

0800830c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01a      	beq.n	8008422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800840a:	d10a      	bne.n	8008422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
  }
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af02      	add	r7, sp, #8
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008460:	f7fc fcf6 	bl	8004e50 <HAL_GetTick>
 8008464:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0308 	and.w	r3, r3, #8
 8008470:	2b08      	cmp	r3, #8
 8008472:	d10e      	bne.n	8008492 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f82c 	bl	80084e0 <UART_WaitOnFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e022      	b.n	80084d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b04      	cmp	r3, #4
 800849e:	d10e      	bne.n	80084be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f816 	bl	80084e0 <UART_WaitOnFlagUntilTimeout>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e00c      	b.n	80084d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	4613      	mov	r3, r2
 80084ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f0:	e062      	b.n	80085b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d05e      	beq.n	80085b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084fa:	f7fc fca9 	bl	8004e50 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <UART_WaitOnFlagUntilTimeout+0x30>
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11d      	bne.n	800854c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800851e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0201 	bic.w	r2, r2, #1
 800852e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2220      	movs	r2, #32
 8008534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2220      	movs	r2, #32
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e045      	b.n	80085d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0304 	and.w	r3, r3, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	d02e      	beq.n	80085b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008568:	d126      	bne.n	80085b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008572:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008582:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e00f      	b.n	80085d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	69da      	ldr	r2, [r3, #28]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	4013      	ands	r3, r2
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	bf0c      	ite	eq
 80085c8:	2301      	moveq	r3, #1
 80085ca:	2300      	movne	r3, #0
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d08d      	beq.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80085f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008606:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2220      	movs	r2, #32
 800860c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008632:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008642:	f023 0301 	bic.w	r3, r3, #1
 8008646:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2220      	movs	r2, #32
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d114      	bne.n	80086a8 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008694:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086a4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a6:	e002      	b.n	80086ae <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7f9 f823 	bl	80016f4 <HAL_UART_TxCpltCallback>
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f7ff fbff 	bl	8007ec8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b086      	sub	sp, #24
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fa:	2b80      	cmp	r3, #128	; 0x80
 80086fc:	d109      	bne.n	8008712 <UART_DMAError+0x40>
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b21      	cmp	r3, #33	; 0x21
 8008702:	d106      	bne.n	8008712 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2200      	movs	r2, #0
 8008708:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800870c:	6978      	ldr	r0, [r7, #20]
 800870e:	f7ff ff67 	bl	80085e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	d109      	bne.n	8008734 <UART_DMAError+0x62>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b22      	cmp	r3, #34	; 0x22
 8008724:	d106      	bne.n	8008734 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2200      	movs	r2, #0
 800872a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800872e:	6978      	ldr	r0, [r7, #20]
 8008730:	f7ff ff74 	bl	800861c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873a:	f043 0210 	orr.w	r2, r3, #16
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008744:	6978      	ldr	r0, [r7, #20]
 8008746:	f7ff fbc9 	bl	8007edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800874a:	bf00      	nop
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f7ff fbb3 	bl	8007edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008794:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7f8 ffa5 	bl	80016f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b085      	sub	sp, #20
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_UARTEx_DisableFifoMode+0x16>
 8008800:	2302      	movs	r3, #2
 8008802:	e027      	b.n	8008854 <HAL_UARTEx_DisableFifoMode+0x66>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2224      	movs	r2, #36	; 0x24
 8008810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0201 	bic.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008832:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008874:	2302      	movs	r3, #2
 8008876:	e02d      	b.n	80088d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2224      	movs	r2, #36	; 0x24
 8008884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0201 	bic.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f84f 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e02d      	b.n	8008950 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2224      	movs	r2, #36	; 0x24
 8008900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0201 	bic.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f811 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b089      	sub	sp, #36	; 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008960:	4a2f      	ldr	r2, [pc, #188]	; (8008a20 <UARTEx_SetNbDataToProcess+0xc8>)
 8008962:	f107 0314 	add.w	r3, r7, #20
 8008966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800896a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800896e:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <UARTEx_SetNbDataToProcess+0xcc>)
 8008970:	f107 030c 	add.w	r3, r7, #12
 8008974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008978:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008980:	2b00      	cmp	r3, #0
 8008982:	d108      	bne.n	8008996 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008994:	e03d      	b.n	8008a12 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008996:	2308      	movs	r3, #8
 8008998:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800899a:	2308      	movs	r3, #8
 800899c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	0e5b      	lsrs	r3, r3, #25
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	0f5b      	lsrs	r3, r3, #29
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80089be:	7fbb      	ldrb	r3, [r7, #30]
 80089c0:	7f3a      	ldrb	r2, [r7, #28]
 80089c2:	f107 0120 	add.w	r1, r7, #32
 80089c6:	440a      	add	r2, r1
 80089c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
 80089d0:	7f3a      	ldrb	r2, [r7, #28]
 80089d2:	f107 0120 	add.w	r1, r7, #32
 80089d6:	440a      	add	r2, r1
 80089d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80089dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80089e8:	7ffb      	ldrb	r3, [r7, #31]
 80089ea:	7f7a      	ldrb	r2, [r7, #29]
 80089ec:	f107 0120 	add.w	r1, r7, #32
 80089f0:	440a      	add	r2, r1
 80089f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	7f7a      	ldrb	r2, [r7, #29]
 80089fc:	f107 0120 	add.w	r1, r7, #32
 8008a00:	440a      	add	r2, r1
 8008a02:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a12:	bf00      	nop
 8008a14:	3724      	adds	r7, #36	; 0x24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	0800da30 	.word	0x0800da30
 8008a24:	0800da38 	.word	0x0800da38

08008a28 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008a28:	b5b0      	push	{r4, r5, r7, lr}
 8008a2a:	b0ce      	sub	sp, #312	; 0x138
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4605      	mov	r5, r0
 8008a30:	460c      	mov	r4, r1
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	1dfb      	adds	r3, r7, #7
 8008a38:	462a      	mov	r2, r5
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	1d3b      	adds	r3, r7, #4
 8008a3e:	4622      	mov	r2, r4
 8008a40:	801a      	strh	r2, [r3, #0]
 8008a42:	1cbb      	adds	r3, r7, #2
 8008a44:	4602      	mov	r2, r0
 8008a46:	801a      	strh	r2, [r3, #0]
 8008a48:	1dbb      	adds	r3, r7, #6
 8008a4a:	460a      	mov	r2, r1
 8008a4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008a4e:	f107 0310 	add.w	r3, r7, #16
 8008a52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008a56:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	f107 0210 	add.w	r2, r7, #16
 8008a60:	4413      	add	r3, r2
 8008a62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008a66:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a6a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008a6e:	4413      	add	r3, r2
 8008a70:	3309      	adds	r3, #9
 8008a72:	f107 0210 	add.w	r2, r7, #16
 8008a76:	4413      	add	r3, r2
 8008a78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a7c:	f107 030f 	add.w	r3, r7, #15
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008a8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a8e:	1dfa      	adds	r2, r7, #7
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008a9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008aa2:	1d3a      	adds	r2, r7, #4
 8008aa4:	8812      	ldrh	r2, [r2, #0]
 8008aa6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aae:	3302      	adds	r3, #2
 8008ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008ab4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ab8:	1cba      	adds	r2, r7, #2
 8008aba:	8812      	ldrh	r2, [r2, #0]
 8008abc:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008aca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ace:	1dba      	adds	r2, r7, #6
 8008ad0:	7812      	ldrb	r2, [r2, #0]
 8008ad2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ad8:	3301      	adds	r3, #1
 8008ada:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008ade:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ae2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008ae6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aec:	3301      	adds	r3, #1
 8008aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008af2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008af6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008afa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b00:	3301      	adds	r3, #1
 8008b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008b06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008b10:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 fcb9 	bl	800a48c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008b1a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008b1e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b22:	4413      	add	r3, r2
 8008b24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008b28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b2c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008b30:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b36:	3301      	adds	r3, #1
 8008b38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b40:	3301      	adds	r3, #1
 8008b42:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008b46:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 fc9e 	bl	800a48c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008b50:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008b54:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b58:	4413      	add	r3, r2
 8008b5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b62:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008b66:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b76:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008b7a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b80:	3302      	adds	r3, #2
 8008b82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b8a:	2218      	movs	r2, #24
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 fc8c 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b94:	233f      	movs	r3, #63	; 0x3f
 8008b96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008b9a:	2383      	movs	r3, #131	; 0x83
 8008b9c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ba0:	f107 0310 	add.w	r3, r7, #16
 8008ba4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008bb0:	f107 030f 	add.w	r3, r7, #15
 8008bb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 fb35 	bl	800a234 <hci_send_req>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	da01      	bge.n	8008bd4 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8008bd0:	23ff      	movs	r3, #255	; 0xff
 8008bd2:	e002      	b.n	8008bda <aci_gap_set_discoverable+0x1b2>
  return status;
 8008bd4:	f107 030f 	add.w	r3, r7, #15
 8008bd8:	781b      	ldrb	r3, [r3, #0]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bdb0      	pop	{r4, r5, r7, pc}

08008be4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b0cc      	sub	sp, #304	; 0x130
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4602      	mov	r2, r0
 8008bec:	1dfb      	adds	r3, r7, #7
 8008bee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008bf0:	f107 0310 	add.w	r3, r7, #16
 8008bf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bf8:	f107 030f 	add.w	r3, r7, #15
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0a:	1dfa      	adds	r2, r7, #7
 8008c0c:	7812      	ldrb	r2, [r2, #0]
 8008c0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c14:	3301      	adds	r3, #1
 8008c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c1e:	2218      	movs	r2, #24
 8008c20:	2100      	movs	r1, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 fc42 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c28:	233f      	movs	r3, #63	; 0x3f
 8008c2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008c2e:	2385      	movs	r3, #133	; 0x85
 8008c30:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c34:	f107 0310 	add.w	r3, r7, #16
 8008c38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c44:	f107 030f 	add.w	r3, r7, #15
 8008c48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 faeb 	bl	800a234 <hci_send_req>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da01      	bge.n	8008c68 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8008c64:	23ff      	movs	r3, #255	; 0xff
 8008c66:	e002      	b.n	8008c6e <aci_gap_set_io_capability+0x8a>
  return status;
 8008c68:	f107 030f 	add.w	r3, r7, #15
 8008c6c:	781b      	ldrb	r3, [r3, #0]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008c78:	b5b0      	push	{r4, r5, r7, lr}
 8008c7a:	b0cc      	sub	sp, #304	; 0x130
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4605      	mov	r5, r0
 8008c80:	460c      	mov	r4, r1
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	1dfb      	adds	r3, r7, #7
 8008c88:	462a      	mov	r2, r5
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	1dbb      	adds	r3, r7, #6
 8008c8e:	4622      	mov	r2, r4
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	1d7b      	adds	r3, r7, #5
 8008c94:	4602      	mov	r2, r0
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	1d3b      	adds	r3, r7, #4
 8008c9a:	460a      	mov	r2, r1
 8008c9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008c9e:	f107 0310 	add.w	r3, r7, #16
 8008ca2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ca6:	f107 030f 	add.w	r3, r7, #15
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb8:	1dfa      	adds	r2, r7, #7
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ccc:	1dba      	adds	r2, r7, #6
 8008cce:	7812      	ldrb	r2, [r2, #0]
 8008cd0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce0:	1d7a      	adds	r2, r7, #5
 8008ce2:	7812      	ldrb	r2, [r2, #0]
 8008ce4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cea:	3301      	adds	r3, #1
 8008cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf4:	1d3a      	adds	r2, r7, #4
 8008cf6:	7812      	ldrb	r2, [r2, #0]
 8008cf8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cfe:	3301      	adds	r3, #1
 8008d00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d08:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008d0c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d12:	3301      	adds	r3, #1
 8008d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008d20:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d26:	3301      	adds	r3, #1
 8008d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d30:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008d34:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d44:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008d48:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d50:	3304      	adds	r3, #4
 8008d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d5a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008d5e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d64:	3301      	adds	r3, #1
 8008d66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d6e:	2218      	movs	r2, #24
 8008d70:	2100      	movs	r1, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fb9a 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d78:	233f      	movs	r3, #63	; 0x3f
 8008d7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008d7e:	2386      	movs	r3, #134	; 0x86
 8008d80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d84:	f107 0310 	add.w	r3, r7, #16
 8008d88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d94:	f107 030f 	add.w	r3, r7, #15
 8008d98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008da6:	2100      	movs	r1, #0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f001 fa43 	bl	800a234 <hci_send_req>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da01      	bge.n	8008db8 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8008db4:	23ff      	movs	r3, #255	; 0xff
 8008db6:	e002      	b.n	8008dbe <aci_gap_set_authentication_requirement+0x146>
  return status;
 8008db8:	f107 030f 	add.w	r3, r7, #15
 8008dbc:	781b      	ldrb	r3, [r3, #0]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bdb0      	pop	{r4, r5, r7, pc}

08008dc8 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b0cd      	sub	sp, #308	; 0x134
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4604      	mov	r4, r0
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	463a      	mov	r2, r7
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	1dfb      	adds	r3, r7, #7
 8008dda:	4622      	mov	r2, r4
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	1dbb      	adds	r3, r7, #6
 8008de0:	4602      	mov	r2, r0
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	1d7b      	adds	r3, r7, #5
 8008de6:	460a      	mov	r2, r1
 8008de8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008dea:	f107 0310 	add.w	r3, r7, #16
 8008dee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008df2:	f107 0308 	add.w	r3, r7, #8
 8008df6:	2207      	movs	r2, #7
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 fb56 	bl	800a4ac <Osal_MemSet>
  int index_input = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0a:	1dfa      	adds	r2, r7, #7
 8008e0c:	7812      	ldrb	r2, [r2, #0]
 8008e0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e14:	3301      	adds	r3, #1
 8008e16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e1e:	1dba      	adds	r2, r7, #6
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e32:	1d7a      	adds	r2, r7, #5
 8008e34:	7812      	ldrb	r2, [r2, #0]
 8008e36:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e46:	2218      	movs	r2, #24
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f001 fb2e 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e50:	233f      	movs	r3, #63	; 0x3f
 8008e52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008e56:	238a      	movs	r3, #138	; 0x8a
 8008e58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e5c:	f107 0310 	add.w	r3, r7, #16
 8008e60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008e74:	2307      	movs	r3, #7
 8008e76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f9d7 	bl	800a234 <hci_send_req>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	da01      	bge.n	8008e90 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008e8c:	23ff      	movs	r3, #255	; 0xff
 8008e8e:	e021      	b.n	8008ed4 <aci_gap_init+0x10c>
  if ( resp.Status )
 8008e90:	f107 0308 	add.w	r3, r7, #8
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <aci_gap_init+0xda>
    return resp.Status;
 8008e9a:	f107 0308 	add.w	r3, r7, #8
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	e018      	b.n	8008ed4 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8008ea2:	f107 0308 	add.w	r3, r7, #8
 8008ea6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	463b      	mov	r3, r7
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008eb2:	f107 0308 	add.w	r3, r7, #8
 8008eb6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008ec0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008ec2:	f107 0308 	add.w	r3, r7, #8
 8008ec6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008ed0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd90      	pop	{r4, r7, pc}

08008ede <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b0cc      	sub	sp, #304	; 0x130
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	6019      	str	r1, [r3, #0]
 8008eea:	1dfb      	adds	r3, r7, #7
 8008eec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008eee:	f107 0310 	add.w	r3, r7, #16
 8008ef2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ef6:	f107 030f 	add.w	r3, r7, #15
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f08:	1dfa      	adds	r2, r7, #7
 8008f0a:	7812      	ldrb	r2, [r2, #0]
 8008f0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f12:	3301      	adds	r3, #1
 8008f14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1c:	1c58      	adds	r0, r3, #1
 8008f1e:	1dfb      	adds	r3, r7, #7
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	463b      	mov	r3, r7
 8008f24:	6819      	ldr	r1, [r3, #0]
 8008f26:	f001 fab1 	bl	800a48c <Osal_MemCpy>
  index_input += AdvDataLen;
 8008f2a:	1dfb      	adds	r3, r7, #7
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008f32:	4413      	add	r3, r2
 8008f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f3c:	2218      	movs	r2, #24
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 fab3 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f46:	233f      	movs	r3, #63	; 0x3f
 8008f48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008f4c:	238e      	movs	r3, #142	; 0x8e
 8008f4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f52:	f107 0310 	add.w	r3, r7, #16
 8008f56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f62:	f107 030f 	add.w	r3, r7, #15
 8008f66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 f95c 	bl	800a234 <hci_send_req>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	da01      	bge.n	8008f86 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8008f82:	23ff      	movs	r3, #255	; 0xff
 8008f84:	e002      	b.n	8008f8c <aci_gap_update_adv_data+0xae>
  return status;
 8008f86:	f107 030f 	add.w	r3, r7, #15
 8008f8a:	781b      	ldrb	r3, [r3, #0]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b088      	sub	sp, #32
 8008f9a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fa0:	f107 0308 	add.w	r3, r7, #8
 8008fa4:	2218      	movs	r2, #24
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 fa7f 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fae:	233f      	movs	r3, #63	; 0x3f
 8008fb0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008fb2:	2392      	movs	r3, #146	; 0x92
 8008fb4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008fb6:	1dfb      	adds	r3, r7, #7
 8008fb8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 f935 	bl	800a234 <hci_send_req>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	da01      	bge.n	8008fd4 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008fd0:	23ff      	movs	r3, #255	; 0xff
 8008fd2:	e000      	b.n	8008fd6 <aci_gap_configure_whitelist+0x40>
  return status;
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 8008fde:	b5b0      	push	{r4, r5, r7, lr}
 8008fe0:	b0cc      	sub	sp, #304	; 0x130
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4619      	mov	r1, r3
 8008fec:	1dbb      	adds	r3, r7, #6
 8008fee:	462a      	mov	r2, r5
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	1d3b      	adds	r3, r7, #4
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	801a      	strh	r2, [r3, #0]
 8008ff8:	1cfb      	adds	r3, r7, #3
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	1cbb      	adds	r3, r7, #2
 8009000:	460a      	mov	r2, r1
 8009002:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8009004:	f107 0310 	add.w	r3, r7, #16
 8009008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800900c:	f107 030f 	add.w	r3, r7, #15
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800901a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901e:	1dba      	adds	r2, r7, #6
 8009020:	8812      	ldrh	r2, [r2, #0]
 8009022:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009028:	3302      	adds	r3, #2
 800902a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 800902e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009032:	1d3a      	adds	r2, r7, #4
 8009034:	8812      	ldrh	r2, [r2, #0]
 8009036:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800903c:	3302      	adds	r3, #2
 800903e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009046:	1cfa      	adds	r2, r7, #3
 8009048:	7812      	ldrb	r2, [r2, #0]
 800904a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800904c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009050:	3301      	adds	r3, #1
 8009052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8009056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905a:	1cba      	adds	r2, r7, #2
 800905c:	7812      	ldrb	r2, [r2, #0]
 800905e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009064:	3301      	adds	r3, #1
 8009066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800906a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800906e:	2218      	movs	r2, #24
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f001 fa1a 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009078:	233f      	movs	r3, #63	; 0x3f
 800907a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 800907e:	2397      	movs	r3, #151	; 0x97
 8009080:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009084:	230f      	movs	r3, #15
 8009086:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800908a:	f107 0310 	add.w	r3, r7, #16
 800908e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800909a:	f107 030f 	add.w	r3, r7, #15
 800909e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 f8c0 	bl	800a234 <hci_send_req>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	da01      	bge.n	80090be <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 80090ba:	23ff      	movs	r3, #255	; 0xff
 80090bc:	e002      	b.n	80090c4 <aci_gap_start_general_discovery_proc+0xe6>
  return status;
 80090be:	f107 030f 	add.w	r3, r7, #15
 80090c2:	781b      	ldrb	r3, [r3, #0]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bdb0      	pop	{r4, r5, r7, pc}

080090ce <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 80090ce:	b590      	push	{r4, r7, lr}
 80090d0:	b0cf      	sub	sp, #316	; 0x13c
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	4604      	mov	r4, r0
 80090d6:	4608      	mov	r0, r1
 80090d8:	4611      	mov	r1, r2
 80090da:	1d3a      	adds	r2, r7, #4
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	f107 030e 	add.w	r3, r7, #14
 80090e2:	4622      	mov	r2, r4
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	4602      	mov	r2, r0
 80090ec:	801a      	strh	r2, [r3, #0]
 80090ee:	f107 030b 	add.w	r3, r7, #11
 80090f2:	460a      	mov	r2, r1
 80090f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 80090f6:	f107 0318 	add.w	r3, r7, #24
 80090fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80090fe:	f107 0317 	add.w	r3, r7, #23
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800910c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009110:	f107 020e 	add.w	r2, r7, #14
 8009114:	8812      	ldrh	r2, [r2, #0]
 8009116:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009118:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800911c:	3302      	adds	r3, #2
 800911e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8009122:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009126:	f107 020c 	add.w	r2, r7, #12
 800912a:	8812      	ldrh	r2, [r2, #0]
 800912c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800912e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009132:	3302      	adds	r3, #2
 8009134:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 8009138:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800913c:	f107 020b 	add.w	r2, r7, #11
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009144:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009148:	3301      	adds	r3, #1
 800914a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 800914e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009152:	1d58      	adds	r0, r3, #5
 8009154:	1d3b      	adds	r3, r7, #4
 8009156:	2206      	movs	r2, #6
 8009158:	6819      	ldr	r1, [r3, #0]
 800915a:	f001 f997 	bl	800a48c <Osal_MemCpy>
  index_input += 6;
 800915e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009162:	3306      	adds	r3, #6
 8009164:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8009168:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800916c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009170:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009172:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009176:	3301      	adds	r3, #1
 8009178:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800917c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009180:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8009184:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009186:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800918a:	3302      	adds	r3, #2
 800918c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009190:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009194:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8009198:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800919a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800919e:	3302      	adds	r3, #2
 80091a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 80091a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091a8:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80091ac:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80091ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091b2:	3302      	adds	r3, #2
 80091b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 80091b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091bc:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80091c0:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 80091c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091c6:	3302      	adds	r3, #2
 80091c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 80091cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091d0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80091d4:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 80091d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091da:	3302      	adds	r3, #2
 80091dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 80091e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091e4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80091e8:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 80091ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091ee:	3302      	adds	r3, #2
 80091f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091f8:	2218      	movs	r2, #24
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 f955 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009202:	233f      	movs	r3, #63	; 0x3f
 8009204:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8009208:	239c      	movs	r3, #156	; 0x9c
 800920a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800920e:	230f      	movs	r3, #15
 8009210:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8009214:	f107 0318 	add.w	r3, r7, #24
 8009218:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800921c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009220:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009224:	f107 0317 	add.w	r3, r7, #23
 8009228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800922c:	2301      	movs	r3, #1
 800922e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009232:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fffb 	bl	800a234 <hci_send_req>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	da01      	bge.n	8009248 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 8009244:	23ff      	movs	r3, #255	; 0xff
 8009246:	e002      	b.n	800924e <aci_gap_create_connection+0x180>
  return status;
 8009248:	f107 0317 	add.w	r3, r7, #23
 800924c:	781b      	ldrb	r3, [r3, #0]
}
 800924e:	4618      	mov	r0, r3
 8009250:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009254:	46bd      	mov	sp, r7
 8009256:	bd90      	pop	{r4, r7, pc}

08009258 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009262:	f107 0308 	add.w	r3, r7, #8
 8009266:	2218      	movs	r2, #24
 8009268:	2100      	movs	r1, #0
 800926a:	4618      	mov	r0, r3
 800926c:	f001 f91e 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009270:	233f      	movs	r3, #63	; 0x3f
 8009272:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009274:	f240 1301 	movw	r3, #257	; 0x101
 8009278:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800927a:	1dfb      	adds	r3, r7, #7
 800927c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800927e:	2301      	movs	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009282:	f107 0308 	add.w	r3, r7, #8
 8009286:	2100      	movs	r1, #0
 8009288:	4618      	mov	r0, r3
 800928a:	f000 ffd3 	bl	800a234 <hci_send_req>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	da01      	bge.n	8009298 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009294:	23ff      	movs	r3, #255	; 0xff
 8009296:	e000      	b.n	800929a <aci_gatt_init+0x42>
  return status;
 8009298:	79fb      	ldrb	r3, [r7, #7]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80092a2:	b590      	push	{r4, r7, lr}
 80092a4:	b0cf      	sub	sp, #316	; 0x13c
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	4604      	mov	r4, r0
 80092aa:	4638      	mov	r0, r7
 80092ac:	6001      	str	r1, [r0, #0]
 80092ae:	4610      	mov	r0, r2
 80092b0:	4619      	mov	r1, r3
 80092b2:	1dfb      	adds	r3, r7, #7
 80092b4:	4622      	mov	r2, r4
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	1dbb      	adds	r3, r7, #6
 80092ba:	4602      	mov	r2, r0
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	1d7b      	adds	r3, r7, #5
 80092c0:	460a      	mov	r2, r1
 80092c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80092c4:	f107 0310 	add.w	r3, r7, #16
 80092c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80092cc:	1dfb      	adds	r3, r7, #7
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d007      	beq.n	80092e4 <aci_gatt_add_service+0x42>
 80092d4:	1dfb      	adds	r3, r7, #7
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d101      	bne.n	80092e0 <aci_gatt_add_service+0x3e>
 80092dc:	2311      	movs	r3, #17
 80092de:	e002      	b.n	80092e6 <aci_gatt_add_service+0x44>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <aci_gatt_add_service+0x44>
 80092e4:	2303      	movs	r3, #3
 80092e6:	f107 0210 	add.w	r2, r7, #16
 80092ea:	4413      	add	r3, r2
 80092ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80092f0:	f107 030c 	add.w	r3, r7, #12
 80092f4:	2203      	movs	r2, #3
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 f8d7 	bl	800a4ac <Osal_MemSet>
  int index_input = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009304:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009308:	1dfa      	adds	r2, r7, #7
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800930e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009312:	3301      	adds	r3, #1
 8009314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009318:	1dfb      	adds	r3, r7, #7
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d002      	beq.n	8009326 <aci_gatt_add_service+0x84>
 8009320:	2b02      	cmp	r3, #2
 8009322:	d004      	beq.n	800932e <aci_gatt_add_service+0x8c>
 8009324:	e007      	b.n	8009336 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8009326:	2302      	movs	r3, #2
 8009328:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800932c:	e005      	b.n	800933a <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800932e:	2310      	movs	r3, #16
 8009330:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009334:	e001      	b.n	800933a <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8009336:	2347      	movs	r3, #71	; 0x47
 8009338:	e05d      	b.n	80093f6 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800933a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800933e:	1c58      	adds	r0, r3, #1
 8009340:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009344:	463b      	mov	r3, r7
 8009346:	6819      	ldr	r1, [r3, #0]
 8009348:	f001 f8a0 	bl	800a48c <Osal_MemCpy>
    index_input += size;
 800934c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009350:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009354:	4413      	add	r3, r2
 8009356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800935a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935e:	1dba      	adds	r2, r7, #6
 8009360:	7812      	ldrb	r2, [r2, #0]
 8009362:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009368:	3301      	adds	r3, #1
 800936a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800936e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009372:	1d7a      	adds	r2, r7, #5
 8009374:	7812      	ldrb	r2, [r2, #0]
 8009376:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800937c:	3301      	adds	r3, #1
 800937e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009386:	2218      	movs	r2, #24
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f001 f88e 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009390:	233f      	movs	r3, #63	; 0x3f
 8009392:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009396:	f44f 7381 	mov.w	r3, #258	; 0x102
 800939a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800939e:	f107 0310 	add.w	r3, r7, #16
 80093a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80093b6:	2303      	movs	r3, #3
 80093b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093c0:	2100      	movs	r1, #0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 ff36 	bl	800a234 <hci_send_req>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da01      	bge.n	80093d2 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80093ce:	23ff      	movs	r3, #255	; 0xff
 80093d0:	e011      	b.n	80093f6 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80093d2:	f107 030c 	add.w	r3, r7, #12
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <aci_gatt_add_service+0x142>
    return resp.Status;
 80093dc:	f107 030c 	add.w	r3, r7, #12
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	e008      	b.n	80093f6 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80093e4:	f107 030c 	add.w	r3, r7, #12
 80093e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80093f2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd90      	pop	{r4, r7, pc}

08009400 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b0d1      	sub	sp, #324	; 0x144
 8009404:	af00      	add	r7, sp, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	f107 0108 	add.w	r1, r7, #8
 800940e:	600a      	str	r2, [r1, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	f107 030e 	add.w	r3, r7, #14
 8009416:	4622      	mov	r2, r4
 8009418:	801a      	strh	r2, [r3, #0]
 800941a:	f107 030d 	add.w	r3, r7, #13
 800941e:	4602      	mov	r2, r0
 8009420:	701a      	strb	r2, [r3, #0]
 8009422:	1dbb      	adds	r3, r7, #6
 8009424:	460a      	mov	r2, r1
 8009426:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009428:	f107 0318 	add.w	r3, r7, #24
 800942c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009430:	f107 030d 	add.w	r3, r7, #13
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d008      	beq.n	800944c <aci_gatt_add_char+0x4c>
 800943a:	f107 030d 	add.w	r3, r7, #13
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d101      	bne.n	8009448 <aci_gatt_add_char+0x48>
 8009444:	2313      	movs	r3, #19
 8009446:	e002      	b.n	800944e <aci_gatt_add_char+0x4e>
 8009448:	2303      	movs	r3, #3
 800944a:	e000      	b.n	800944e <aci_gatt_add_char+0x4e>
 800944c:	2305      	movs	r3, #5
 800944e:	f107 0218 	add.w	r2, r7, #24
 8009452:	4413      	add	r3, r2
 8009454:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009458:	f107 0314 	add.w	r3, r7, #20
 800945c:	2203      	movs	r2, #3
 800945e:	2100      	movs	r1, #0
 8009460:	4618      	mov	r0, r3
 8009462:	f001 f823 	bl	800a4ac <Osal_MemSet>
  int index_input = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800946c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009470:	f107 020e 	add.w	r2, r7, #14
 8009474:	8812      	ldrh	r2, [r2, #0]
 8009476:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009478:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800947c:	3302      	adds	r3, #2
 800947e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009482:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009486:	f107 020d 	add.w	r2, r7, #13
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800948e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009492:	3301      	adds	r3, #1
 8009494:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009498:	f107 030d 	add.w	r3, r7, #13
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d002      	beq.n	80094a8 <aci_gatt_add_char+0xa8>
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d004      	beq.n	80094b0 <aci_gatt_add_char+0xb0>
 80094a6:	e007      	b.n	80094b8 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80094a8:	2302      	movs	r3, #2
 80094aa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80094ae:	e005      	b.n	80094bc <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80094b0:	2310      	movs	r3, #16
 80094b2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80094b6:	e001      	b.n	80094bc <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80094b8:	2347      	movs	r3, #71	; 0x47
 80094ba:	e086      	b.n	80095ca <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80094bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80094c0:	1cd8      	adds	r0, r3, #3
 80094c2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80094c6:	f107 0308 	add.w	r3, r7, #8
 80094ca:	6819      	ldr	r1, [r3, #0]
 80094cc:	f000 ffde 	bl	800a48c <Osal_MemCpy>
    index_input += size;
 80094d0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80094d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80094d8:	4413      	add	r3, r2
 80094da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80094de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094e2:	1dba      	adds	r2, r7, #6
 80094e4:	8812      	ldrh	r2, [r2, #0]
 80094e6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80094e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094ec:	3302      	adds	r3, #2
 80094ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80094f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094f6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80094fa:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80094fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009500:	3301      	adds	r3, #1
 8009502:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009506:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800950a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800950e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009510:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009514:	3301      	adds	r3, #1
 8009516:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800951a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800951e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009522:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009528:	3301      	adds	r3, #1
 800952a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800952e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009532:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009536:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009538:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800953c:	3301      	adds	r3, #1
 800953e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009542:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009546:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800954a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800954c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009550:	3301      	adds	r3, #1
 8009552:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009556:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800955a:	2218      	movs	r2, #24
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f000 ffa4 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009564:	233f      	movs	r3, #63	; 0x3f
 8009566:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800956a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800956e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009572:	f107 0318 	add.w	r3, r7, #24
 8009576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800957a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800957e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009582:	f107 0314 	add.w	r3, r7, #20
 8009586:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800958a:	2303      	movs	r3, #3
 800958c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009590:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fe4c 	bl	800a234 <hci_send_req>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	da01      	bge.n	80095a6 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80095a2:	23ff      	movs	r3, #255	; 0xff
 80095a4:	e011      	b.n	80095ca <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80095b0:	f107 0314 	add.w	r3, r7, #20
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	e008      	b.n	80095ca <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80095b8:	f107 0314 	add.w	r3, r7, #20
 80095bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80095c6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd90      	pop	{r4, r7, pc}

080095d4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80095d4:	b5b0      	push	{r4, r5, r7, lr}
 80095d6:	b0cc      	sub	sp, #304	; 0x130
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4605      	mov	r5, r0
 80095dc:	460c      	mov	r4, r1
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	1dbb      	adds	r3, r7, #6
 80095e4:	462a      	mov	r2, r5
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	1d3b      	adds	r3, r7, #4
 80095ea:	4622      	mov	r2, r4
 80095ec:	801a      	strh	r2, [r3, #0]
 80095ee:	1cfb      	adds	r3, r7, #3
 80095f0:	4602      	mov	r2, r0
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	1cbb      	adds	r3, r7, #2
 80095f6:	460a      	mov	r2, r1
 80095f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80095fa:	f107 0310 	add.w	r3, r7, #16
 80095fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009602:	f107 030f 	add.w	r3, r7, #15
 8009606:	2200      	movs	r2, #0
 8009608:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009614:	1dba      	adds	r2, r7, #6
 8009616:	8812      	ldrh	r2, [r2, #0]
 8009618:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800961a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800961e:	3302      	adds	r3, #2
 8009620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009628:	1d3a      	adds	r2, r7, #4
 800962a:	8812      	ldrh	r2, [r2, #0]
 800962c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800962e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009632:	3302      	adds	r3, #2
 8009634:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963c:	1cfa      	adds	r2, r7, #3
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009646:	3301      	adds	r3, #1
 8009648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800964c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009650:	1cba      	adds	r2, r7, #2
 8009652:	7812      	ldrb	r2, [r2, #0]
 8009654:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009656:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800965a:	3301      	adds	r3, #1
 800965c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009664:	1d98      	adds	r0, r3, #6
 8009666:	1cbb      	adds	r3, r7, #2
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009670:	f000 ff0c 	bl	800a48c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009674:	1cbb      	adds	r3, r7, #2
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800967c:	4413      	add	r3, r2
 800967e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009682:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009686:	2218      	movs	r2, #24
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f000 ff0e 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009690:	233f      	movs	r3, #63	; 0x3f
 8009692:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009696:	f44f 7383 	mov.w	r3, #262	; 0x106
 800969a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800969e:	f107 0310 	add.w	r3, r7, #16
 80096a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096ae:	f107 030f 	add.w	r3, r7, #15
 80096b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 fdb6 	bl	800a234 <hci_send_req>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da01      	bge.n	80096d2 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80096ce:	23ff      	movs	r3, #255	; 0xff
 80096d0:	e002      	b.n	80096d8 <aci_gatt_update_char_value+0x104>
  return status;
 80096d2:	f107 030f 	add.w	r3, r7, #15
 80096d6:	781b      	ldrb	r3, [r3, #0]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096de:	46bd      	mov	sp, r7
 80096e0:	bdb0      	pop	{r4, r5, r7, pc}

080096e2 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b0cc      	sub	sp, #304	; 0x130
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	4602      	mov	r2, r0
 80096ea:	1dbb      	adds	r3, r7, #6
 80096ec:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 80096ee:	f107 0310 	add.w	r3, r7, #16
 80096f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096f6:	f107 030f 	add.w	r3, r7, #15
 80096fa:	2200      	movs	r2, #0
 80096fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009708:	1dba      	adds	r2, r7, #6
 800970a:	8812      	ldrh	r2, [r2, #0]
 800970c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800970e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009712:	3302      	adds	r3, #2
 8009714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009718:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800971c:	2218      	movs	r2, #24
 800971e:	2100      	movs	r1, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fec3 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009726:	233f      	movs	r3, #63	; 0x3f
 8009728:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800972c:	f44f 7389 	mov.w	r3, #274	; 0x112
 8009730:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009734:	230f      	movs	r3, #15
 8009736:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800973a:	f107 0310 	add.w	r3, r7, #16
 800973e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009746:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800974a:	f107 030f 	add.w	r3, r7, #15
 800974e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009752:	2301      	movs	r3, #1
 8009754:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009758:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800975c:	2100      	movs	r1, #0
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fd68 	bl	800a234 <hci_send_req>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	da01      	bge.n	800976e <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 800976a:	23ff      	movs	r3, #255	; 0xff
 800976c:	e002      	b.n	8009774 <aci_gatt_disc_all_primary_services+0x92>
  return status;
 800976e:	f107 030f 	add.w	r3, r7, #15
 8009772:	781b      	ldrb	r3, [r3, #0]
}
 8009774:	4618      	mov	r0, r3
 8009776:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800977e:	b590      	push	{r4, r7, lr}
 8009780:	b0cd      	sub	sp, #308	; 0x134
 8009782:	af00      	add	r7, sp, #0
 8009784:	4604      	mov	r4, r0
 8009786:	4608      	mov	r0, r1
 8009788:	4611      	mov	r1, r2
 800978a:	1dbb      	adds	r3, r7, #6
 800978c:	4622      	mov	r2, r4
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	1d3b      	adds	r3, r7, #4
 8009792:	4602      	mov	r2, r0
 8009794:	801a      	strh	r2, [r3, #0]
 8009796:	1cbb      	adds	r3, r7, #2
 8009798:	460a      	mov	r2, r1
 800979a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800979c:	f107 0310 	add.w	r3, r7, #16
 80097a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097a4:	f107 030f 	add.w	r3, r7, #15
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80097b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b6:	1dba      	adds	r2, r7, #6
 80097b8:	8812      	ldrh	r2, [r2, #0]
 80097ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80097bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097c0:	3302      	adds	r3, #2
 80097c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 80097c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ca:	1d3a      	adds	r2, r7, #4
 80097cc:	8812      	ldrh	r2, [r2, #0]
 80097ce:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80097d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097d4:	3302      	adds	r3, #2
 80097d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80097da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097de:	1cba      	adds	r2, r7, #2
 80097e0:	8812      	ldrh	r2, [r2, #0]
 80097e2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80097e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097e8:	3302      	adds	r3, #2
 80097ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097f2:	2218      	movs	r2, #24
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fe58 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80097fc:	233f      	movs	r3, #63	; 0x3f
 80097fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 8009802:	f240 1315 	movw	r3, #277	; 0x115
 8009806:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800980a:	230f      	movs	r3, #15
 800980c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009810:	f107 0310 	add.w	r3, r7, #16
 8009814:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800981c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009820:	f107 030f 	add.w	r3, r7, #15
 8009824:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009828:	2301      	movs	r3, #1
 800982a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800982e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009832:	2100      	movs	r1, #0
 8009834:	4618      	mov	r0, r3
 8009836:	f000 fcfd 	bl	800a234 <hci_send_req>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	da01      	bge.n	8009844 <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 8009840:	23ff      	movs	r3, #255	; 0xff
 8009842:	e002      	b.n	800984a <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 8009844:	f107 030f 	add.w	r3, r7, #15
 8009848:	781b      	ldrb	r3, [r3, #0]
}
 800984a:	4618      	mov	r0, r3
 800984c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009850:	46bd      	mov	sp, r7
 8009852:	bd90      	pop	{r4, r7, pc}

08009854 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 8009854:	b590      	push	{r4, r7, lr}
 8009856:	b0cd      	sub	sp, #308	; 0x134
 8009858:	af00      	add	r7, sp, #0
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	1dbb      	adds	r3, r7, #6
 8009862:	4622      	mov	r2, r4
 8009864:	801a      	strh	r2, [r3, #0]
 8009866:	1d3b      	adds	r3, r7, #4
 8009868:	4602      	mov	r2, r0
 800986a:	801a      	strh	r2, [r3, #0]
 800986c:	1cbb      	adds	r3, r7, #2
 800986e:	460a      	mov	r2, r1
 8009870:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 8009872:	f107 0310 	add.w	r3, r7, #16
 8009876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800987a:	f107 030f 	add.w	r3, r7, #15
 800987e:	2200      	movs	r2, #0
 8009880:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988c:	1dba      	adds	r2, r7, #6
 800988e:	8812      	ldrh	r2, [r2, #0]
 8009890:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009896:	3302      	adds	r3, #2
 8009898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800989c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a0:	1d3a      	adds	r2, r7, #4
 80098a2:	8812      	ldrh	r2, [r2, #0]
 80098a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80098a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098aa:	3302      	adds	r3, #2
 80098ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80098b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b4:	1cba      	adds	r2, r7, #2
 80098b6:	8812      	ldrh	r2, [r2, #0]
 80098b8:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80098ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098be:	3302      	adds	r3, #2
 80098c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098c8:	2218      	movs	r2, #24
 80098ca:	2100      	movs	r1, #0
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fded 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80098d2:	233f      	movs	r3, #63	; 0x3f
 80098d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80098d8:	f240 1317 	movw	r3, #279	; 0x117
 80098dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80098e0:	230f      	movs	r3, #15
 80098e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80098e6:	f107 0310 	add.w	r3, r7, #16
 80098ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80098f6:	f107 030f 	add.w	r3, r7, #15
 80098fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80098fe:	2301      	movs	r3, #1
 8009900:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009904:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009908:	2100      	movs	r1, #0
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fc92 	bl	800a234 <hci_send_req>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	da01      	bge.n	800991a <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 8009916:	23ff      	movs	r3, #255	; 0xff
 8009918:	e002      	b.n	8009920 <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 800991a:	f107 030f 	add.w	r3, r7, #15
 800991e:	781b      	ldrb	r3, [r3, #0]
}
 8009920:	4618      	mov	r0, r3
 8009922:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009926:	46bd      	mov	sp, r7
 8009928:	bd90      	pop	{r4, r7, pc}

0800992a <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 800992a:	b590      	push	{r4, r7, lr}
 800992c:	b0cf      	sub	sp, #316	; 0x13c
 800992e:	af00      	add	r7, sp, #0
 8009930:	4604      	mov	r4, r0
 8009932:	4608      	mov	r0, r1
 8009934:	4611      	mov	r1, r2
 8009936:	1d3a      	adds	r2, r7, #4
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	f107 030e 	add.w	r3, r7, #14
 800993e:	4622      	mov	r2, r4
 8009940:	801a      	strh	r2, [r3, #0]
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	4602      	mov	r2, r0
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	f107 030b 	add.w	r3, r7, #11
 800994e:	460a      	mov	r2, r1
 8009950:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8009952:	f107 0318 	add.w	r3, r7, #24
 8009956:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800995a:	f107 0317 	add.w	r3, r7, #23
 800995e:	2200      	movs	r2, #0
 8009960:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009968:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800996c:	f107 020e 	add.w	r2, r7, #14
 8009970:	8812      	ldrh	r2, [r2, #0]
 8009972:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009974:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009978:	3302      	adds	r3, #2
 800997a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800997e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009982:	f107 020c 	add.w	r2, r7, #12
 8009986:	8812      	ldrh	r2, [r2, #0]
 8009988:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800998a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800998e:	3302      	adds	r3, #2
 8009990:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8009994:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009998:	f107 020b 	add.w	r2, r7, #11
 800999c:	7812      	ldrb	r2, [r2, #0]
 800999e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80099a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099a4:	3301      	adds	r3, #1
 80099a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80099aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099ae:	1d58      	adds	r0, r3, #5
 80099b0:	f107 030b 	add.w	r3, r7, #11
 80099b4:	781a      	ldrb	r2, [r3, #0]
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	6819      	ldr	r1, [r3, #0]
 80099ba:	f000 fd67 	bl	800a48c <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80099be:	f107 030b 	add.w	r3, r7, #11
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80099c8:	4413      	add	r3, r2
 80099ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80099d2:	2218      	movs	r2, #24
 80099d4:	2100      	movs	r1, #0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 fd68 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80099dc:	233f      	movs	r3, #63	; 0x3f
 80099de:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 80099e2:	f240 1321 	movw	r3, #289	; 0x121
 80099e6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80099ea:	230f      	movs	r3, #15
 80099ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80099f0:	f107 0318 	add.w	r3, r7, #24
 80099f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80099f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009a00:	f107 0317 	add.w	r3, r7, #23
 8009a04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fc0d 	bl	800a234 <hci_send_req>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da01      	bge.n	8009a24 <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 8009a20:	23ff      	movs	r3, #255	; 0xff
 8009a22:	e002      	b.n	8009a2a <aci_gatt_write_char_desc+0x100>
  return status;
 8009a24:	f107 0317 	add.w	r3, r7, #23
 8009a28:	781b      	ldrb	r3, [r3, #0]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd90      	pop	{r4, r7, pc}

08009a34 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b0cf      	sub	sp, #316	; 0x13c
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	1d3a      	adds	r2, r7, #4
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	f107 030e 	add.w	r3, r7, #14
 8009a48:	4622      	mov	r2, r4
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	f107 030c 	add.w	r3, r7, #12
 8009a50:	4602      	mov	r2, r0
 8009a52:	801a      	strh	r2, [r3, #0]
 8009a54:	f107 030b 	add.w	r3, r7, #11
 8009a58:	460a      	mov	r2, r1
 8009a5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8009a5c:	f107 0318 	add.w	r3, r7, #24
 8009a60:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8009a64:	f107 0317 	add.w	r3, r7, #23
 8009a68:	2200      	movs	r2, #0
 8009a6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a76:	f107 020e 	add.w	r2, r7, #14
 8009a7a:	8812      	ldrh	r2, [r2, #0]
 8009a7c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009a7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a82:	3302      	adds	r3, #2
 8009a84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8009a88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a8c:	f107 020c 	add.w	r2, r7, #12
 8009a90:	8812      	ldrh	r2, [r2, #0]
 8009a92:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009a94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a98:	3302      	adds	r3, #2
 8009a9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8009a9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009aa2:	f107 020b 	add.w	r2, r7, #11
 8009aa6:	7812      	ldrb	r2, [r2, #0]
 8009aa8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009aaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009aae:	3301      	adds	r3, #1
 8009ab0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8009ab4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009ab8:	1d58      	adds	r0, r3, #5
 8009aba:	f107 030b 	add.w	r3, r7, #11
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	1d3b      	adds	r3, r7, #4
 8009ac2:	6819      	ldr	r1, [r3, #0]
 8009ac4:	f000 fce2 	bl	800a48c <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009ac8:	f107 030b 	add.w	r3, r7, #11
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ad8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009adc:	2218      	movs	r2, #24
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 fce3 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ae6:	233f      	movs	r3, #63	; 0x3f
 8009ae8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8009aec:	f240 1323 	movw	r3, #291	; 0x123
 8009af0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009af4:	f107 0318 	add.w	r3, r7, #24
 8009af8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009afc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009b04:	f107 0317 	add.w	r3, r7, #23
 8009b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009b16:	2100      	movs	r1, #0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fb8b 	bl	800a234 <hci_send_req>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da01      	bge.n	8009b28 <aci_gatt_write_without_resp+0xf4>
    return BLE_STATUS_TIMEOUT;
 8009b24:	23ff      	movs	r3, #255	; 0xff
 8009b26:	e002      	b.n	8009b2e <aci_gatt_write_without_resp+0xfa>
  return status;
 8009b28:	f107 0317 	add.w	r3, r7, #23
 8009b2c:	781b      	ldrb	r3, [r3, #0]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd90      	pop	{r4, r7, pc}

08009b38 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b0cc      	sub	sp, #304	; 0x130
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	463b      	mov	r3, r7
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	1dfb      	adds	r3, r7, #7
 8009b44:	4602      	mov	r2, r0
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	1dbb      	adds	r3, r7, #6
 8009b4a:	460a      	mov	r2, r1
 8009b4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009b4e:	f107 0310 	add.w	r3, r7, #16
 8009b52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b56:	f107 030f 	add.w	r3, r7, #15
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b68:	1dfa      	adds	r2, r7, #7
 8009b6a:	7812      	ldrb	r2, [r2, #0]
 8009b6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b72:	3301      	adds	r3, #1
 8009b74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7c:	1dba      	adds	r2, r7, #6
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b86:	3301      	adds	r3, #1
 8009b88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b90:	1c98      	adds	r0, r3, #2
 8009b92:	1dbb      	adds	r3, r7, #6
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	463b      	mov	r3, r7
 8009b98:	6819      	ldr	r1, [r3, #0]
 8009b9a:	f000 fc77 	bl	800a48c <Osal_MemCpy>
  index_input += Length;
 8009b9e:	1dbb      	adds	r3, r7, #6
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009bb0:	2218      	movs	r2, #24
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fc79 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bba:	233f      	movs	r3, #63	; 0x3f
 8009bbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009bc6:	f107 0310 	add.w	r3, r7, #16
 8009bca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009bd6:	f107 030f 	add.w	r3, r7, #15
 8009bda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009be4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009be8:	2100      	movs	r1, #0
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 fb22 	bl	800a234 <hci_send_req>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da01      	bge.n	8009bfa <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009bf6:	23ff      	movs	r3, #255	; 0xff
 8009bf8:	e002      	b.n	8009c00 <aci_hal_write_config_data+0xc8>
  return status;
 8009bfa:	f107 030f 	add.w	r3, r7, #15
 8009bfe:	781b      	ldrb	r3, [r3, #0]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b0cc      	sub	sp, #304	; 0x130
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	4602      	mov	r2, r0
 8009c12:	1dfb      	adds	r3, r7, #7
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	1dbb      	adds	r3, r7, #6
 8009c18:	460a      	mov	r2, r1
 8009c1a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009c1c:	f107 0310 	add.w	r3, r7, #16
 8009c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c24:	f107 030f 	add.w	r3, r7, #15
 8009c28:	2200      	movs	r2, #0
 8009c2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c36:	1dfa      	adds	r2, r7, #7
 8009c38:	7812      	ldrb	r2, [r2, #0]
 8009c3a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c40:	3301      	adds	r3, #1
 8009c42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4a:	1dba      	adds	r2, r7, #6
 8009c4c:	7812      	ldrb	r2, [r2, #0]
 8009c4e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c54:	3301      	adds	r3, #1
 8009c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c5e:	2218      	movs	r2, #24
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fc22 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c68:	233f      	movs	r3, #63	; 0x3f
 8009c6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009c6e:	230f      	movs	r3, #15
 8009c70:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c84:	f107 030f 	add.w	r3, r7, #15
 8009c88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c96:	2100      	movs	r1, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 facb 	bl	800a234 <hci_send_req>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	da01      	bge.n	8009ca8 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8009ca4:	23ff      	movs	r3, #255	; 0xff
 8009ca6:	e002      	b.n	8009cae <aci_hal_set_tx_power_level+0xa4>
  return status;
 8009ca8:	f107 030f 	add.w	r3, r7, #15
 8009cac:	781b      	ldrb	r3, [r3, #0]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cc2:	f107 0308 	add.w	r3, r7, #8
 8009cc6:	2218      	movs	r2, #24
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fbee 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x03;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009cd8:	1dfb      	adds	r3, r7, #7
 8009cda:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ce0:	f107 0308 	add.w	r3, r7, #8
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 faa4 	bl	800a234 <hci_send_req>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	da01      	bge.n	8009cf6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009cf2:	23ff      	movs	r3, #255	; 0xff
 8009cf4:	e000      	b.n	8009cf8 <hci_reset+0x40>
  return status;
 8009cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8009d00:	b5b0      	push	{r4, r5, r7, lr}
 8009d02:	b0cc      	sub	sp, #304	; 0x130
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4605      	mov	r5, r0
 8009d08:	460c      	mov	r4, r1
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	1dbb      	adds	r3, r7, #6
 8009d10:	462a      	mov	r2, r5
 8009d12:	801a      	strh	r2, [r3, #0]
 8009d14:	1d3b      	adds	r3, r7, #4
 8009d16:	4622      	mov	r2, r4
 8009d18:	801a      	strh	r2, [r3, #0]
 8009d1a:	1cbb      	adds	r3, r7, #2
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	463b      	mov	r3, r7
 8009d22:	460a      	mov	r2, r1
 8009d24:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8009d26:	f107 0310 	add.w	r3, r7, #16
 8009d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d2e:	f107 030f 	add.w	r3, r7, #15
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d40:	1dba      	adds	r2, r7, #6
 8009d42:	8812      	ldrh	r2, [r2, #0]
 8009d44:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d4a:	3302      	adds	r3, #2
 8009d4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8009d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d54:	1d3a      	adds	r2, r7, #4
 8009d56:	8812      	ldrh	r2, [r2, #0]
 8009d58:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d5e:	3302      	adds	r3, #2
 8009d60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d68:	1cba      	adds	r2, r7, #2
 8009d6a:	8812      	ldrh	r2, [r2, #0]
 8009d6c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8009d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d72:	3302      	adds	r3, #2
 8009d74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8009d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d7c:	463a      	mov	r2, r7
 8009d7e:	8812      	ldrh	r2, [r2, #0]
 8009d80:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8009d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d86:	3302      	adds	r3, #2
 8009d88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8009d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d90:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8009d94:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8009d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d9a:	3302      	adds	r3, #2
 8009d9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8009da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009da4:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8009da8:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8009daa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dae:	3302      	adds	r3, #2
 8009db0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8009db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009db8:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8009dbc:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dc2:	3302      	adds	r3, #2
 8009dc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8009dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dcc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009dd0:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8009dd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8009ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009de4:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8009de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dea:	3301      	adds	r3, #1
 8009dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009df4:	2218      	movs	r2, #24
 8009df6:	2100      	movs	r1, #0
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fb57 	bl	800a4ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dfe:	233f      	movs	r3, #63	; 0x3f
 8009e00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8009e04:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8009e08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009e0c:	f107 0310 	add.w	r3, r7, #16
 8009e10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e1c:	f107 030f 	add.w	r3, r7, #15
 8009e20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f9ff 	bl	800a234 <hci_send_req>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	da01      	bge.n	8009e40 <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 8009e3c:	23ff      	movs	r3, #255	; 0xff
 8009e3e:	e002      	b.n	8009e46 <aci_l2cap_connection_parameter_update_resp+0x146>
  return status;
 8009e40:	f107 030f 	add.w	r3, r7, #15
 8009e44:	781b      	ldrb	r3, [r3, #0]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bdb0      	pop	{r4, r5, r7, pc}

08009e50 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e56:	f3ef 8310 	mrs	r3, PRIMASK
 8009e5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009e5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e60:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009e62:	1cbb      	adds	r3, r7, #2
 8009e64:	4619      	mov	r1, r3
 8009e66:	4812      	ldr	r0, [pc, #72]	; (8009eb0 <DbgTrace_TxCpltCallback+0x60>)
 8009e68:	f001 f8eb 	bl	800b042 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009e6c:	1cbb      	adds	r3, r7, #2
 8009e6e:	4619      	mov	r1, r3
 8009e70:	480f      	ldr	r0, [pc, #60]	; (8009eb0 <DbgTrace_TxCpltCallback+0x60>)
 8009e72:	f001 f9da 	bl	800b22a <CircularQueue_Sense>
 8009e76:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <DbgTrace_TxCpltCallback+0x46>
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009e88:	887b      	ldrh	r3, [r7, #2]
 8009e8a:	4a0a      	ldr	r2, [pc, #40]	; (8009eb4 <DbgTrace_TxCpltCallback+0x64>)
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6938      	ldr	r0, [r7, #16]
 8009e90:	f7f6 fcab 	bl	80007ea <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009e94:	e007      	b.n	8009ea6 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 8009e96:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <DbgTrace_TxCpltCallback+0x68>)
 8009e98:	2201      	movs	r2, #1
 8009e9a:	701a      	strb	r2, [r3, #0]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	607b      	str	r3, [r7, #4]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f383 8810 	msr	PRIMASK, r3
}
 8009ea6:	bf00      	nop
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	200002e8 	.word	0x200002e8
 8009eb4:	08009e51 	.word	0x08009e51
 8009eb8:	2000003d 	.word	0x2000003d

08009ebc <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009ec2:	f7f6 fc8c 	bl	80007de <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ed0:	4903      	ldr	r1, [pc, #12]	; (8009ee0 <DbgTraceInit+0x24>)
 8009ed2:	4804      	ldr	r0, [pc, #16]	; (8009ee4 <DbgTraceInit+0x28>)
 8009ed4:	f000 fe5c 	bl	800ab90 <CircularQueue_Init>
#endif 
#endif
  return;
 8009ed8:	bf00      	nop
}
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000308 	.word	0x20000308
 8009ee4:	200002e8 	.word	0x200002e8

08009ee8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 f805 	bl	8009f08 <DbgTraceWrite>
 8009efe:	4603      	mov	r3, r0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	; 0x28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f18:	f3ef 8310 	mrs	r3, PRIMASK
 8009f1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f1e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009f20:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d102      	bne.n	8009f30 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f2e:	e034      	b.n	8009f9a <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d006      	beq.n	8009f44 <DbgTraceWrite+0x3c>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d003      	beq.n	8009f44 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
 8009f42:	e02a      	b.n	8009f9a <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d027      	beq.n	8009f9a <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009f4e:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	2301      	movs	r3, #1
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	4812      	ldr	r0, [pc, #72]	; (8009fa4 <DbgTraceWrite+0x9c>)
 8009f5a:	f000 fe4b 	bl	800abf4 <CircularQueue_Add>
 8009f5e:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d014      	beq.n	8009f90 <DbgTraceWrite+0x88>
 8009f66:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <DbgTraceWrite+0xa0>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00f      	beq.n	8009f90 <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 8009f70:	4b0d      	ldr	r3, [pc, #52]	; (8009fa8 <DbgTraceWrite+0xa0>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	4a09      	ldr	r2, [pc, #36]	; (8009fac <DbgTraceWrite+0xa4>)
 8009f86:	4619      	mov	r1, r3
 8009f88:	69f8      	ldr	r0, [r7, #28]
 8009f8a:	f7f6 fc2e 	bl	80007ea <DbgOutputTraces>
 8009f8e:	e004      	b.n	8009f9a <DbgTraceWrite+0x92>
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3728      	adds	r7, #40	; 0x28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	200002e8 	.word	0x200002e8
 8009fa8:	2000003d 	.word	0x2000003d
 8009fac:	08009e51 	.word	0x08009e51

08009fb0 <EndDeviceManagement_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t EndDeviceManagement_Event_Handler(void *Event)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  EDS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2bff      	cmp	r3, #255	; 0xff
 8009fca:	d000      	beq.n	8009fce <EndDeviceManagement_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8009fcc:	e031      	b.n	800a032 <EndDeviceManagement_Event_Handler+0x82>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	3302      	adds	r3, #2
 8009fd2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f640 4301 	movw	r3, #3073	; 0xc01
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d000      	beq.n	8009fe6 <EndDeviceManagement_Event_Handler+0x36>
          break;
 8009fe4:	e024      	b.n	800a030 <EndDeviceManagement_Event_Handler+0x80>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	3302      	adds	r3, #2
 8009fea:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aEndDeviceManagementContext.EndDeviceStatusCharHdle + 2))
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	885b      	ldrh	r3, [r3, #2]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	4b12      	ldr	r3, [pc, #72]	; (800a040 <EndDeviceManagement_Event_Handler+0x90>)
 8009ff6:	885b      	ldrh	r3, [r3, #2]
 8009ff8:	3302      	adds	r3, #2
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d117      	bne.n	800a02e <EndDeviceManagement_Event_Handler+0x7e>
              return_value = SVCCTL_EvtAckFlowEnable;
 8009ffe:	2301      	movs	r3, #1
 800a000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	7a1b      	ldrb	r3, [r3, #8]
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d007      	beq.n	800a020 <EndDeviceManagement_Event_Handler+0x70>
                Notification.EDS_Evt_Opcode = EDS_STM_NOTIFY_ENABLED_EVT;
 800a010:	2301      	movs	r3, #1
 800a012:	723b      	strb	r3, [r7, #8]
                EDS_STM_App_Notification(&Notification);
 800a014:	f107 0308 	add.w	r3, r7, #8
 800a018:	4618      	mov	r0, r3
 800a01a:	f7f9 fd09 	bl	8003a30 <EDS_STM_App_Notification>
        break;
 800a01e:	e006      	b.n	800a02e <EndDeviceManagement_Event_Handler+0x7e>
                Notification.EDS_Evt_Opcode = EDS_STM_NOTIFY_DISABLED_EVT;
 800a020:	2300      	movs	r3, #0
 800a022:	723b      	strb	r3, [r7, #8]
                EDS_STM_App_Notification(&Notification);
 800a024:	f107 0308 	add.w	r3, r7, #8
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f9 fd01 	bl	8003a30 <EDS_STM_App_Notification>
        break;
 800a02e:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a030:	bf00      	nop
  }

  return(return_value);
 800a032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a036:	4618      	mov	r0, r3
 800a038:	3728      	adds	r7, #40	; 0x28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	2000024c 	.word	0x2000024c

0800a044 <EDS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void EDS_STM_Init(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08a      	sub	sp, #40	; 0x28
 800a048:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(EndDeviceManagement_Event_Handler);
 800a04a:	4831      	ldr	r0, [pc, #196]	; (800a110 <EDS_STM_Init+0xcc>)
 800a04c:	f001 fa38 	bl	800b4c0 <SVCCTL_RegisterSvcHandler>
     * service_max_attribute_record = 1 for End Device Mgt service +
     *                                2 for End Device Staus characteristic +
     *                                1 for client char configuration descriptor 
     *                                
     */
    COPY_EDM_SERVICE_UUID(uuid16.Char_UUID_128);
 800a050:	238f      	movs	r3, #143	; 0x8f
 800a052:	703b      	strb	r3, [r7, #0]
 800a054:	23e5      	movs	r3, #229	; 0xe5
 800a056:	707b      	strb	r3, [r7, #1]
 800a058:	23b3      	movs	r3, #179	; 0xb3
 800a05a:	70bb      	strb	r3, [r7, #2]
 800a05c:	23d5      	movs	r3, #213	; 0xd5
 800a05e:	70fb      	strb	r3, [r7, #3]
 800a060:	232e      	movs	r3, #46	; 0x2e
 800a062:	713b      	strb	r3, [r7, #4]
 800a064:	237f      	movs	r3, #127	; 0x7f
 800a066:	717b      	strb	r3, [r7, #5]
 800a068:	234a      	movs	r3, #74	; 0x4a
 800a06a:	71bb      	strb	r3, [r7, #6]
 800a06c:	2398      	movs	r3, #152	; 0x98
 800a06e:	71fb      	strb	r3, [r7, #7]
 800a070:	232a      	movs	r3, #42	; 0x2a
 800a072:	723b      	strb	r3, [r7, #8]
 800a074:	2348      	movs	r3, #72	; 0x48
 800a076:	727b      	strb	r3, [r7, #9]
 800a078:	237a      	movs	r3, #122	; 0x7a
 800a07a:	72bb      	strb	r3, [r7, #10]
 800a07c:	23cc      	movs	r3, #204	; 0xcc
 800a07e:	72fb      	strb	r3, [r7, #11]
 800a080:	2350      	movs	r3, #80	; 0x50
 800a082:	733b      	strb	r3, [r7, #12]
 800a084:	23fe      	movs	r3, #254	; 0xfe
 800a086:	737b      	strb	r3, [r7, #13]
 800a088:	2300      	movs	r3, #0
 800a08a:	73bb      	strb	r3, [r7, #14]
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800a090:	4639      	mov	r1, r7
 800a092:	4b20      	ldr	r3, [pc, #128]	; (800a114 <EDS_STM_Init+0xd0>)
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	2305      	movs	r3, #5
 800a098:	2201      	movs	r2, #1
 800a09a:	2002      	movs	r0, #2
 800a09c:	f7ff f901 	bl	80092a2 <aci_gatt_add_service>
                      &(aEndDeviceManagementContext.EndDeviceManagementSvcHdle));

    /**
     *  Add End Device Status Characteristic
     */
    COPY_EDM_STATUS_CHAR_UUID(uuid16.Char_UUID_128);
 800a0a0:	2319      	movs	r3, #25
 800a0a2:	703b      	strb	r3, [r7, #0]
 800a0a4:	23ed      	movs	r3, #237	; 0xed
 800a0a6:	707b      	strb	r3, [r7, #1]
 800a0a8:	2382      	movs	r3, #130	; 0x82
 800a0aa:	70bb      	strb	r3, [r7, #2]
 800a0ac:	23ae      	movs	r3, #174	; 0xae
 800a0ae:	70fb      	strb	r3, [r7, #3]
 800a0b0:	23ed      	movs	r3, #237	; 0xed
 800a0b2:	713b      	strb	r3, [r7, #4]
 800a0b4:	2321      	movs	r3, #33	; 0x21
 800a0b6:	717b      	strb	r3, [r7, #5]
 800a0b8:	234c      	movs	r3, #76	; 0x4c
 800a0ba:	71bb      	strb	r3, [r7, #6]
 800a0bc:	239d      	movs	r3, #157	; 0x9d
 800a0be:	71fb      	strb	r3, [r7, #7]
 800a0c0:	2341      	movs	r3, #65	; 0x41
 800a0c2:	723b      	strb	r3, [r7, #8]
 800a0c4:	2345      	movs	r3, #69	; 0x45
 800a0c6:	727b      	strb	r3, [r7, #9]
 800a0c8:	2322      	movs	r3, #34	; 0x22
 800a0ca:	72bb      	strb	r3, [r7, #10]
 800a0cc:	238e      	movs	r3, #142	; 0x8e
 800a0ce:	72fb      	strb	r3, [r7, #11]
 800a0d0:	2351      	movs	r3, #81	; 0x51
 800a0d2:	733b      	strb	r3, [r7, #12]
 800a0d4:	23fe      	movs	r3, #254	; 0xfe
 800a0d6:	737b      	strb	r3, [r7, #13]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73bb      	strb	r3, [r7, #14]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aEndDeviceManagementContext.EndDeviceManagementSvcHdle,
 800a0e0:	4b0c      	ldr	r3, [pc, #48]	; (800a114 <EDS_STM_Init+0xd0>)
 800a0e2:	8818      	ldrh	r0, [r3, #0]
 800a0e4:	463a      	mov	r2, r7
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <EDS_STM_Init+0xd4>)
 800a0e8:	9305      	str	r3, [sp, #20]
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	9303      	str	r3, [sp, #12]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	9302      	str	r3, [sp, #8]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	2312      	movs	r3, #18
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	2306      	movs	r3, #6
 800a100:	2102      	movs	r1, #2
 800a102:	f7ff f97d 	bl	8009400 <aci_gatt_add_char>
                      &(aEndDeviceManagementContext.EndDeviceStatusCharHdle));
    
     BLE_DBG_EDS_STM_MSG("-- End Device Managment Service (EDMS) is added Successfully %04X\n",
                 aEndDeviceManagementContext.EndDeviceManagementSvcHdle);

    return;
 800a106:	bf00      	nop
}
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	08009fb1 	.word	0x08009fb1
 800a114:	2000024c 	.word	0x2000024c
 800a118:	2000024e 	.word	0x2000024e

0800a11c <EDS_STM_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus EDS_STM_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af02      	add	r7, sp, #8
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a128:	2342      	movs	r3, #66	; 0x42
 800a12a:	73fb      	strb	r3, [r7, #15]
  
 
  switch(UUID)
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	f642 3260 	movw	r2, #11104	; 0x2b60
 800a132:	4293      	cmp	r3, r2
 800a134:	d000      	beq.n	800a138 <EDS_STM_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
     
      break;

    default:
      break;
 800a136:	e00c      	b.n	800a152 <EDS_STM_Update_Char+0x36>
      result = aci_gatt_update_char_value(aEndDeviceManagementContext.EndDeviceManagementSvcHdle,
 800a138:	4b08      	ldr	r3, [pc, #32]	; (800a15c <EDS_STM_Update_Char+0x40>)
 800a13a:	8818      	ldrh	r0, [r3, #0]
 800a13c:	4b07      	ldr	r3, [pc, #28]	; (800a15c <EDS_STM_Update_Char+0x40>)
 800a13e:	8859      	ldrh	r1, [r3, #2]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	2306      	movs	r3, #6
 800a146:	2200      	movs	r2, #0
 800a148:	f7ff fa44 	bl	80095d4 <aci_gatt_update_char_value>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
      break;
 800a150:	bf00      	nop
  }

  return result;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
}/* end BLE_SVC_LedButton_Update_Char() */
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	2000024c 	.word	0x2000024c

0800a160 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	4a08      	ldr	r2, [pc, #32]	; (800a190 <hci_init+0x30>)
 800a170:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a172:	4a08      	ldr	r2, [pc, #32]	; (800a194 <hci_init+0x34>)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a178:	4806      	ldr	r0, [pc, #24]	; (800a194 <hci_init+0x34>)
 800a17a:	f000 f973 	bl	800a464 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 f8d4 	bl	800a330 <TlInit>

  return;
 800a188:	bf00      	nop
}
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20001330 	.word	0x20001330
 800a194:	20001308 	.word	0x20001308

0800a198 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a19e:	4822      	ldr	r0, [pc, #136]	; (800a228 <hci_user_evt_proc+0x90>)
 800a1a0:	f000 fc52 	bl	800aa48 <LST_is_empty>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d12b      	bne.n	800a202 <hci_user_evt_proc+0x6a>
 800a1aa:	4b20      	ldr	r3, [pc, #128]	; (800a22c <hci_user_evt_proc+0x94>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d027      	beq.n	800a202 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a1b2:	f107 030c 	add.w	r3, r7, #12
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	481b      	ldr	r0, [pc, #108]	; (800a228 <hci_user_evt_proc+0x90>)
 800a1ba:	f000 fccc 	bl	800ab56 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a1be:	4b1c      	ldr	r3, [pc, #112]	; (800a230 <hci_user_evt_proc+0x98>)
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00c      	beq.n	800a1e0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a1ce:	4b18      	ldr	r3, [pc, #96]	; (800a230 <hci_user_evt_proc+0x98>)
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	1d3a      	adds	r2, r7, #4
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a1d8:	793a      	ldrb	r2, [r7, #4]
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <hci_user_evt_proc+0x94>)
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	e002      	b.n	800a1e6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a1e0:	4b12      	ldr	r3, [pc, #72]	; (800a22c <hci_user_evt_proc+0x94>)
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a1e6:	4b11      	ldr	r3, [pc, #68]	; (800a22c <hci_user_evt_proc+0x94>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f001 fb8b 	bl	800b90c <TL_MM_EvtDone>
 800a1f6:	e004      	b.n	800a202 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	480a      	ldr	r0, [pc, #40]	; (800a228 <hci_user_evt_proc+0x90>)
 800a1fe:	f000 fc43 	bl	800aa88 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a202:	4809      	ldr	r0, [pc, #36]	; (800a228 <hci_user_evt_proc+0x90>)
 800a204:	f000 fc20 	bl	800aa48 <LST_is_empty>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d107      	bne.n	800a21e <hci_user_evt_proc+0x86>
 800a20e:	4b07      	ldr	r3, [pc, #28]	; (800a22c <hci_user_evt_proc+0x94>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a216:	4804      	ldr	r0, [pc, #16]	; (800a228 <hci_user_evt_proc+0x90>)
 800a218:	f7f9 fbae 	bl	8003978 <hci_notify_asynch_evt>
  }


  return;
 800a21c:	bf00      	nop
 800a21e:	bf00      	nop
}
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000254 	.word	0x20000254
 800a22c:	20000260 	.word	0x20000260
 800a230:	20001308 	.word	0x20001308

0800a234 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a240:	2000      	movs	r0, #0
 800a242:	f000 f8cb 	bl	800a3dc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a246:	2300      	movs	r3, #0
 800a248:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	885b      	ldrh	r3, [r3, #2]
 800a24e:	b21b      	sxth	r3, r3
 800a250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a254:	b21a      	sxth	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	029b      	lsls	r3, r3, #10
 800a25c:	b21b      	sxth	r3, r3
 800a25e:	4313      	orrs	r3, r2
 800a260:	b21b      	sxth	r3, r3
 800a262:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	b2d9      	uxtb	r1, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	8bbb      	ldrh	r3, [r7, #28]
 800a270:	4618      	mov	r0, r3
 800a272:	f000 f88d 	bl	800a390 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a276:	e04e      	b.n	800a316 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a278:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a27c:	f7f9 fb94 	bl	80039a8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a280:	e043      	b.n	800a30a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a282:	f107 030c 	add.w	r3, r7, #12
 800a286:	4619      	mov	r1, r3
 800a288:	4828      	ldr	r0, [pc, #160]	; (800a32c <hci_send_req+0xf8>)
 800a28a:	f000 fc64 	bl	800ab56 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	7a5b      	ldrb	r3, [r3, #9]
 800a292:	2b0f      	cmp	r3, #15
 800a294:	d114      	bne.n	800a2c0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	330b      	adds	r3, #11
 800a29a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	885b      	ldrh	r3, [r3, #2]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	8bba      	ldrh	r2, [r7, #28]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d104      	bne.n	800a2b2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	7812      	ldrb	r2, [r2, #0]
 800a2b0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d027      	beq.n	800a30a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	77fb      	strb	r3, [r7, #31]
 800a2be:	e024      	b.n	800a30a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	330b      	adds	r3, #11
 800a2c4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	8bba      	ldrh	r2, [r7, #28]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d114      	bne.n	800a2fe <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	7a9b      	ldrb	r3, [r3, #10]
 800a2d8:	3b03      	subs	r3, #3
 800a2da:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	695a      	ldr	r2, [r3, #20]
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	bfa8      	it	ge
 800a2e6:	461a      	movge	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6918      	ldr	r0, [r3, #16]
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	1cd9      	adds	r1, r3, #3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f001 fe47 	bl	800bf8c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a306:	2301      	movs	r3, #1
 800a308:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a30a:	4808      	ldr	r0, [pc, #32]	; (800a32c <hci_send_req+0xf8>)
 800a30c:	f000 fb9c 	bl	800aa48 <LST_is_empty>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0b5      	beq.n	800a282 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a316:	7ffb      	ldrb	r3, [r7, #31]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0ad      	beq.n	800a278 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a31c:	2001      	movs	r0, #1
 800a31e:	f000 f85d 	bl	800a3dc <NotifyCmdStatus>

  return 0;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3720      	adds	r7, #32
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20001328 	.word	0x20001328

0800a330 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a338:	480f      	ldr	r0, [pc, #60]	; (800a378 <TlInit+0x48>)
 800a33a:	f000 fb75 	bl	800aa28 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a33e:	4a0f      	ldr	r2, [pc, #60]	; (800a37c <TlInit+0x4c>)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a344:	480e      	ldr	r0, [pc, #56]	; (800a380 <TlInit+0x50>)
 800a346:	f000 fb6f 	bl	800aa28 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a34a:	4b0e      	ldr	r3, [pc, #56]	; (800a384 <TlInit+0x54>)
 800a34c:	2201      	movs	r2, #1
 800a34e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a350:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <TlInit+0x58>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00a      	beq.n	800a36e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a35c:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <TlInit+0x5c>)
 800a35e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a360:	4b09      	ldr	r3, [pc, #36]	; (800a388 <TlInit+0x58>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f107 0208 	add.w	r2, r7, #8
 800a368:	4610      	mov	r0, r2
 800a36a:	4798      	blx	r3
  }

  return;
 800a36c:	bf00      	nop
 800a36e:	bf00      	nop
}
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20001328 	.word	0x20001328
 800a37c:	2000025c 	.word	0x2000025c
 800a380:	20000254 	.word	0x20000254
 800a384:	20000260 	.word	0x20000260
 800a388:	20001308 	.word	0x20001308
 800a38c:	0800a41d 	.word	0x0800a41d

0800a390 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	603a      	str	r2, [r7, #0]
 800a39a:	80fb      	strh	r3, [r7, #6]
 800a39c:	460b      	mov	r3, r1
 800a39e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <SendCmd+0x44>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	88fa      	ldrh	r2, [r7, #6]
 800a3a6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a3aa:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <SendCmd+0x44>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	797a      	ldrb	r2, [r7, #5]
 800a3b0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a3b2:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <SendCmd+0x44>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	797a      	ldrb	r2, [r7, #5]
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 fde5 	bl	800bf8c <memcpy>

  hciContext.io.Send(0,0);
 800a3c2:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <SendCmd+0x48>)
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	4798      	blx	r3

  return;
 800a3cc:	bf00      	nop
}
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	2000025c 	.word	0x2000025c
 800a3d8:	20001308 	.word	0x20001308

0800a3dc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d108      	bne.n	800a3fe <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <NotifyCmdStatus+0x3c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00d      	beq.n	800a410 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a3f4:	4b08      	ldr	r3, [pc, #32]	; (800a418 <NotifyCmdStatus+0x3c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a3fc:	e008      	b.n	800a410 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a3fe:	4b06      	ldr	r3, [pc, #24]	; (800a418 <NotifyCmdStatus+0x3c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d004      	beq.n	800a410 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a406:	4b04      	ldr	r3, [pc, #16]	; (800a418 <NotifyCmdStatus+0x3c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2001      	movs	r0, #1
 800a40c:	4798      	blx	r3
  return;
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
}
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20001330 	.word	0x20001330

0800a41c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	7a5b      	ldrb	r3, [r3, #9]
 800a428:	2b0f      	cmp	r3, #15
 800a42a:	d003      	beq.n	800a434 <TlEvtReceived+0x18>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	7a5b      	ldrb	r3, [r3, #9]
 800a430:	2b0e      	cmp	r3, #14
 800a432:	d107      	bne.n	800a444 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	4809      	ldr	r0, [pc, #36]	; (800a45c <TlEvtReceived+0x40>)
 800a438:	f000 fb4a 	bl	800aad0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a43c:	2000      	movs	r0, #0
 800a43e:	f7f9 faa8 	bl	8003992 <hci_cmd_resp_release>
 800a442:	e006      	b.n	800a452 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	4806      	ldr	r0, [pc, #24]	; (800a460 <TlEvtReceived+0x44>)
 800a448:	f000 fb42 	bl	800aad0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a44c:	4804      	ldr	r0, [pc, #16]	; (800a460 <TlEvtReceived+0x44>)
 800a44e:	f7f9 fa93 	bl	8003978 <hci_notify_asynch_evt>
  }

  return;
 800a452:	bf00      	nop
}
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20001328 	.word	0x20001328
 800a460:	20000254 	.word	0x20000254

0800a464 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a05      	ldr	r2, [pc, #20]	; (800a484 <hci_register_io_bus+0x20>)
 800a470:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a04      	ldr	r2, [pc, #16]	; (800a488 <hci_register_io_bus+0x24>)
 800a476:	611a      	str	r2, [r3, #16]

  return;
 800a478:	bf00      	nop
}
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	0800b685 	.word	0x0800b685
 800a488:	0800b6ed 	.word	0x0800b6ed

0800a48c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f001 fd75 	bl	800bf8c <memcpy>
 800a4a2:	4603      	mov	r3, r0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f001 fd70 	bl	800bfa2 <memset>
 800a4c2:	4603      	mov	r3, r0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	; (800a514 <OTP_Read+0x48>)
 800a4d8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a4da:	e002      	b.n	800a4e2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3b08      	subs	r3, #8
 800a4e0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3307      	adds	r3, #7
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	79fa      	ldrb	r2, [r7, #7]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d003      	beq.n	800a4f6 <OTP_Read+0x2a>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	4a09      	ldr	r2, [pc, #36]	; (800a518 <OTP_Read+0x4c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d1f2      	bne.n	800a4dc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3307      	adds	r3, #7
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	79fa      	ldrb	r2, [r7, #7]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d001      	beq.n	800a506 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a502:	2300      	movs	r3, #0
 800a504:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a506:	68fb      	ldr	r3, [r7, #12]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	1fff73f8 	.word	0x1fff73f8
 800a518:	1fff7000 	.word	0x1fff7000

0800a51c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08a      	sub	sp, #40	; 0x28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800a524:	2300      	movs	r3, #0
 800a526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3301      	adds	r3, #1
 800a52e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2bff      	cmp	r3, #255	; 0xff
 800a536:	d000      	beq.n	800a53a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800a538:	e04a      	b.n	800a5d0 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	3302      	adds	r3, #2
 800a53e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	b29b      	uxth	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	f640 4301 	movw	r3, #3073	; 0xc01
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d000      	beq.n	800a552 <PeerToPeer_Event_Handler+0x36>
          break;
 800a550:	e03d      	b.n	800a5ce <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	3302      	adds	r3, #2
 800a556:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	885b      	ldrh	r3, [r3, #2]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	4b1e      	ldr	r3, [pc, #120]	; (800a5dc <PeerToPeer_Event_Handler+0xc0>)
 800a562:	889b      	ldrh	r3, [r3, #4]
 800a564:	3302      	adds	r3, #2
 800a566:	429a      	cmp	r2, r3
 800a568:	d118      	bne.n	800a59c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800a56a:	2301      	movs	r3, #1
 800a56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	7a1b      	ldrb	r3, [r3, #8]
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d007      	beq.n	800a58c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800a57c:	2300      	movs	r3, #0
 800a57e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	4618      	mov	r0, r3
 800a586:	f7f9 fa77 	bl	8003a78 <P2PS_STM_App_Notification>
        break;
 800a58a:	e01f      	b.n	800a5cc <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800a58c:	2301      	movs	r3, #1
 800a58e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a590:	f107 0308 	add.w	r3, r7, #8
 800a594:	4618      	mov	r0, r3
 800a596:	f7f9 fa6f 	bl	8003a78 <P2PS_STM_App_Notification>
        break;
 800a59a:	e017      	b.n	800a5cc <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	885b      	ldrh	r3, [r3, #2]
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <PeerToPeer_Event_Handler+0xc0>)
 800a5a6:	885b      	ldrh	r3, [r3, #2]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d10e      	bne.n	800a5cc <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	88db      	ldrh	r3, [r3, #6]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800a5c2:	f107 0308 	add.w	r3, r7, #8
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7f9 fa56 	bl	8003a78 <P2PS_STM_App_Notification>
        break;
 800a5cc:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a5ce:	bf00      	nop
  }

  return(return_value);
 800a5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3728      	adds	r7, #40	; 0x28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20000264 	.word	0x20000264

0800a5e0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08a      	sub	sp, #40	; 0x28
 800a5e4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800a5e6:	484a      	ldr	r0, [pc, #296]	; (800a710 <P2PS_STM_Init+0x130>)
 800a5e8:	f000 ff6a 	bl	800b4c0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800a5ec:	238f      	movs	r3, #143	; 0x8f
 800a5ee:	703b      	strb	r3, [r7, #0]
 800a5f0:	23e5      	movs	r3, #229	; 0xe5
 800a5f2:	707b      	strb	r3, [r7, #1]
 800a5f4:	23b3      	movs	r3, #179	; 0xb3
 800a5f6:	70bb      	strb	r3, [r7, #2]
 800a5f8:	23d5      	movs	r3, #213	; 0xd5
 800a5fa:	70fb      	strb	r3, [r7, #3]
 800a5fc:	232e      	movs	r3, #46	; 0x2e
 800a5fe:	713b      	strb	r3, [r7, #4]
 800a600:	237f      	movs	r3, #127	; 0x7f
 800a602:	717b      	strb	r3, [r7, #5]
 800a604:	234a      	movs	r3, #74	; 0x4a
 800a606:	71bb      	strb	r3, [r7, #6]
 800a608:	2398      	movs	r3, #152	; 0x98
 800a60a:	71fb      	strb	r3, [r7, #7]
 800a60c:	232a      	movs	r3, #42	; 0x2a
 800a60e:	723b      	strb	r3, [r7, #8]
 800a610:	2348      	movs	r3, #72	; 0x48
 800a612:	727b      	strb	r3, [r7, #9]
 800a614:	237a      	movs	r3, #122	; 0x7a
 800a616:	72bb      	strb	r3, [r7, #10]
 800a618:	23cc      	movs	r3, #204	; 0xcc
 800a61a:	72fb      	strb	r3, [r7, #11]
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	733b      	strb	r3, [r7, #12]
 800a620:	23fe      	movs	r3, #254	; 0xfe
 800a622:	737b      	strb	r3, [r7, #13]
 800a624:	2300      	movs	r3, #0
 800a626:	73bb      	strb	r3, [r7, #14]
 800a628:	2300      	movs	r3, #0
 800a62a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800a62c:	4639      	mov	r1, r7
 800a62e:	4b39      	ldr	r3, [pc, #228]	; (800a714 <P2PS_STM_Init+0x134>)
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	2308      	movs	r3, #8
 800a634:	2201      	movs	r2, #1
 800a636:	2002      	movs	r0, #2
 800a638:	f7fe fe33 	bl	80092a2 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800a63c:	2319      	movs	r3, #25
 800a63e:	703b      	strb	r3, [r7, #0]
 800a640:	23ed      	movs	r3, #237	; 0xed
 800a642:	707b      	strb	r3, [r7, #1]
 800a644:	2382      	movs	r3, #130	; 0x82
 800a646:	70bb      	strb	r3, [r7, #2]
 800a648:	23ae      	movs	r3, #174	; 0xae
 800a64a:	70fb      	strb	r3, [r7, #3]
 800a64c:	23ed      	movs	r3, #237	; 0xed
 800a64e:	713b      	strb	r3, [r7, #4]
 800a650:	2321      	movs	r3, #33	; 0x21
 800a652:	717b      	strb	r3, [r7, #5]
 800a654:	234c      	movs	r3, #76	; 0x4c
 800a656:	71bb      	strb	r3, [r7, #6]
 800a658:	239d      	movs	r3, #157	; 0x9d
 800a65a:	71fb      	strb	r3, [r7, #7]
 800a65c:	2341      	movs	r3, #65	; 0x41
 800a65e:	723b      	strb	r3, [r7, #8]
 800a660:	2345      	movs	r3, #69	; 0x45
 800a662:	727b      	strb	r3, [r7, #9]
 800a664:	2322      	movs	r3, #34	; 0x22
 800a666:	72bb      	strb	r3, [r7, #10]
 800a668:	238e      	movs	r3, #142	; 0x8e
 800a66a:	72fb      	strb	r3, [r7, #11]
 800a66c:	2341      	movs	r3, #65	; 0x41
 800a66e:	733b      	strb	r3, [r7, #12]
 800a670:	23fe      	movs	r3, #254	; 0xfe
 800a672:	737b      	strb	r3, [r7, #13]
 800a674:	2300      	movs	r3, #0
 800a676:	73bb      	strb	r3, [r7, #14]
 800a678:	2300      	movs	r3, #0
 800a67a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a67c:	4b25      	ldr	r3, [pc, #148]	; (800a714 <P2PS_STM_Init+0x134>)
 800a67e:	8818      	ldrh	r0, [r3, #0]
 800a680:	463a      	mov	r2, r7
 800a682:	4b25      	ldr	r3, [pc, #148]	; (800a718 <P2PS_STM_Init+0x138>)
 800a684:	9305      	str	r3, [sp, #20]
 800a686:	2301      	movs	r3, #1
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	230a      	movs	r3, #10
 800a68c:	9303      	str	r3, [sp, #12]
 800a68e:	2301      	movs	r3, #1
 800a690:	9302      	str	r3, [sp, #8]
 800a692:	2300      	movs	r3, #0
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	2306      	movs	r3, #6
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	2302      	movs	r3, #2
 800a69c:	2102      	movs	r1, #2
 800a69e:	f7fe feaf 	bl	8009400 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800a6a2:	2319      	movs	r3, #25
 800a6a4:	703b      	strb	r3, [r7, #0]
 800a6a6:	23ed      	movs	r3, #237	; 0xed
 800a6a8:	707b      	strb	r3, [r7, #1]
 800a6aa:	2382      	movs	r3, #130	; 0x82
 800a6ac:	70bb      	strb	r3, [r7, #2]
 800a6ae:	23ae      	movs	r3, #174	; 0xae
 800a6b0:	70fb      	strb	r3, [r7, #3]
 800a6b2:	23ed      	movs	r3, #237	; 0xed
 800a6b4:	713b      	strb	r3, [r7, #4]
 800a6b6:	2321      	movs	r3, #33	; 0x21
 800a6b8:	717b      	strb	r3, [r7, #5]
 800a6ba:	234c      	movs	r3, #76	; 0x4c
 800a6bc:	71bb      	strb	r3, [r7, #6]
 800a6be:	239d      	movs	r3, #157	; 0x9d
 800a6c0:	71fb      	strb	r3, [r7, #7]
 800a6c2:	2341      	movs	r3, #65	; 0x41
 800a6c4:	723b      	strb	r3, [r7, #8]
 800a6c6:	2345      	movs	r3, #69	; 0x45
 800a6c8:	727b      	strb	r3, [r7, #9]
 800a6ca:	2322      	movs	r3, #34	; 0x22
 800a6cc:	72bb      	strb	r3, [r7, #10]
 800a6ce:	238e      	movs	r3, #142	; 0x8e
 800a6d0:	72fb      	strb	r3, [r7, #11]
 800a6d2:	2342      	movs	r3, #66	; 0x42
 800a6d4:	733b      	strb	r3, [r7, #12]
 800a6d6:	23fe      	movs	r3, #254	; 0xfe
 800a6d8:	737b      	strb	r3, [r7, #13]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73bb      	strb	r3, [r7, #14]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	; (800a714 <P2PS_STM_Init+0x134>)
 800a6e4:	8818      	ldrh	r0, [r3, #0]
 800a6e6:	463a      	mov	r2, r7
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <P2PS_STM_Init+0x13c>)
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	9304      	str	r3, [sp, #16]
 800a6f0:	230a      	movs	r3, #10
 800a6f2:	9303      	str	r3, [sp, #12]
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	2302      	movs	r3, #2
 800a702:	2102      	movs	r1, #2
 800a704:	f7fe fe7c 	bl	8009400 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800a708:	bf00      	nop
}
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	0800a51d 	.word	0x0800a51d
 800a714:	20000264 	.word	0x20000264
 800a718:	20000266 	.word	0x20000266
 800a71c:	20000268 	.word	0x20000268

0800a720 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af02      	add	r7, sp, #8
 800a726:	4603      	mov	r3, r0
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a72c:	2342      	movs	r3, #66	; 0x42
 800a72e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800a730:	88fb      	ldrh	r3, [r7, #6]
 800a732:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800a736:	4293      	cmp	r3, r2
 800a738:	d000      	beq.n	800a73c <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800a73a:	e00c      	b.n	800a756 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a73c:	4b08      	ldr	r3, [pc, #32]	; (800a760 <P2PS_STM_App_Update_Char+0x40>)
 800a73e:	8818      	ldrh	r0, [r3, #0]
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <P2PS_STM_App_Update_Char+0x40>)
 800a742:	8899      	ldrh	r1, [r3, #4]
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	2302      	movs	r3, #2
 800a74a:	2200      	movs	r2, #0
 800a74c:	f7fe ff42 	bl	80095d4 <aci_gatt_update_char_value>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]
      break;
 800a754:	bf00      	nop
  }

  return result;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20000264 	.word	0x20000264

0800a764 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a76c:	f107 030c 	add.w	r3, r7, #12
 800a770:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2121      	movs	r1, #33	; 0x21
 800a77c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a780:	f000 f888 	bl	800a894 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	330b      	adds	r3, #11
 800a788:	78db      	ldrb	r3, [r3, #3]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b088      	sub	sp, #32
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a79a:	f107 030c 	add.w	r3, r7, #12
 800a79e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	210f      	movs	r1, #15
 800a7aa:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a7ae:	f000 f871 	bl	800a894 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	330b      	adds	r3, #11
 800a7b6:	78db      	ldrb	r3, [r3, #3]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	4a08      	ldr	r2, [pc, #32]	; (800a7f0 <shci_init+0x30>)
 800a7d0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a7d2:	4a08      	ldr	r2, [pc, #32]	; (800a7f4 <shci_init+0x34>)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a7d8:	4806      	ldr	r0, [pc, #24]	; (800a7f4 <shci_init+0x34>)
 800a7da:	f000 f911 	bl	800aa00 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f894 	bl	800a910 <TlInit>

  return;
 800a7e8:	bf00      	nop
}
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20001354 	.word	0x20001354
 800a7f4:	20001334 	.word	0x20001334

0800a7f8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a7fe:	4822      	ldr	r0, [pc, #136]	; (800a888 <shci_user_evt_proc+0x90>)
 800a800:	f000 f922 	bl	800aa48 <LST_is_empty>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d12b      	bne.n	800a862 <shci_user_evt_proc+0x6a>
 800a80a:	4b20      	ldr	r3, [pc, #128]	; (800a88c <shci_user_evt_proc+0x94>)
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d027      	beq.n	800a862 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a812:	f107 030c 	add.w	r3, r7, #12
 800a816:	4619      	mov	r1, r3
 800a818:	481b      	ldr	r0, [pc, #108]	; (800a888 <shci_user_evt_proc+0x90>)
 800a81a:	f000 f99c 	bl	800ab56 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a81e:	4b1c      	ldr	r3, [pc, #112]	; (800a890 <shci_user_evt_proc+0x98>)
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00c      	beq.n	800a840 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a82a:	2301      	movs	r3, #1
 800a82c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a82e:	4b18      	ldr	r3, [pc, #96]	; (800a890 <shci_user_evt_proc+0x98>)
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	1d3a      	adds	r2, r7, #4
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a838:	793a      	ldrb	r2, [r7, #4]
 800a83a:	4b14      	ldr	r3, [pc, #80]	; (800a88c <shci_user_evt_proc+0x94>)
 800a83c:	701a      	strb	r2, [r3, #0]
 800a83e:	e002      	b.n	800a846 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a840:	4b12      	ldr	r3, [pc, #72]	; (800a88c <shci_user_evt_proc+0x94>)
 800a842:	2201      	movs	r2, #1
 800a844:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a846:	4b11      	ldr	r3, [pc, #68]	; (800a88c <shci_user_evt_proc+0x94>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d004      	beq.n	800a858 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4618      	mov	r0, r3
 800a852:	f001 f85b 	bl	800b90c <TL_MM_EvtDone>
 800a856:	e004      	b.n	800a862 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4619      	mov	r1, r3
 800a85c:	480a      	ldr	r0, [pc, #40]	; (800a888 <shci_user_evt_proc+0x90>)
 800a85e:	f000 f913 	bl	800aa88 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a862:	4809      	ldr	r0, [pc, #36]	; (800a888 <shci_user_evt_proc+0x90>)
 800a864:	f000 f8f0 	bl	800aa48 <LST_is_empty>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d107      	bne.n	800a87e <shci_user_evt_proc+0x86>
 800a86e:	4b07      	ldr	r3, [pc, #28]	; (800a88c <shci_user_evt_proc+0x94>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a876:	4804      	ldr	r0, [pc, #16]	; (800a888 <shci_user_evt_proc+0x90>)
 800a878:	f7f6 f895 	bl	80009a6 <shci_notify_asynch_evt>
  }


  return;
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
}
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	2000029c 	.word	0x2000029c
 800a88c:	200002ac 	.word	0x200002ac
 800a890:	20001334 	.word	0x20001334

0800a894 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60ba      	str	r2, [r7, #8]
 800a89c:	607b      	str	r3, [r7, #4]
 800a89e:	4603      	mov	r3, r0
 800a8a0:	81fb      	strh	r3, [r7, #14]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f000 f864 	bl	800a974 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a8ac:	4b16      	ldr	r3, [pc, #88]	; (800a908 <shci_send+0x74>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	89fa      	ldrh	r2, [r7, #14]
 800a8b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a8b6:	4b14      	ldr	r3, [pc, #80]	; (800a908 <shci_send+0x74>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	7b7a      	ldrb	r2, [r7, #13]
 800a8bc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <shci_send+0x74>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	330c      	adds	r3, #12
 800a8c4:	7b7a      	ldrb	r2, [r7, #13]
 800a8c6:	68b9      	ldr	r1, [r7, #8]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 fb5f 	bl	800bf8c <memcpy>

  shciContext.io.Send(0,0);
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <shci_send+0x78>)
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a8d8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a8dc:	f7f6 f87b 	bl	80009d6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f103 0008 	add.w	r0, r3, #8
 800a8e6:	4b08      	ldr	r3, [pc, #32]	; (800a908 <shci_send+0x74>)
 800a8e8:	6819      	ldr	r1, [r3, #0]
 800a8ea:	4b07      	ldr	r3, [pc, #28]	; (800a908 <shci_send+0x74>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	789b      	ldrb	r3, [r3, #2]
 800a8f0:	3303      	adds	r3, #3
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f001 fb4a 	bl	800bf8c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	f000 f83b 	bl	800a974 <Cmd_SetStatus>

  return;
 800a8fe:	bf00      	nop
}
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	200002a8 	.word	0x200002a8
 800a90c:	20001334 	.word	0x20001334

0800a910 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a918:	4a10      	ldr	r2, [pc, #64]	; (800a95c <TlInit+0x4c>)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a91e:	4810      	ldr	r0, [pc, #64]	; (800a960 <TlInit+0x50>)
 800a920:	f000 f882 	bl	800aa28 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a924:	2001      	movs	r0, #1
 800a926:	f000 f825 	bl	800a974 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a92a:	4b0e      	ldr	r3, [pc, #56]	; (800a964 <TlInit+0x54>)
 800a92c:	2201      	movs	r2, #1
 800a92e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a930:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <TlInit+0x58>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00c      	beq.n	800a952 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a93c:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <TlInit+0x5c>)
 800a93e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a940:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <TlInit+0x60>)
 800a942:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a944:	4b08      	ldr	r3, [pc, #32]	; (800a968 <TlInit+0x58>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f107 020c 	add.w	r2, r7, #12
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
  }

  return;
 800a950:	bf00      	nop
 800a952:	bf00      	nop
}
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	200002a8 	.word	0x200002a8
 800a960:	2000029c 	.word	0x2000029c
 800a964:	200002ac 	.word	0x200002ac
 800a968:	20001334 	.word	0x20001334
 800a96c:	0800a9c5 	.word	0x0800a9c5
 800a970:	0800a9dd 	.word	0x0800a9dd

0800a974 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10b      	bne.n	800a99c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a984:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <Cmd_SetStatus+0x48>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a98c:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <Cmd_SetStatus+0x48>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2000      	movs	r0, #0
 800a992:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <Cmd_SetStatus+0x4c>)
 800a996:	2200      	movs	r2, #0
 800a998:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a99a:	e00b      	b.n	800a9b4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a99c:	4b08      	ldr	r3, [pc, #32]	; (800a9c0 <Cmd_SetStatus+0x4c>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a9a2:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <Cmd_SetStatus+0x48>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a9aa:	4b04      	ldr	r3, [pc, #16]	; (800a9bc <Cmd_SetStatus+0x48>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	4798      	blx	r3
  return;
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
}
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20001354 	.word	0x20001354
 800a9c0:	200002a4 	.word	0x200002a4

0800a9c4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7f5 fff7 	bl	80009c0 <shci_cmd_resp_release>

  return;
 800a9d2:	bf00      	nop
}
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	4805      	ldr	r0, [pc, #20]	; (800a9fc <TlUserEvtReceived+0x20>)
 800a9e8:	f000 f872 	bl	800aad0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a9ec:	4803      	ldr	r0, [pc, #12]	; (800a9fc <TlUserEvtReceived+0x20>)
 800a9ee:	f7f5 ffda 	bl	80009a6 <shci_notify_asynch_evt>

  return;
 800a9f2:	bf00      	nop
}
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	2000029c 	.word	0x2000029c

0800aa00 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a05      	ldr	r2, [pc, #20]	; (800aa20 <shci_register_io_bus+0x20>)
 800aa0c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a04      	ldr	r2, [pc, #16]	; (800aa24 <shci_register_io_bus+0x24>)
 800aa12:	611a      	str	r2, [r3, #16]

  return;
 800aa14:	bf00      	nop
}
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	0800b799 	.word	0x0800b799
 800aa24:	0800b7ed 	.word	0x0800b7ed

0800aa28 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa50:	f3ef 8310 	mrs	r3, PRIMASK
 800aa54:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa5a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d102      	bne.n	800aa6c <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
 800aa6a:	e001      	b.n	800aa70 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	75fb      	strb	r3, [r7, #23]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa92:	f3ef 8310 	mrs	r3, PRIMASK
 800aa96:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa98:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa9c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	605a      	str	r2, [r3, #4]
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aac4:	bf00      	nop
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aada:	f3ef 8310 	mrs	r3, PRIMASK
 800aade:	60fb      	str	r3, [r7, #12]
  return(result);
 800aae0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aae4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab0c:	bf00      	nop
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab20:	f3ef 8310 	mrs	r3, PRIMASK
 800ab24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab2a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	6812      	ldr	r2, [r2, #0]
 800ab34:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	6852      	ldr	r2, [r2, #4]
 800ab3e:	605a      	str	r2, [r3, #4]
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b086      	sub	sp, #24
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab60:	f3ef 8310 	mrs	r3, PRIMASK
 800ab64:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab6a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff ffcd 	bl	800ab18 <LST_remove_node>
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab88:	bf00      	nop
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	887a      	ldrh	r2, [r7, #2]
 800abc6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	7e3a      	ldrb	r2, [r7, #24]
 800abcc:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800abce:	7e3b      	ldrb	r3, [r7, #24]
 800abd0:	f003 0302 	and.w	r3, r3, #2
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d006      	beq.n	800abe6 <CircularQueue_Init+0x56>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	891b      	ldrh	r3, [r3, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800abe0:	f04f 33ff 	mov.w	r3, #4294967295
 800abe4:	e000      	b.n	800abe8 <CircularQueue_Init+0x58>
  }
  return 0;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08e      	sub	sp, #56	; 0x38
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	4613      	mov	r3, r2
 800ac02:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800ac04:	2300      	movs	r3, #0
 800ac06:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800ac08:	2300      	movs	r3, #0
 800ac0a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800ac10:	2300      	movs	r3, #0
 800ac12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac14:	2300      	movs	r3, #0
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800ac18:	2300      	movs	r3, #0
 800ac1a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	891b      	ldrh	r3, [r3, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <CircularQueue_Add+0x38>
 800ac28:	2302      	movs	r3, #2
 800ac2a:	e000      	b.n	800ac2e <CircularQueue_Add+0x3a>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d02a      	beq.n	800ac8e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	891b      	ldrh	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d123      	bne.n	800ac88 <CircularQueue_Add+0x94>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	4413      	add	r3, r2
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6819      	ldr	r1, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	1c58      	adds	r0, r3, #1
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	4298      	cmp	r0, r3
 800ac5e:	d306      	bcc.n	800ac6e <CircularQueue_Add+0x7a>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6918      	ldr	r0, [r3, #16]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	1ac3      	subs	r3, r0, r3
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	e002      	b.n	800ac74 <CircularQueue_Add+0x80>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	3301      	adds	r3, #1
 800ac74:	440b      	add	r3, r1
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	021b      	lsls	r3, r3, #8
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4413      	add	r3, r2
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	3302      	adds	r3, #2
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	e001      	b.n	800ac8c <CircularQueue_Add+0x98>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	891b      	ldrh	r3, [r3, #8]
 800ac8c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	891b      	ldrh	r3, [r3, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	891b      	ldrh	r3, [r3, #8]
 800ac9a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	691a      	ldr	r2, [r3, #16]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d307      	bcc.n	800acb8 <CircularQueue_Add+0xc4>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6919      	ldr	r1, [r3, #16]
 800acb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acb2:	440b      	add	r3, r1
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	e000      	b.n	800acba <CircularQueue_Add+0xc6>
 800acb8:	2300      	movs	r3, #0
 800acba:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800acbc:	88fa      	ldrh	r2, [r7, #6]
 800acbe:	7ffb      	ldrb	r3, [r7, #31]
 800acc0:	4413      	add	r3, r2
 800acc2:	461a      	mov	r2, r3
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	fb03 f302 	mul.w	r3, r3, r2
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	429a      	cmp	r2, r3
 800acce:	d80b      	bhi.n	800ace8 <CircularQueue_Add+0xf4>
 800acd0:	88fa      	ldrh	r2, [r7, #6]
 800acd2:	7ffb      	ldrb	r3, [r7, #31]
 800acd4:	4413      	add	r3, r2
 800acd6:	461a      	mov	r2, r3
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	fbb3 f1f2 	udiv	r1, r3, r2
 800acde:	fb02 f201 	mul.w	r2, r2, r1
 800ace2:	1a9b      	subs	r3, r3, r2
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	e000      	b.n	800acea <CircularQueue_Add+0xf6>
 800ace8:	2300      	movs	r3, #0
 800acea:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800acec:	7dfa      	ldrb	r2, [r7, #23]
 800acee:	7ffb      	ldrb	r3, [r7, #31]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	bf8c      	ite	hi
 800acf4:	2301      	movhi	r3, #1
 800acf6:	2300      	movls	r3, #0
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800acfc:	7fbb      	ldrb	r3, [r7, #30]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d008      	beq.n	800ad14 <CircularQueue_Add+0x120>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	7f1b      	ldrb	r3, [r3, #28]
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <CircularQueue_Add+0x120>
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	e000      	b.n	800ad16 <CircularQueue_Add+0x122>
 800ad14:	8bbb      	ldrh	r3, [r7, #28]
 800ad16:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ad18:	7fbb      	ldrb	r3, [r7, #30]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d008      	beq.n	800ad30 <CircularQueue_Add+0x13c>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	7f1b      	ldrb	r3, [r3, #28]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <CircularQueue_Add+0x13c>
 800ad2a:	7ffb      	ldrb	r3, [r7, #31]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	e000      	b.n	800ad32 <CircularQueue_Add+0x13e>
 800ad30:	8bbb      	ldrh	r3, [r7, #28]
 800ad32:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ad34:	88fb      	ldrh	r3, [r7, #6]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 817e 	beq.w	800b038 <CircularQueue_Add+0x444>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	695a      	ldr	r2, [r3, #20]
 800ad40:	88f9      	ldrh	r1, [r7, #6]
 800ad42:	7ffb      	ldrb	r3, [r7, #31]
 800ad44:	440b      	add	r3, r1
 800ad46:	4619      	mov	r1, r3
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	fb03 f301 	mul.w	r3, r3, r1
 800ad4e:	441a      	add	r2, r3
 800ad50:	8bbb      	ldrh	r3, [r7, #28]
 800ad52:	441a      	add	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	f200 816d 	bhi.w	800b038 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ad5e:	2300      	movs	r3, #0
 800ad60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad62:	e14a      	b.n	800affa <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	691a      	ldr	r2, [r3, #16]
 800ad68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad6a:	441a      	add	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d307      	bcc.n	800ad84 <CircularQueue_Add+0x190>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	691a      	ldr	r2, [r3, #16]
 800ad78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad7a:	441a      	add	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	e003      	b.n	800ad8c <CircularQueue_Add+0x198>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	691a      	ldr	r2, [r3, #16]
 800ad88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad8a:	4413      	add	r3, r2
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	891b      	ldrh	r3, [r3, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d130      	bne.n	800ae00 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	1c59      	adds	r1, r3, #1
 800ada6:	6339      	str	r1, [r7, #48]	; 0x30
 800ada8:	4413      	add	r3, r2
 800adaa:	88fa      	ldrh	r2, [r7, #6]
 800adac:	b2d2      	uxtb	r2, r2
 800adae:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d304      	bcc.n	800adc4 <CircularQueue_Add+0x1d0>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	e000      	b.n	800adc6 <CircularQueue_Add+0x1d2>
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800adc8:	88fb      	ldrh	r3, [r7, #6]
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	b298      	uxth	r0, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	1c59      	adds	r1, r3, #1
 800add6:	6339      	str	r1, [r7, #48]	; 0x30
 800add8:	4413      	add	r3, r2
 800adda:	b2c2      	uxtb	r2, r0
 800addc:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d304      	bcc.n	800adf2 <CircularQueue_Add+0x1fe>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	e000      	b.n	800adf4 <CircularQueue_Add+0x200>
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	1c9a      	adds	r2, r3, #2
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800ae00:	88fa      	ldrh	r2, [r7, #6]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6859      	ldr	r1, [r3, #4]
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	1acb      	subs	r3, r1, r3
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	bf28      	it	cs
 800ae0e:	4613      	movcs	r3, r2
 800ae10:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800ae12:	88fb      	ldrh	r3, [r7, #6]
 800ae14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d007      	beq.n	800ae2a <CircularQueue_Add+0x236>
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d225      	bcs.n	800ae6e <CircularQueue_Add+0x27a>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	7f1b      	ldrb	r3, [r3, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d121      	bne.n	800ae6e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	18d0      	adds	r0, r2, r3
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae36:	fb02 f303 	mul.w	r3, r2, r3
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae40:	4619      	mov	r1, r3
 800ae42:	f001 f8a3 	bl	800bf8c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	695a      	ldr	r2, [r3, #20]
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	441a      	add	r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800ae52:	2300      	movs	r3, #0
 800ae54:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ae5a:	88fa      	ldrh	r2, [r7, #6]
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ae62:	7ffb      	ldrb	r3, [r7, #31]
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	88fb      	ldrh	r3, [r7, #6]
 800ae68:	4413      	add	r3, r2
 800ae6a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ae6c:	e0a4      	b.n	800afb8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 80a1 	beq.w	800afb8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	7f1b      	ldrb	r3, [r3, #28]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d03a      	beq.n	800aef8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	891b      	ldrh	r3, [r3, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10d      	bne.n	800aea6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	3b02      	subs	r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	22ff      	movs	r2, #255	; 0xff
 800ae96:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	4413      	add	r3, r2
 800aea2:	22ff      	movs	r2, #255	; 0xff
 800aea4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	695a      	ldr	r2, [r3, #20]
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	441a      	add	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800aeba:	2300      	movs	r3, #0
 800aebc:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	891b      	ldrh	r3, [r3, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d16f      	bne.n	800afa6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	1c59      	adds	r1, r3, #1
 800aece:	6339      	str	r1, [r7, #48]	; 0x30
 800aed0:	4413      	add	r3, r2
 800aed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aed4:	b2d2      	uxtb	r2, r2
 800aed6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	0a18      	lsrs	r0, r3, #8
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	1c59      	adds	r1, r3, #1
 800aee4:	6339      	str	r1, [r7, #48]	; 0x30
 800aee6:	4413      	add	r3, r2
 800aee8:	b2c2      	uxtb	r2, r0
 800aeea:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	1c9a      	adds	r2, r3, #2
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	615a      	str	r2, [r3, #20]
 800aef6:	e056      	b.n	800afa6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	7f1b      	ldrb	r3, [r3, #28]
 800aefc:	f003 0302 	and.w	r3, r3, #2
 800af00:	2b00      	cmp	r3, #0
 800af02:	d050      	beq.n	800afa6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	891b      	ldrh	r3, [r3, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d14a      	bne.n	800afa2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	3b02      	subs	r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af18:	b2d2      	uxtb	r2, r2
 800af1a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	0a19      	lsrs	r1, r3, #8
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	3b01      	subs	r3, #1
 800af28:	4413      	add	r3, r2
 800af2a:	b2ca      	uxtb	r2, r1
 800af2c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	18d0      	adds	r0, r2, r3
 800af36:	88fb      	ldrh	r3, [r7, #6]
 800af38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af3a:	fb02 f303 	mul.w	r3, r2, r3
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	4413      	add	r3, r2
 800af42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af44:	4619      	mov	r1, r3
 800af46:	f001 f821 	bl	800bf8c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	695a      	ldr	r2, [r3, #20]
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	441a      	add	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800af5a:	88fa      	ldrh	r2, [r7, #6]
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800af6c:	2300      	movs	r3, #0
 800af6e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	1c59      	adds	r1, r3, #1
 800af78:	6339      	str	r1, [r7, #48]	; 0x30
 800af7a:	4413      	add	r3, r2
 800af7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7e:	b2d2      	uxtb	r2, r2
 800af80:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	0a18      	lsrs	r0, r3, #8
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	1c59      	adds	r1, r3, #1
 800af8e:	6339      	str	r1, [r7, #48]	; 0x30
 800af90:	4413      	add	r3, r2
 800af92:	b2c2      	uxtb	r2, r0
 800af94:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	1c9a      	adds	r2, r3, #2
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	615a      	str	r2, [r3, #20]
 800afa0:	e001      	b.n	800afa6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	e049      	b.n	800b03a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800afa6:	7ffb      	ldrb	r3, [r7, #31]
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	b29b      	uxth	r3, r3
 800afae:	4413      	add	r3, r2
 800afb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d015      	beq.n	800afea <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	18d0      	adds	r0, r2, r3
 800afc6:	88fb      	ldrh	r3, [r7, #6]
 800afc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afca:	fb02 f203 	mul.w	r2, r2, r3
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	4413      	add	r3, r2
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	4413      	add	r3, r2
 800afd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afd8:	4619      	mov	r1, r3
 800afda:	f000 ffd7 	bl	800bf8c <memcpy>
        q->byteCount += NbBytesToCopy;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	695a      	ldr	r2, [r3, #20]
 800afe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe4:	441a      	add	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800aff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff6:	3301      	adds	r3, #1
 800aff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800affa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	f4ff aeb0 	bcc.w	800ad64 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6919      	ldr	r1, [r3, #16]
 800b00c:	7ffb      	ldrb	r3, [r7, #31]
 800b00e:	4419      	add	r1, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	4299      	cmp	r1, r3
 800b016:	d307      	bcc.n	800b028 <CircularQueue_Add+0x434>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6919      	ldr	r1, [r3, #16]
 800b01c:	7ffb      	ldrb	r3, [r7, #31]
 800b01e:	4419      	add	r1, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	1acb      	subs	r3, r1, r3
 800b026:	e003      	b.n	800b030 <CircularQueue_Add+0x43c>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6919      	ldr	r1, [r3, #16]
 800b02c:	7ffb      	ldrb	r3, [r7, #31]
 800b02e:	440b      	add	r3, r1
 800b030:	4413      	add	r3, r2
 800b032:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	e000      	b.n	800b03a <CircularQueue_Add+0x446>
    return NULL;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3738      	adds	r7, #56	; 0x38
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b04c:	2300      	movs	r3, #0
 800b04e:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800b050:	2300      	movs	r3, #0
 800b052:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	891b      	ldrh	r3, [r3, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <CircularQueue_Remove+0x1e>
 800b05c:	2302      	movs	r3, #2
 800b05e:	e000      	b.n	800b062 <CircularQueue_Remove+0x20>
 800b060:	2300      	movs	r3, #0
 800b062:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	2200      	movs	r2, #0
 800b068:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 80d4 	beq.w	800b21c <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	891b      	ldrh	r3, [r3, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d121      	bne.n	800b0c0 <CircularQueue_Remove+0x7e>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	4413      	add	r3, r2
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	b29a      	uxth	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6819      	ldr	r1, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	1c58      	adds	r0, r3, #1
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	4298      	cmp	r0, r3
 800b09a:	d306      	bcc.n	800b0aa <CircularQueue_Remove+0x68>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68d8      	ldr	r0, [r3, #12]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	1ac3      	subs	r3, r0, r3
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	e002      	b.n	800b0b0 <CircularQueue_Remove+0x6e>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	440b      	add	r3, r1
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	021b      	lsls	r3, r3, #8
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	4413      	add	r3, r2
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	e001      	b.n	800b0c4 <CircularQueue_Remove+0x82>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	891b      	ldrh	r3, [r3, #8]
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	7f1b      	ldrb	r3, [r3, #28]
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d059      	beq.n	800b188 <CircularQueue_Remove+0x146>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	7f1b      	ldrb	r3, [r3, #28]
 800b0d8:	f003 0302 	and.w	r3, r3, #2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d153      	bne.n	800b188 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d103      	bne.n	800b0f4 <CircularQueue_Remove+0xb2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	891b      	ldrh	r3, [r3, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d012      	beq.n	800b11a <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d943      	bls.n	800b188 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	891b      	ldrh	r3, [r3, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d03f      	beq.n	800b188 <CircularQueue_Remove+0x146>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	8912      	ldrh	r2, [r2, #8]
 800b116:	4293      	cmp	r3, r2
 800b118:	d236      	bcs.n	800b188 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	695a      	ldr	r2, [r3, #20]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68d9      	ldr	r1, [r3, #12]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	1acb      	subs	r3, r1, r3
 800b128:	441a      	add	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	891b      	ldrh	r3, [r3, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d121      	bne.n	800b180 <CircularQueue_Remove+0x13e>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	4413      	add	r3, r2
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	b29a      	uxth	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6819      	ldr	r1, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	1c58      	adds	r0, r3, #1
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	4298      	cmp	r0, r3
 800b15a:	d306      	bcc.n	800b16a <CircularQueue_Remove+0x128>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68d8      	ldr	r0, [r3, #12]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	1ac3      	subs	r3, r0, r3
 800b166:	3301      	adds	r3, #1
 800b168:	e002      	b.n	800b170 <CircularQueue_Remove+0x12e>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	3301      	adds	r3, #1
 800b170:	440b      	add	r3, r1
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	b29b      	uxth	r3, r3
 800b17a:	4413      	add	r3, r2
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	e001      	b.n	800b184 <CircularQueue_Remove+0x142>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	891b      	ldrh	r3, [r3, #8]
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	68d9      	ldr	r1, [r3, #12]
 800b190:	7afb      	ldrb	r3, [r7, #11]
 800b192:	4419      	add	r1, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	4299      	cmp	r1, r3
 800b19a:	d307      	bcc.n	800b1ac <CircularQueue_Remove+0x16a>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68d9      	ldr	r1, [r3, #12]
 800b1a0:	7afb      	ldrb	r3, [r7, #11]
 800b1a2:	4419      	add	r1, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	1acb      	subs	r3, r1, r3
 800b1aa:	e003      	b.n	800b1b4 <CircularQueue_Remove+0x172>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68d9      	ldr	r1, [r3, #12]
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	440b      	add	r3, r1
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	8812      	ldrh	r2, [r2, #0]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	7afa      	ldrb	r2, [r7, #11]
 800b1c4:	440a      	add	r2, r1
 800b1c6:	1a9a      	subs	r2, r3, r2
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01e      	beq.n	800b212 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	8812      	ldrh	r2, [r2, #0]
 800b1dc:	441a      	add	r2, r3
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d30a      	bcc.n	800b200 <CircularQueue_Remove+0x1be>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	8812      	ldrh	r2, [r2, #0]
 800b1f2:	441a      	add	r2, r3
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	441a      	add	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	e006      	b.n	800b20e <CircularQueue_Remove+0x1cc>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	8812      	ldrh	r2, [r2, #0]
 800b208:	441a      	add	r2, r3
 800b20a:	7afb      	ldrb	r3, [r7, #11]
 800b20c:	4413      	add	r3, r2
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	1e5a      	subs	r2, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800b21c:	68fb      	ldr	r3, [r7, #12]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b087      	sub	sp, #28
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	891b      	ldrh	r3, [r3, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <CircularQueue_Sense+0x1e>
 800b244:	2302      	movs	r3, #2
 800b246:	e000      	b.n	800b24a <CircularQueue_Sense+0x20>
 800b248:	2300      	movs	r3, #0
 800b24a:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2200      	movs	r2, #0
 800b250:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8093 	beq.w	800b386 <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	891b      	ldrh	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d121      	bne.n	800b2b2 <CircularQueue_Sense+0x88>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	4413      	add	r3, r2
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6819      	ldr	r1, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	1c58      	adds	r0, r3, #1
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	4298      	cmp	r0, r3
 800b28c:	d306      	bcc.n	800b29c <CircularQueue_Sense+0x72>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68d8      	ldr	r0, [r3, #12]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	1ac3      	subs	r3, r0, r3
 800b298:	3301      	adds	r3, #1
 800b29a:	e002      	b.n	800b2a2 <CircularQueue_Sense+0x78>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	440b      	add	r3, r1
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	021b      	lsls	r3, r3, #8
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	4413      	add	r3, r2
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	e001      	b.n	800b2b6 <CircularQueue_Sense+0x8c>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	891b      	ldrh	r3, [r3, #8]
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7f1b      	ldrb	r3, [r3, #28]
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d04a      	beq.n	800b35c <CircularQueue_Sense+0x132>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	7f1b      	ldrb	r3, [r3, #28]
 800b2ca:	f003 0302 	and.w	r3, r3, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d144      	bne.n	800b35c <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d103      	bne.n	800b2e6 <CircularQueue_Sense+0xbc>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	891b      	ldrh	r3, [r3, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d012      	beq.n	800b30c <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68da      	ldr	r2, [r3, #12]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d934      	bls.n	800b35c <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	891b      	ldrh	r3, [r3, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d030      	beq.n	800b35c <CircularQueue_Sense+0x132>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	8912      	ldrh	r2, [r2, #8]
 800b308:	4293      	cmp	r3, r2
 800b30a:	d227      	bcs.n	800b35c <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b30c:	2300      	movs	r3, #0
 800b30e:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	891b      	ldrh	r3, [r3, #8]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d11d      	bne.n	800b354 <CircularQueue_Sense+0x12a>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	4413      	add	r3, r2
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	b29a      	uxth	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6819      	ldr	r1, [r3, #0]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	1c58      	adds	r0, r3, #1
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	4298      	cmp	r0, r3
 800b332:	d305      	bcc.n	800b340 <CircularQueue_Sense+0x116>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	6938      	ldr	r0, [r7, #16]
 800b33a:	1ac3      	subs	r3, r0, r3
 800b33c:	3301      	adds	r3, #1
 800b33e:	e001      	b.n	800b344 <CircularQueue_Sense+0x11a>
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	3301      	adds	r3, #1
 800b344:	440b      	add	r3, r1
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	021b      	lsls	r3, r3, #8
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	4413      	add	r3, r2
 800b350:	b29b      	uxth	r3, r3
 800b352:	e001      	b.n	800b358 <CircularQueue_Sense+0x12e>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	891b      	ldrh	r3, [r3, #8]
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	7bf9      	ldrb	r1, [r7, #15]
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	4419      	add	r1, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	4299      	cmp	r1, r3
 800b36c:	d306      	bcc.n	800b37c <CircularQueue_Sense+0x152>
 800b36e:	7bf9      	ldrb	r1, [r7, #15]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	4419      	add	r1, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	1acb      	subs	r3, r1, r3
 800b37a:	e002      	b.n	800b382 <CircularQueue_Sense+0x158>
 800b37c:	7bf9      	ldrb	r1, [r7, #15]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	440b      	add	r3, r1
 800b382:	4413      	add	r3, r2
 800b384:	617b      	str	r3, [r7, #20]
  }
  return x;
 800b386:	697b      	ldr	r3, [r7, #20]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	371c      	adds	r7, #28
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b394:	b480      	push	{r7}
 800b396:	af00      	add	r7, sp, #0
  return;
 800b398:	bf00      	nop
}
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	af00      	add	r7, sp, #0
  return;
 800b3a6:	bf00      	nop
}
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <DIS_Init>:
__weak void DIS_Init( void )
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
  return;
 800b3b4:	bf00      	nop
}
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <HIDS_Init>:
__weak void EDS_STM_Init( void )
{
  return;
}
__weak void HIDS_Init( void )
{
 800b3be:	b480      	push	{r7}
 800b3c0:	af00      	add	r7, sp, #0
  return;
 800b3c2:	bf00      	nop
}
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <HRS_Init>:
__weak void HRS_Init( void )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
  return;
 800b3d0:	bf00      	nop
}
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <HTS_Init>:
__weak void HTS_Init( void )
{
 800b3da:	b480      	push	{r7}
 800b3dc:	af00      	add	r7, sp, #0
  return;
 800b3de:	bf00      	nop
}
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <IAS_Init>:
__weak void IAS_Init( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  return;
 800b3ec:	bf00      	nop
}
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <LLS_Init>:
__weak void LLS_Init( void )
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	af00      	add	r7, sp, #0
  return;
 800b3fa:	bf00      	nop
}
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <TPS_Init>:
__weak void TPS_Init( void )
{
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0
  return;
 800b408:	bf00      	nop
}
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b412:	b480      	push	{r7}
 800b414:	af00      	add	r7, sp, #0
  return;
 800b416:	bf00      	nop
}
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
  return;
 800b424:	bf00      	nop
}
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <MESH_Init>:
__weak void MESH_Init( void )
{
 800b42e:	b480      	push	{r7}
 800b430:	af00      	add	r7, sp, #0
  return;
 800b432:	bf00      	nop
}
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
  return;
 800b440:	bf00      	nop
}
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800b44a:	b480      	push	{r7}
 800b44c:	af00      	add	r7, sp, #0
  return;
 800b44e:	bf00      	nop
}
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b45c:	4b04      	ldr	r3, [pc, #16]	; (800b470 <SVCCTL_Init+0x18>)
 800b45e:	2200      	movs	r2, #0
 800b460:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b462:	4b04      	ldr	r3, [pc, #16]	; (800b474 <SVCCTL_Init+0x1c>)
 800b464:	2200      	movs	r2, #0
 800b466:	731a      	strb	r2, [r3, #12]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b468:	f000 f806 	bl	800b478 <SVCCTL_SvcInit>

  return;
 800b46c:	bf00      	nop
}
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	2000026c 	.word	0x2000026c
 800b474:	2000028c 	.word	0x2000028c

0800b478 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	af00      	add	r7, sp, #0
  BLS_Init();
 800b47c:	f7ff ff8a 	bl	800b394 <BLS_Init>

  CRS_STM_Init();
 800b480:	f7ff ff8f 	bl	800b3a2 <CRS_STM_Init>

  DIS_Init();
 800b484:	f7ff ff94 	bl	800b3b0 <DIS_Init>

  EDS_STM_Init();
 800b488:	f7fe fddc 	bl	800a044 <EDS_STM_Init>

  HIDS_Init();
 800b48c:	f7ff ff97 	bl	800b3be <HIDS_Init>

  HRS_Init();
 800b490:	f7ff ff9c 	bl	800b3cc <HRS_Init>

  HTS_Init();
 800b494:	f7ff ffa1 	bl	800b3da <HTS_Init>

  IAS_Init();
 800b498:	f7ff ffa6 	bl	800b3e8 <IAS_Init>

  LLS_Init();
 800b49c:	f7ff ffab 	bl	800b3f6 <LLS_Init>

  TPS_Init();
 800b4a0:	f7ff ffb0 	bl	800b404 <TPS_Init>

  MOTENV_STM_Init();
 800b4a4:	f7ff ffb5 	bl	800b412 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b4a8:	f7ff f89a 	bl	800a5e0 <P2PS_STM_Init>

  OTAS_STM_Init();
 800b4ac:	f7ff ffb8 	bl	800b420 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b4b0:	f7ff ffc4 	bl	800b43c <BVOPUS_STM_Init>

  MESH_Init();
 800b4b4:	f7ff ffbb 	bl	800b42e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b4b8:	f7ff ffc7 	bl	800b44a <SVCCTL_InitCustomSvc>
  
  return;
 800b4bc:	bf00      	nop
}
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b4c8:	4b09      	ldr	r3, [pc, #36]	; (800b4f0 <SVCCTL_RegisterSvcHandler+0x30>)
 800b4ca:	7f1b      	ldrb	r3, [r3, #28]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4a08      	ldr	r2, [pc, #32]	; (800b4f0 <SVCCTL_RegisterSvcHandler+0x30>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b4d6:	4b06      	ldr	r3, [pc, #24]	; (800b4f0 <SVCCTL_RegisterSvcHandler+0x30>)
 800b4d8:	7f1b      	ldrb	r3, [r3, #28]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <SVCCTL_RegisterSvcHandler+0x30>)
 800b4e0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800b4e2:	bf00      	nop
}
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	2000026c 	.word	0x2000026c

0800b4f4 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800b4fc:	4b09      	ldr	r3, [pc, #36]	; (800b524 <SVCCTL_RegisterCltHandler+0x30>)
 800b4fe:	7b1b      	ldrb	r3, [r3, #12]
 800b500:	4619      	mov	r1, r3
 800b502:	4a08      	ldr	r2, [pc, #32]	; (800b524 <SVCCTL_RegisterCltHandler+0x30>)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800b50a:	4b06      	ldr	r3, [pc, #24]	; (800b524 <SVCCTL_RegisterCltHandler+0x30>)
 800b50c:	7b1b      	ldrb	r3, [r3, #12]
 800b50e:	3301      	adds	r3, #1
 800b510:	b2da      	uxtb	r2, r3
 800b512:	4b04      	ldr	r3, [pc, #16]	; (800b524 <SVCCTL_RegisterCltHandler+0x30>)
 800b514:	731a      	strb	r2, [r3, #12]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800b516:	bf00      	nop
}
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	2000028c 	.word	0x2000028c

0800b528 <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3301      	adds	r3, #1
 800b534:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b536:	2300      	movs	r3, #0
 800b538:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2bff      	cmp	r3, #255	; 0xff
 800b540:	d000      	beq.n	800b544 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b542:	e03f      	b.n	800b5c4 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	3302      	adds	r3, #2
 800b548:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	b29b      	uxth	r3, r3
 800b550:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b558:	d000      	beq.n	800b55c <SVCCTL_UserEvtRx+0x34>
          break;
 800b55a:	e032      	b.n	800b5c2 <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b55c:	2300      	movs	r3, #0
 800b55e:	757b      	strb	r3, [r7, #21]
 800b560:	e00d      	b.n	800b57e <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b562:	7d7b      	ldrb	r3, [r7, #21]
 800b564:	4a25      	ldr	r2, [pc, #148]	; (800b5fc <SVCCTL_UserEvtRx+0xd4>)
 800b566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	4798      	blx	r3
 800b56e:	4603      	mov	r3, r0
 800b570:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d108      	bne.n	800b58a <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b578:	7d7b      	ldrb	r3, [r7, #21]
 800b57a:	3301      	adds	r3, #1
 800b57c:	757b      	strb	r3, [r7, #21]
 800b57e:	4b1f      	ldr	r3, [pc, #124]	; (800b5fc <SVCCTL_UserEvtRx+0xd4>)
 800b580:	7f1b      	ldrb	r3, [r3, #28]
 800b582:	7d7a      	ldrb	r2, [r7, #21]
 800b584:	429a      	cmp	r2, r3
 800b586:	d3ec      	bcc.n	800b562 <SVCCTL_UserEvtRx+0x3a>
 800b588:	e000      	b.n	800b58c <SVCCTL_UserEvtRx+0x64>
              break;
 800b58a:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 800b58c:	2300      	movs	r3, #0
 800b58e:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800b590:	2300      	movs	r3, #0
 800b592:	757b      	strb	r3, [r7, #21]
 800b594:	e00d      	b.n	800b5b2 <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800b596:	7d7b      	ldrb	r3, [r7, #21]
 800b598:	4a19      	ldr	r2, [pc, #100]	; (800b600 <SVCCTL_UserEvtRx+0xd8>)
 800b59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4798      	blx	r3
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d108      	bne.n	800b5be <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800b5ac:	7d7b      	ldrb	r3, [r7, #21]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	757b      	strb	r3, [r7, #21]
 800b5b2:	4b13      	ldr	r3, [pc, #76]	; (800b600 <SVCCTL_UserEvtRx+0xd8>)
 800b5b4:	7b1b      	ldrb	r3, [r3, #12]
 800b5b6:	7d7a      	ldrb	r2, [r7, #21]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d3ec      	bcc.n	800b596 <SVCCTL_UserEvtRx+0x6e>
          break;
 800b5bc:	e000      	b.n	800b5c0 <SVCCTL_UserEvtRx+0x98>
              break;
 800b5be:	bf00      	nop
          break;
 800b5c0:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b5c2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d009      	beq.n	800b5de <SVCCTL_UserEvtRx+0xb6>
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d00a      	beq.n	800b5e4 <SVCCTL_UserEvtRx+0xbc>
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7f6 ffa4 	bl	8002520 <SVCCTL_App_Notification>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	75bb      	strb	r3, [r7, #22]
      break;
 800b5dc:	e008      	b.n	800b5f0 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	75bb      	strb	r3, [r7, #22]
      break;
 800b5e2:	e005      	b.n	800b5f0 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	75bb      	strb	r3, [r7, #22]
      break;
 800b5e8:	e002      	b.n	800b5f0 <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	75bb      	strb	r3, [r7, #22]
      break;
 800b5ee:	bf00      	nop
  }

  return (return_status);
 800b5f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	2000026c 	.word	0x2000026c
 800b600:	2000028c 	.word	0x2000028c

0800b604 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b608:	f7f9 f8d4 	bl	80047b4 <HW_IPCC_Enable>

  return;
 800b60c:	bf00      	nop
}
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <TL_Init>:


void TL_Init( void )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b614:	4b10      	ldr	r3, [pc, #64]	; (800b658 <TL_Init+0x48>)
 800b616:	4a11      	ldr	r2, [pc, #68]	; (800b65c <TL_Init+0x4c>)
 800b618:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b61a:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <TL_Init+0x48>)
 800b61c:	4a10      	ldr	r2, [pc, #64]	; (800b660 <TL_Init+0x50>)
 800b61e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b620:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <TL_Init+0x48>)
 800b622:	4a10      	ldr	r2, [pc, #64]	; (800b664 <TL_Init+0x54>)
 800b624:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b626:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <TL_Init+0x48>)
 800b628:	4a0f      	ldr	r2, [pc, #60]	; (800b668 <TL_Init+0x58>)
 800b62a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <TL_Init+0x48>)
 800b62e:	4a0f      	ldr	r2, [pc, #60]	; (800b66c <TL_Init+0x5c>)
 800b630:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b632:	4b09      	ldr	r3, [pc, #36]	; (800b658 <TL_Init+0x48>)
 800b634:	4a0e      	ldr	r2, [pc, #56]	; (800b670 <TL_Init+0x60>)
 800b636:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b638:	4b07      	ldr	r3, [pc, #28]	; (800b658 <TL_Init+0x48>)
 800b63a:	4a0e      	ldr	r2, [pc, #56]	; (800b674 <TL_Init+0x64>)
 800b63c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b63e:	4b06      	ldr	r3, [pc, #24]	; (800b658 <TL_Init+0x48>)
 800b640:	4a0d      	ldr	r2, [pc, #52]	; (800b678 <TL_Init+0x68>)
 800b642:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b644:	4b04      	ldr	r3, [pc, #16]	; (800b658 <TL_Init+0x48>)
 800b646:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <TL_Init+0x6c>)
 800b648:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b64a:	4b03      	ldr	r3, [pc, #12]	; (800b658 <TL_Init+0x48>)
 800b64c:	4a0c      	ldr	r2, [pc, #48]	; (800b680 <TL_Init+0x70>)
 800b64e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b650:	f7f9 f8c0 	bl	80047d4 <HW_IPCC_Init>

  return;
 800b654:	bf00      	nop
}
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20030000 	.word	0x20030000
 800b65c:	20030134 	.word	0x20030134
 800b660:	20030154 	.word	0x20030154
 800b664:	20030164 	.word	0x20030164
 800b668:	20030170 	.word	0x20030170
 800b66c:	20030178 	.word	0x20030178
 800b670:	20030180 	.word	0x20030180
 800b674:	20030188 	.word	0x20030188
 800b678:	200301a4 	.word	0x200301a4
 800b67c:	200301a8 	.word	0x200301a8
 800b680:	200301b4 	.word	0x200301b4

0800b684 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b690:	4811      	ldr	r0, [pc, #68]	; (800b6d8 <TL_BLE_Init+0x54>)
 800b692:	f7ff f9c9 	bl	800aa28 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b696:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <TL_BLE_Init+0x58>)
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	4a0c      	ldr	r2, [pc, #48]	; (800b6e0 <TL_BLE_Init+0x5c>)
 800b6b0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	4a08      	ldr	r2, [pc, #32]	; (800b6d8 <TL_BLE_Init+0x54>)
 800b6b6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b6b8:	f7f9 f8a2 	bl	8004800 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a08      	ldr	r2, [pc, #32]	; (800b6e4 <TL_BLE_Init+0x60>)
 800b6c2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	4a07      	ldr	r2, [pc, #28]	; (800b6e8 <TL_BLE_Init+0x64>)
 800b6ca:	6013      	str	r3, [r2, #0]

  return 0;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	200301d0 	.word	0x200301d0
 800b6dc:	20030000 	.word	0x20030000
 800b6e0:	20030a48 	.word	0x20030a48
 800b6e4:	20001360 	.word	0x20001360
 800b6e8:	20001364 	.word	0x20001364

0800b6ec <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b6f8:	4b09      	ldr	r3, [pc, #36]	; (800b720 <TL_BLE_SendCmd+0x34>)
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2201      	movs	r2, #1
 800b700:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b702:	4b07      	ldr	r3, [pc, #28]	; (800b720 <TL_BLE_SendCmd+0x34>)
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4619      	mov	r1, r3
 800b70a:	2001      	movs	r0, #1
 800b70c:	f000 f96c 	bl	800b9e8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b710:	f7f9 f880 	bl	8004814 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20030000 	.word	0x20030000

0800b724 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b72a:	e01c      	b.n	800b766 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b72c:	1d3b      	adds	r3, r7, #4
 800b72e:	4619      	mov	r1, r3
 800b730:	4812      	ldr	r0, [pc, #72]	; (800b77c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b732:	f7ff fa10 	bl	800ab56 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	7a5b      	ldrb	r3, [r3, #9]
 800b73a:	2b0f      	cmp	r3, #15
 800b73c:	d003      	beq.n	800b746 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	7a5b      	ldrb	r3, [r3, #9]
 800b742:	2b0e      	cmp	r3, #14
 800b744:	d105      	bne.n	800b752 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4619      	mov	r1, r3
 800b74a:	2002      	movs	r0, #2
 800b74c:	f000 f94c 	bl	800b9e8 <OutputDbgTrace>
 800b750:	e004      	b.n	800b75c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4619      	mov	r1, r3
 800b756:	2003      	movs	r0, #3
 800b758:	f000 f946 	bl	800b9e8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b75c:	4b08      	ldr	r3, [pc, #32]	; (800b780 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	4610      	mov	r0, r2
 800b764:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b766:	4805      	ldr	r0, [pc, #20]	; (800b77c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b768:	f7ff f96e 	bl	800aa48 <LST_is_empty>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0dc      	beq.n	800b72c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b772:	bf00      	nop
}
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	200301d0 	.word	0x200301d0
 800b780:	20001360 	.word	0x20001360

0800b784 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b788:	4b02      	ldr	r3, [pc, #8]	; (800b794 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4798      	blx	r3

  return;
 800b78e:	bf00      	nop
}
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20001364 	.word	0x20001364

0800b798 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b7a4:	480d      	ldr	r0, [pc, #52]	; (800b7dc <TL_SYS_Init+0x44>)
 800b7a6:	f7ff f93f 	bl	800aa28 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	; (800b7e0 <TL_SYS_Init+0x48>)
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	689a      	ldr	r2, [r3, #8]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a08      	ldr	r2, [pc, #32]	; (800b7dc <TL_SYS_Init+0x44>)
 800b7bc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b7be:	f7f9 f84b 	bl	8004858 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a07      	ldr	r2, [pc, #28]	; (800b7e4 <TL_SYS_Init+0x4c>)
 800b7c8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	4a06      	ldr	r2, [pc, #24]	; (800b7e8 <TL_SYS_Init+0x50>)
 800b7d0:	6013      	str	r3, [r2, #0]

  return 0;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	200301d8 	.word	0x200301d8
 800b7e0:	20030000 	.word	0x20030000
 800b7e4:	20001368 	.word	0x20001368
 800b7e8:	2000136c 	.word	0x2000136c

0800b7ec <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b7f8:	4b09      	ldr	r3, [pc, #36]	; (800b820 <TL_SYS_SendCmd+0x34>)
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2210      	movs	r2, #16
 800b800:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b802:	4b07      	ldr	r3, [pc, #28]	; (800b820 <TL_SYS_SendCmd+0x34>)
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4619      	mov	r1, r3
 800b80a:	2004      	movs	r0, #4
 800b80c:	f000 f8ec 	bl	800b9e8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b810:	f7f9 f82c 	bl	800486c <HW_IPCC_SYS_SendCmd>

  return 0;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20030000 	.word	0x20030000

0800b824 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b828:	4b07      	ldr	r3, [pc, #28]	; (800b848 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4619      	mov	r1, r3
 800b830:	2005      	movs	r0, #5
 800b832:	f000 f8d9 	bl	800b9e8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b836:	4b05      	ldr	r3, [pc, #20]	; (800b84c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a03      	ldr	r2, [pc, #12]	; (800b848 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b83c:	68d2      	ldr	r2, [r2, #12]
 800b83e:	6812      	ldr	r2, [r2, #0]
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3

  return;
 800b844:	bf00      	nop
}
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20030000 	.word	0x20030000
 800b84c:	20001368 	.word	0x20001368

0800b850 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b856:	e00e      	b.n	800b876 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b858:	1d3b      	adds	r3, r7, #4
 800b85a:	4619      	mov	r1, r3
 800b85c:	480b      	ldr	r0, [pc, #44]	; (800b88c <HW_IPCC_SYS_EvtNot+0x3c>)
 800b85e:	f7ff f97a 	bl	800ab56 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4619      	mov	r1, r3
 800b866:	2006      	movs	r0, #6
 800b868:	f000 f8be 	bl	800b9e8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b86c:	4b08      	ldr	r3, [pc, #32]	; (800b890 <HW_IPCC_SYS_EvtNot+0x40>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	4610      	mov	r0, r2
 800b874:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b876:	4805      	ldr	r0, [pc, #20]	; (800b88c <HW_IPCC_SYS_EvtNot+0x3c>)
 800b878:	f7ff f8e6 	bl	800aa48 <LST_is_empty>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0ea      	beq.n	800b858 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b882:	bf00      	nop
}
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	200301d8 	.word	0x200301d8
 800b890:	2000136c 	.word	0x2000136c

0800b894 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b89c:	4817      	ldr	r0, [pc, #92]	; (800b8fc <TL_MM_Init+0x68>)
 800b89e:	f7ff f8c3 	bl	800aa28 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b8a2:	4817      	ldr	r0, [pc, #92]	; (800b900 <TL_MM_Init+0x6c>)
 800b8a4:	f7ff f8c0 	bl	800aa28 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b8a8:	4b16      	ldr	r3, [pc, #88]	; (800b904 <TL_MM_Init+0x70>)
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	4a16      	ldr	r2, [pc, #88]	; (800b908 <TL_MM_Init+0x74>)
 800b8ae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b8b0:	4b15      	ldr	r3, [pc, #84]	; (800b908 <TL_MM_Init+0x74>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	6892      	ldr	r2, [r2, #8]
 800b8b8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b8ba:	4b13      	ldr	r3, [pc, #76]	; (800b908 <TL_MM_Init+0x74>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	68d2      	ldr	r2, [r2, #12]
 800b8c2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b8c4:	4b10      	ldr	r3, [pc, #64]	; (800b908 <TL_MM_Init+0x74>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a0c      	ldr	r2, [pc, #48]	; (800b8fc <TL_MM_Init+0x68>)
 800b8ca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b8cc:	4b0e      	ldr	r3, [pc, #56]	; (800b908 <TL_MM_Init+0x74>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	6812      	ldr	r2, [r2, #0]
 800b8d4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b8d6:	4b0c      	ldr	r3, [pc, #48]	; (800b908 <TL_MM_Init+0x74>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	6852      	ldr	r2, [r2, #4]
 800b8de:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b8e0:	4b09      	ldr	r3, [pc, #36]	; (800b908 <TL_MM_Init+0x74>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	6912      	ldr	r2, [r2, #16]
 800b8e8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b8ea:	4b07      	ldr	r3, [pc, #28]	; (800b908 <TL_MM_Init+0x74>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	6952      	ldr	r2, [r2, #20]
 800b8f2:	619a      	str	r2, [r3, #24]

  return;
 800b8f4:	bf00      	nop
}
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200301c0 	.word	0x200301c0
 800b900:	20001358 	.word	0x20001358
 800b904:	20030000 	.word	0x20030000
 800b908:	20001370 	.word	0x20001370

0800b90c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	4807      	ldr	r0, [pc, #28]	; (800b934 <TL_MM_EvtDone+0x28>)
 800b918:	f7ff f8da 	bl	800aad0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b91c:	6879      	ldr	r1, [r7, #4]
 800b91e:	2000      	movs	r0, #0
 800b920:	f000 f862 	bl	800b9e8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b924:	4804      	ldr	r0, [pc, #16]	; (800b938 <TL_MM_EvtDone+0x2c>)
 800b926:	f7f8 ffc7 	bl	80048b8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b92a:	bf00      	nop
}
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20001358 	.word	0x20001358
 800b938:	0800b93d 	.word	0x0800b93d

0800b93c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b942:	e00c      	b.n	800b95e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b944:	1d3b      	adds	r3, r7, #4
 800b946:	4619      	mov	r1, r3
 800b948:	480a      	ldr	r0, [pc, #40]	; (800b974 <SendFreeBuf+0x38>)
 800b94a:	f7ff f904 	bl	800ab56 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b94e:	4b0a      	ldr	r3, [pc, #40]	; (800b978 <SendFreeBuf+0x3c>)
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	4611      	mov	r1, r2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff f8b9 	bl	800aad0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b95e:	4805      	ldr	r0, [pc, #20]	; (800b974 <SendFreeBuf+0x38>)
 800b960:	f7ff f872 	bl	800aa48 <LST_is_empty>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0ec      	beq.n	800b944 <SendFreeBuf+0x8>
  }

  return;
 800b96a:	bf00      	nop
}
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20001358 	.word	0x20001358
 800b978:	20030000 	.word	0x20030000

0800b97c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b980:	4805      	ldr	r0, [pc, #20]	; (800b998 <TL_TRACES_Init+0x1c>)
 800b982:	f7ff f851 	bl	800aa28 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b986:	4b05      	ldr	r3, [pc, #20]	; (800b99c <TL_TRACES_Init+0x20>)
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	4a03      	ldr	r2, [pc, #12]	; (800b998 <TL_TRACES_Init+0x1c>)
 800b98c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b98e:	f7f8 ffc9 	bl	8004924 <HW_IPCC_TRACES_Init>

  return;
 800b992:	bf00      	nop
}
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	200301c8 	.word	0x200301c8
 800b99c:	20030000 	.word	0x20030000

0800b9a0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b9a6:	e008      	b.n	800b9ba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b9a8:	1d3b      	adds	r3, r7, #4
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4808      	ldr	r0, [pc, #32]	; (800b9d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b9ae:	f7ff f8d2 	bl	800ab56 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 f80d 	bl	800b9d4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b9ba:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b9bc:	f7ff f844 	bl	800aa48 <LST_is_empty>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f0      	beq.n	800b9a8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b9c6:	bf00      	nop
}
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	200301c8 	.word	0x200301c8

0800b9d4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	2b06      	cmp	r3, #6
 800b9f8:	d849      	bhi.n	800ba8e <OutputDbgTrace+0xa6>
 800b9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ba00 <OutputDbgTrace+0x18>)
 800b9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba00:	0800ba1d 	.word	0x0800ba1d
 800ba04:	0800ba3f 	.word	0x0800ba3f
 800ba08:	0800ba45 	.word	0x0800ba45
 800ba0c:	0800ba5f 	.word	0x0800ba5f
 800ba10:	0800ba6b 	.word	0x0800ba6b
 800ba14:	0800ba71 	.word	0x0800ba71
 800ba18:	0800ba83 	.word	0x0800ba83
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	7a5b      	ldrb	r3, [r3, #9]
 800ba24:	2b0f      	cmp	r3, #15
 800ba26:	d004      	beq.n	800ba32 <OutputDbgTrace+0x4a>
 800ba28:	2bff      	cmp	r3, #255	; 0xff
 800ba2a:	d004      	beq.n	800ba36 <OutputDbgTrace+0x4e>
 800ba2c:	2b0e      	cmp	r3, #14
 800ba2e:	d004      	beq.n	800ba3a <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ba30:	e004      	b.n	800ba3c <OutputDbgTrace+0x54>
          break;
 800ba32:	bf00      	nop
 800ba34:	e02c      	b.n	800ba90 <OutputDbgTrace+0xa8>
          break;
 800ba36:	bf00      	nop
 800ba38:	e02a      	b.n	800ba90 <OutputDbgTrace+0xa8>
          break;
 800ba3a:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ba3c:	e028      	b.n	800ba90 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ba42:	e025      	b.n	800ba90 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	7a5b      	ldrb	r3, [r3, #9]
 800ba4c:	2b0e      	cmp	r3, #14
 800ba4e:	d002      	beq.n	800ba56 <OutputDbgTrace+0x6e>
 800ba50:	2b0f      	cmp	r3, #15
 800ba52:	d002      	beq.n	800ba5a <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ba54:	e002      	b.n	800ba5c <OutputDbgTrace+0x74>
          break;
 800ba56:	bf00      	nop
 800ba58:	e01a      	b.n	800ba90 <OutputDbgTrace+0xa8>
          break;
 800ba5a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba5c:	e018      	b.n	800ba90 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	7a5b      	ldrb	r3, [r3, #9]
 800ba66:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba68:	e012      	b.n	800ba90 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ba6e:	e00f      	b.n	800ba90 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	7a5b      	ldrb	r3, [r3, #9]
 800ba78:	2b0e      	cmp	r3, #14
 800ba7a:	d000      	beq.n	800ba7e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ba7c:	e000      	b.n	800ba80 <OutputDbgTrace+0x98>
          break;
 800ba7e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba80:	e006      	b.n	800ba90 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	7a5b      	ldrb	r3, [r3, #9]
 800ba8a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba8c:	e000      	b.n	800ba90 <OutputDbgTrace+0xa8>

    default:
      break;
 800ba8e:	bf00      	nop
  }

  return;
 800ba90:	bf00      	nop
}
 800ba92:	3714      	adds	r7, #20
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <UTIL_LPM_Init+0x1c>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <UTIL_LPM_Init+0x20>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800baac:	bf00      	nop
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	20001374 	.word	0x20001374
 800babc:	20001378 	.word	0x20001378

0800bac0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bacc:	f3ef 8310 	mrs	r3, PRIMASK
 800bad0:	613b      	str	r3, [r7, #16]
  return(result);
 800bad2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bad6:	b672      	cpsid	i
  
  switch(state)
 800bad8:	78fb      	ldrb	r3, [r7, #3]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d009      	beq.n	800baf2 <UTIL_LPM_SetOffMode+0x32>
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d000      	beq.n	800bae4 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800bae2:	e00e      	b.n	800bb02 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800bae4:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <UTIL_LPM_SetOffMode+0x58>)
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4313      	orrs	r3, r2
 800baec:	4a0a      	ldr	r2, [pc, #40]	; (800bb18 <UTIL_LPM_SetOffMode+0x58>)
 800baee:	6013      	str	r3, [r2, #0]
      break;
 800baf0:	e007      	b.n	800bb02 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	43da      	mvns	r2, r3
 800baf6:	4b08      	ldr	r3, [pc, #32]	; (800bb18 <UTIL_LPM_SetOffMode+0x58>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4013      	ands	r3, r2
 800bafc:	4a06      	ldr	r2, [pc, #24]	; (800bb18 <UTIL_LPM_SetOffMode+0x58>)
 800bafe:	6013      	str	r3, [r2, #0]
      break;
 800bb00:	bf00      	nop
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bb0c:	bf00      	nop
 800bb0e:	371c      	adds	r7, #28
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	20001378 	.word	0x20001378

0800bb1c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08c      	sub	sp, #48	; 0x30
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bb24:	4b65      	ldr	r3, [pc, #404]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bb2a:	4b64      	ldr	r3, [pc, #400]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4013      	ands	r3, r2
 800bb32:	4a62      	ldr	r2, [pc, #392]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bb34:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800bb36:	e081      	b.n	800bc3c <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800bb3c:	e002      	b.n	800bb44 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	3301      	adds	r3, #1
 800bb42:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800bb44:	4a5e      	ldr	r2, [pc, #376]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bb4c:	4b5d      	ldr	r3, [pc, #372]	; (800bcc4 <UTIL_SEQ_Run+0x1a8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	401a      	ands	r2, r3
 800bb52:	4b5a      	ldr	r3, [pc, #360]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4013      	ands	r3, r2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d0f0      	beq.n	800bb3e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800bb5c:	4a58      	ldr	r2, [pc, #352]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb60:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bb64:	4b57      	ldr	r3, [pc, #348]	; (800bcc4 <UTIL_SEQ_Run+0x1a8>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	401a      	ands	r2, r3
 800bb6a:	4b54      	ldr	r3, [pc, #336]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4013      	ands	r3, r2
 800bb70:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bb72:	4a53      	ldr	r2, [pc, #332]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	4413      	add	r3, r2
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7e:	4013      	ands	r3, r2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d106      	bne.n	800bb92 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bb84:	4a4e      	ldr	r2, [pc, #312]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb90:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bb92:	4a4b      	ldr	r2, [pc, #300]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4413      	add	r3, r2
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	4013      	ands	r3, r2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 f98f 	bl	800bec4 <SEQ_BitPosition>
 800bba6:	4603      	mov	r3, r0
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4b47      	ldr	r3, [pc, #284]	; (800bcc8 <UTIL_SEQ_Run+0x1ac>)
 800bbac:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bbae:	4a44      	ldr	r2, [pc, #272]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	4413      	add	r3, r2
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	4b43      	ldr	r3, [pc, #268]	; (800bcc8 <UTIL_SEQ_Run+0x1ac>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	fa01 f303 	lsl.w	r3, r1, r3
 800bbc2:	43db      	mvns	r3, r3
 800bbc4:	401a      	ands	r2, r3
 800bbc6:	493e      	ldr	r1, [pc, #248]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	440b      	add	r3, r1
 800bbce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbd0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbd4:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbd6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bbd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbda:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bbdc:	4b3a      	ldr	r3, [pc, #232]	; (800bcc8 <UTIL_SEQ_Run+0x1ac>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	43da      	mvns	r2, r3
 800bbe8:	4b38      	ldr	r3, [pc, #224]	; (800bccc <UTIL_SEQ_Run+0x1b0>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4013      	ands	r3, r2
 800bbee:	4a37      	ldr	r2, [pc, #220]	; (800bccc <UTIL_SEQ_Run+0x1b0>)
 800bbf0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbf6:	e013      	b.n	800bc20 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	4a30      	ldr	r2, [pc, #192]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bbfe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bc02:	4b31      	ldr	r3, [pc, #196]	; (800bcc8 <UTIL_SEQ_Run+0x1ac>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2201      	movs	r2, #1
 800bc08:	fa02 f303 	lsl.w	r3, r2, r3
 800bc0c:	43da      	mvns	r2, r3
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	3b01      	subs	r3, #1
 800bc12:	400a      	ands	r2, r1
 800bc14:	492a      	ldr	r1, [pc, #168]	; (800bcc0 <UTIL_SEQ_Run+0x1a4>)
 800bc16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e8      	bne.n	800bbf8 <UTIL_SEQ_Run+0xdc>
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bc30:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <UTIL_SEQ_Run+0x1ac>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a26      	ldr	r2, [pc, #152]	; (800bcd0 <UTIL_SEQ_Run+0x1b4>)
 800bc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc3a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800bc3c:	4b23      	ldr	r3, [pc, #140]	; (800bccc <UTIL_SEQ_Run+0x1b0>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <UTIL_SEQ_Run+0x1a8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	401a      	ands	r2, r3
 800bc46:	4b1d      	ldr	r3, [pc, #116]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d007      	beq.n	800bc60 <UTIL_SEQ_Run+0x144>
 800bc50:	4b20      	ldr	r3, [pc, #128]	; (800bcd4 <UTIL_SEQ_Run+0x1b8>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b20      	ldr	r3, [pc, #128]	; (800bcd8 <UTIL_SEQ_Run+0x1bc>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4013      	ands	r3, r2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f43f af6c 	beq.w	800bb38 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bc60:	4b19      	ldr	r3, [pc, #100]	; (800bcc8 <UTIL_SEQ_Run+0x1ac>)
 800bc62:	f04f 32ff 	mov.w	r2, #4294967295
 800bc66:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bc68:	f000 f91e 	bl	800bea8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc70:	613b      	str	r3, [r7, #16]
  return(result);
 800bc72:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bc74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc76:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800bc78:	4b14      	ldr	r3, [pc, #80]	; (800bccc <UTIL_SEQ_Run+0x1b0>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	4b11      	ldr	r3, [pc, #68]	; (800bcc4 <UTIL_SEQ_Run+0x1a8>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	401a      	ands	r2, r3
 800bc82:	4b0e      	ldr	r3, [pc, #56]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4013      	ands	r3, r2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d108      	bne.n	800bc9e <UTIL_SEQ_Run+0x182>
 800bc8c:	4b11      	ldr	r3, [pc, #68]	; (800bcd4 <UTIL_SEQ_Run+0x1b8>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	4b11      	ldr	r3, [pc, #68]	; (800bcd8 <UTIL_SEQ_Run+0x1bc>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4013      	ands	r3, r2
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d101      	bne.n	800bc9e <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800bc9a:	f7f4 fe70 	bl	800097e <UTIL_SEQ_Idle>
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800bca8:	f000 f905 	bl	800beb6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bcac:	4a03      	ldr	r2, [pc, #12]	; (800bcbc <UTIL_SEQ_Run+0x1a0>)
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	6013      	str	r3, [r2, #0]

  return;
 800bcb2:	bf00      	nop
}
 800bcb4:	3730      	adds	r7, #48	; 0x30
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000044 	.word	0x20000044
 800bcc0:	2000140c 	.word	0x2000140c
 800bcc4:	20000040 	.word	0x20000040
 800bcc8:	20001388 	.word	0x20001388
 800bccc:	2000137c 	.word	0x2000137c
 800bcd0:	2000138c 	.word	0x2000138c
 800bcd4:	20001380 	.word	0x20001380
 800bcd8:	20001384 	.word	0x20001384

0800bcdc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bce8:	f3ef 8310 	mrs	r3, PRIMASK
 800bcec:	617b      	str	r3, [r7, #20]
  return(result);
 800bcee:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bcf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcf2:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 f8e5 	bl	800bec4 <SEQ_BitPosition>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4a06      	ldr	r2, [pc, #24]	; (800bd18 <UTIL_SEQ_RegTask+0x3c>)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bd10:	bf00      	nop
}
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	2000138c 	.word	0x2000138c

0800bd1c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd26:	f3ef 8310 	mrs	r3, PRIMASK
 800bd2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd30:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800bd32:	4b0d      	ldr	r3, [pc, #52]	; (800bd68 <UTIL_SEQ_SetTask+0x4c>)
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	4a0b      	ldr	r2, [pc, #44]	; (800bd68 <UTIL_SEQ_SetTask+0x4c>)
 800bd3c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bd3e:	4a0b      	ldr	r2, [pc, #44]	; (800bd6c <UTIL_SEQ_SetTask+0x50>)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	4908      	ldr	r1, [pc, #32]	; (800bd6c <UTIL_SEQ_SetTask+0x50>)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bd5c:	bf00      	nop
}
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	2000137c 	.word	0x2000137c
 800bd6c:	2000140c 	.word	0x2000140c

0800bd70 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd78:	f3ef 8310 	mrs	r3, PRIMASK
 800bd7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd82:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	43da      	mvns	r2, r3
 800bd88:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <UTIL_SEQ_PauseTask+0x38>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	4a06      	ldr	r2, [pc, #24]	; (800bda8 <UTIL_SEQ_PauseTask+0x38>)
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bd9c:	bf00      	nop
}
 800bd9e:	371c      	adds	r7, #28
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	20000040 	.word	0x20000040

0800bdac <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b087      	sub	sp, #28
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdb4:	f3ef 8310 	mrs	r3, PRIMASK
 800bdb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bdbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdbe:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 800bdc0:	4b08      	ldr	r3, [pc, #32]	; (800bde4 <UTIL_SEQ_ResumeTask+0x38>)
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	4a06      	ldr	r2, [pc, #24]	; (800bde4 <UTIL_SEQ_ResumeTask+0x38>)
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bdd6:	bf00      	nop
}
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	20000040 	.word	0x20000040

0800bde8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdf0:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bdf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdfa:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 800bdfc:	4b08      	ldr	r3, [pc, #32]	; (800be20 <UTIL_SEQ_SetEvt+0x38>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4313      	orrs	r3, r2
 800be04:	4a06      	ldr	r2, [pc, #24]	; (800be20 <UTIL_SEQ_SetEvt+0x38>)
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800be12:	bf00      	nop
}
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	20001380 	.word	0x20001380

0800be24 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800be2c:	4b1b      	ldr	r3, [pc, #108]	; (800be9c <UTIL_SEQ_WaitEvt+0x78>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800be32:	4b1a      	ldr	r3, [pc, #104]	; (800be9c <UTIL_SEQ_WaitEvt+0x78>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3a:	d102      	bne.n	800be42 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	e005      	b.n	800be4e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800be42:	4b16      	ldr	r3, [pc, #88]	; (800be9c <UTIL_SEQ_WaitEvt+0x78>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2201      	movs	r2, #1
 800be48:	fa02 f303 	lsl.w	r3, r2, r3
 800be4c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800be4e:	4b14      	ldr	r3, [pc, #80]	; (800bea0 <UTIL_SEQ_WaitEvt+0x7c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800be54:	4a12      	ldr	r2, [pc, #72]	; (800bea0 <UTIL_SEQ_WaitEvt+0x7c>)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800be5a:	e005      	b.n	800be68 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800be5c:	4b10      	ldr	r3, [pc, #64]	; (800bea0 <UTIL_SEQ_WaitEvt+0x7c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4619      	mov	r1, r3
 800be62:	6978      	ldr	r0, [r7, #20]
 800be64:	f7f4 fd92 	bl	800098c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800be68:	4b0e      	ldr	r3, [pc, #56]	; (800bea4 <UTIL_SEQ_WaitEvt+0x80>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <UTIL_SEQ_WaitEvt+0x7c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4013      	ands	r3, r2
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0f2      	beq.n	800be5c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800be76:	4a09      	ldr	r2, [pc, #36]	; (800be9c <UTIL_SEQ_WaitEvt+0x78>)
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800be7c:	4b08      	ldr	r3, [pc, #32]	; (800bea0 <UTIL_SEQ_WaitEvt+0x7c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	43da      	mvns	r2, r3
 800be82:	4b08      	ldr	r3, [pc, #32]	; (800bea4 <UTIL_SEQ_WaitEvt+0x80>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4013      	ands	r3, r2
 800be88:	4a06      	ldr	r2, [pc, #24]	; (800bea4 <UTIL_SEQ_WaitEvt+0x80>)
 800be8a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800be8c:	4a04      	ldr	r2, [pc, #16]	; (800bea0 <UTIL_SEQ_WaitEvt+0x7c>)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6013      	str	r3, [r2, #0]

  return;
 800be92:	bf00      	nop
}
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20001388 	.word	0x20001388
 800bea0:	20001384 	.word	0x20001384
 800bea4:	20001380 	.word	0x20001380

0800bea8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800bea8:	b480      	push	{r7}
 800beaa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800beac:	bf00      	nop
}
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800beb6:	b480      	push	{r7}
 800beb8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800beba:	bf00      	nop
}
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	0c1b      	lsrs	r3, r3, #16
 800bed4:	041b      	lsls	r3, r3, #16
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d104      	bne.n	800bee4 <SEQ_BitPosition+0x20>
 800beda:	2310      	movs	r3, #16
 800bedc:	73fb      	strb	r3, [r7, #15]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	041b      	lsls	r3, r3, #16
 800bee2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <SEQ_BitPosition+0x36>
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	3308      	adds	r3, #8
 800bef2:	73fb      	strb	r3, [r7, #15]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	021b      	lsls	r3, r3, #8
 800bef8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d105      	bne.n	800bf10 <SEQ_BitPosition+0x4c>
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	3304      	adds	r3, #4
 800bf08:	73fb      	strb	r3, [r7, #15]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	011b      	lsls	r3, r3, #4
 800bf0e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	0f1b      	lsrs	r3, r3, #28
 800bf14:	4a07      	ldr	r2, [pc, #28]	; (800bf34 <SEQ_BitPosition+0x70>)
 800bf16:	5cd2      	ldrb	r2, [r2, r3]
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	f1c3 031f 	rsb	r3, r3, #31
 800bf24:	b2db      	uxtb	r3, r3
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	0800dc44 	.word	0x0800dc44

0800bf38 <__errno>:
 800bf38:	4b01      	ldr	r3, [pc, #4]	; (800bf40 <__errno+0x8>)
 800bf3a:	6818      	ldr	r0, [r3, #0]
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	20000048 	.word	0x20000048

0800bf44 <__libc_init_array>:
 800bf44:	b570      	push	{r4, r5, r6, lr}
 800bf46:	4e0d      	ldr	r6, [pc, #52]	; (800bf7c <__libc_init_array+0x38>)
 800bf48:	4c0d      	ldr	r4, [pc, #52]	; (800bf80 <__libc_init_array+0x3c>)
 800bf4a:	1ba4      	subs	r4, r4, r6
 800bf4c:	10a4      	asrs	r4, r4, #2
 800bf4e:	2500      	movs	r5, #0
 800bf50:	42a5      	cmp	r5, r4
 800bf52:	d109      	bne.n	800bf68 <__libc_init_array+0x24>
 800bf54:	4e0b      	ldr	r6, [pc, #44]	; (800bf84 <__libc_init_array+0x40>)
 800bf56:	4c0c      	ldr	r4, [pc, #48]	; (800bf88 <__libc_init_array+0x44>)
 800bf58:	f000 ffbe 	bl	800ced8 <_init>
 800bf5c:	1ba4      	subs	r4, r4, r6
 800bf5e:	10a4      	asrs	r4, r4, #2
 800bf60:	2500      	movs	r5, #0
 800bf62:	42a5      	cmp	r5, r4
 800bf64:	d105      	bne.n	800bf72 <__libc_init_array+0x2e>
 800bf66:	bd70      	pop	{r4, r5, r6, pc}
 800bf68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf6c:	4798      	blx	r3
 800bf6e:	3501      	adds	r5, #1
 800bf70:	e7ee      	b.n	800bf50 <__libc_init_array+0xc>
 800bf72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf76:	4798      	blx	r3
 800bf78:	3501      	adds	r5, #1
 800bf7a:	e7f2      	b.n	800bf62 <__libc_init_array+0x1e>
 800bf7c:	0800dcf4 	.word	0x0800dcf4
 800bf80:	0800dcf4 	.word	0x0800dcf4
 800bf84:	0800dcf4 	.word	0x0800dcf4
 800bf88:	0800dcf8 	.word	0x0800dcf8

0800bf8c <memcpy>:
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	1e43      	subs	r3, r0, #1
 800bf90:	440a      	add	r2, r1
 800bf92:	4291      	cmp	r1, r2
 800bf94:	d100      	bne.n	800bf98 <memcpy+0xc>
 800bf96:	bd10      	pop	{r4, pc}
 800bf98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfa0:	e7f7      	b.n	800bf92 <memcpy+0x6>

0800bfa2 <memset>:
 800bfa2:	4402      	add	r2, r0
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d100      	bne.n	800bfac <memset+0xa>
 800bfaa:	4770      	bx	lr
 800bfac:	f803 1b01 	strb.w	r1, [r3], #1
 800bfb0:	e7f9      	b.n	800bfa6 <memset+0x4>
	...

0800bfb4 <iprintf>:
 800bfb4:	b40f      	push	{r0, r1, r2, r3}
 800bfb6:	4b0a      	ldr	r3, [pc, #40]	; (800bfe0 <iprintf+0x2c>)
 800bfb8:	b513      	push	{r0, r1, r4, lr}
 800bfba:	681c      	ldr	r4, [r3, #0]
 800bfbc:	b124      	cbz	r4, 800bfc8 <iprintf+0x14>
 800bfbe:	69a3      	ldr	r3, [r4, #24]
 800bfc0:	b913      	cbnz	r3, 800bfc8 <iprintf+0x14>
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 fa36 	bl	800c434 <__sinit>
 800bfc8:	ab05      	add	r3, sp, #20
 800bfca:	9a04      	ldr	r2, [sp, #16]
 800bfcc:	68a1      	ldr	r1, [r4, #8]
 800bfce:	9301      	str	r3, [sp, #4]
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f000 fbef 	bl	800c7b4 <_vfiprintf_r>
 800bfd6:	b002      	add	sp, #8
 800bfd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfdc:	b004      	add	sp, #16
 800bfde:	4770      	bx	lr
 800bfe0:	20000048 	.word	0x20000048

0800bfe4 <putchar>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4b08      	ldr	r3, [pc, #32]	; (800c008 <putchar+0x24>)
 800bfe8:	681c      	ldr	r4, [r3, #0]
 800bfea:	4605      	mov	r5, r0
 800bfec:	b124      	cbz	r4, 800bff8 <putchar+0x14>
 800bfee:	69a3      	ldr	r3, [r4, #24]
 800bff0:	b913      	cbnz	r3, 800bff8 <putchar+0x14>
 800bff2:	4620      	mov	r0, r4
 800bff4:	f000 fa1e 	bl	800c434 <__sinit>
 800bff8:	68a2      	ldr	r2, [r4, #8]
 800bffa:	4629      	mov	r1, r5
 800bffc:	4620      	mov	r0, r4
 800bffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c002:	f000 be75 	b.w	800ccf0 <_putc_r>
 800c006:	bf00      	nop
 800c008:	20000048 	.word	0x20000048

0800c00c <_puts_r>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	460e      	mov	r6, r1
 800c010:	4605      	mov	r5, r0
 800c012:	b118      	cbz	r0, 800c01c <_puts_r+0x10>
 800c014:	6983      	ldr	r3, [r0, #24]
 800c016:	b90b      	cbnz	r3, 800c01c <_puts_r+0x10>
 800c018:	f000 fa0c 	bl	800c434 <__sinit>
 800c01c:	69ab      	ldr	r3, [r5, #24]
 800c01e:	68ac      	ldr	r4, [r5, #8]
 800c020:	b913      	cbnz	r3, 800c028 <_puts_r+0x1c>
 800c022:	4628      	mov	r0, r5
 800c024:	f000 fa06 	bl	800c434 <__sinit>
 800c028:	4b23      	ldr	r3, [pc, #140]	; (800c0b8 <_puts_r+0xac>)
 800c02a:	429c      	cmp	r4, r3
 800c02c:	d117      	bne.n	800c05e <_puts_r+0x52>
 800c02e:	686c      	ldr	r4, [r5, #4]
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	071b      	lsls	r3, r3, #28
 800c034:	d51d      	bpl.n	800c072 <_puts_r+0x66>
 800c036:	6923      	ldr	r3, [r4, #16]
 800c038:	b1db      	cbz	r3, 800c072 <_puts_r+0x66>
 800c03a:	3e01      	subs	r6, #1
 800c03c:	68a3      	ldr	r3, [r4, #8]
 800c03e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c042:	3b01      	subs	r3, #1
 800c044:	60a3      	str	r3, [r4, #8]
 800c046:	b9e9      	cbnz	r1, 800c084 <_puts_r+0x78>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	da2e      	bge.n	800c0aa <_puts_r+0x9e>
 800c04c:	4622      	mov	r2, r4
 800c04e:	210a      	movs	r1, #10
 800c050:	4628      	mov	r0, r5
 800c052:	f000 f83f 	bl	800c0d4 <__swbuf_r>
 800c056:	3001      	adds	r0, #1
 800c058:	d011      	beq.n	800c07e <_puts_r+0x72>
 800c05a:	200a      	movs	r0, #10
 800c05c:	e011      	b.n	800c082 <_puts_r+0x76>
 800c05e:	4b17      	ldr	r3, [pc, #92]	; (800c0bc <_puts_r+0xb0>)
 800c060:	429c      	cmp	r4, r3
 800c062:	d101      	bne.n	800c068 <_puts_r+0x5c>
 800c064:	68ac      	ldr	r4, [r5, #8]
 800c066:	e7e3      	b.n	800c030 <_puts_r+0x24>
 800c068:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <_puts_r+0xb4>)
 800c06a:	429c      	cmp	r4, r3
 800c06c:	bf08      	it	eq
 800c06e:	68ec      	ldreq	r4, [r5, #12]
 800c070:	e7de      	b.n	800c030 <_puts_r+0x24>
 800c072:	4621      	mov	r1, r4
 800c074:	4628      	mov	r0, r5
 800c076:	f000 f87f 	bl	800c178 <__swsetup_r>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d0dd      	beq.n	800c03a <_puts_r+0x2e>
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	2b00      	cmp	r3, #0
 800c086:	da04      	bge.n	800c092 <_puts_r+0x86>
 800c088:	69a2      	ldr	r2, [r4, #24]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	dc06      	bgt.n	800c09c <_puts_r+0x90>
 800c08e:	290a      	cmp	r1, #10
 800c090:	d004      	beq.n	800c09c <_puts_r+0x90>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	6022      	str	r2, [r4, #0]
 800c098:	7019      	strb	r1, [r3, #0]
 800c09a:	e7cf      	b.n	800c03c <_puts_r+0x30>
 800c09c:	4622      	mov	r2, r4
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f000 f818 	bl	800c0d4 <__swbuf_r>
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	d1c9      	bne.n	800c03c <_puts_r+0x30>
 800c0a8:	e7e9      	b.n	800c07e <_puts_r+0x72>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	200a      	movs	r0, #10
 800c0ae:	1c5a      	adds	r2, r3, #1
 800c0b0:	6022      	str	r2, [r4, #0]
 800c0b2:	7018      	strb	r0, [r3, #0]
 800c0b4:	e7e5      	b.n	800c082 <_puts_r+0x76>
 800c0b6:	bf00      	nop
 800c0b8:	0800dc78 	.word	0x0800dc78
 800c0bc:	0800dc98 	.word	0x0800dc98
 800c0c0:	0800dc58 	.word	0x0800dc58

0800c0c4 <puts>:
 800c0c4:	4b02      	ldr	r3, [pc, #8]	; (800c0d0 <puts+0xc>)
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	6818      	ldr	r0, [r3, #0]
 800c0ca:	f7ff bf9f 	b.w	800c00c <_puts_r>
 800c0ce:	bf00      	nop
 800c0d0:	20000048 	.word	0x20000048

0800c0d4 <__swbuf_r>:
 800c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d6:	460e      	mov	r6, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	4605      	mov	r5, r0
 800c0dc:	b118      	cbz	r0, 800c0e6 <__swbuf_r+0x12>
 800c0de:	6983      	ldr	r3, [r0, #24]
 800c0e0:	b90b      	cbnz	r3, 800c0e6 <__swbuf_r+0x12>
 800c0e2:	f000 f9a7 	bl	800c434 <__sinit>
 800c0e6:	4b21      	ldr	r3, [pc, #132]	; (800c16c <__swbuf_r+0x98>)
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	d12a      	bne.n	800c142 <__swbuf_r+0x6e>
 800c0ec:	686c      	ldr	r4, [r5, #4]
 800c0ee:	69a3      	ldr	r3, [r4, #24]
 800c0f0:	60a3      	str	r3, [r4, #8]
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	071a      	lsls	r2, r3, #28
 800c0f6:	d52e      	bpl.n	800c156 <__swbuf_r+0x82>
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	b363      	cbz	r3, 800c156 <__swbuf_r+0x82>
 800c0fc:	6923      	ldr	r3, [r4, #16]
 800c0fe:	6820      	ldr	r0, [r4, #0]
 800c100:	1ac0      	subs	r0, r0, r3
 800c102:	6963      	ldr	r3, [r4, #20]
 800c104:	b2f6      	uxtb	r6, r6
 800c106:	4283      	cmp	r3, r0
 800c108:	4637      	mov	r7, r6
 800c10a:	dc04      	bgt.n	800c116 <__swbuf_r+0x42>
 800c10c:	4621      	mov	r1, r4
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 f926 	bl	800c360 <_fflush_r>
 800c114:	bb28      	cbnz	r0, 800c162 <__swbuf_r+0x8e>
 800c116:	68a3      	ldr	r3, [r4, #8]
 800c118:	3b01      	subs	r3, #1
 800c11a:	60a3      	str	r3, [r4, #8]
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	6022      	str	r2, [r4, #0]
 800c122:	701e      	strb	r6, [r3, #0]
 800c124:	6963      	ldr	r3, [r4, #20]
 800c126:	3001      	adds	r0, #1
 800c128:	4283      	cmp	r3, r0
 800c12a:	d004      	beq.n	800c136 <__swbuf_r+0x62>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	07db      	lsls	r3, r3, #31
 800c130:	d519      	bpl.n	800c166 <__swbuf_r+0x92>
 800c132:	2e0a      	cmp	r6, #10
 800c134:	d117      	bne.n	800c166 <__swbuf_r+0x92>
 800c136:	4621      	mov	r1, r4
 800c138:	4628      	mov	r0, r5
 800c13a:	f000 f911 	bl	800c360 <_fflush_r>
 800c13e:	b190      	cbz	r0, 800c166 <__swbuf_r+0x92>
 800c140:	e00f      	b.n	800c162 <__swbuf_r+0x8e>
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <__swbuf_r+0x9c>)
 800c144:	429c      	cmp	r4, r3
 800c146:	d101      	bne.n	800c14c <__swbuf_r+0x78>
 800c148:	68ac      	ldr	r4, [r5, #8]
 800c14a:	e7d0      	b.n	800c0ee <__swbuf_r+0x1a>
 800c14c:	4b09      	ldr	r3, [pc, #36]	; (800c174 <__swbuf_r+0xa0>)
 800c14e:	429c      	cmp	r4, r3
 800c150:	bf08      	it	eq
 800c152:	68ec      	ldreq	r4, [r5, #12]
 800c154:	e7cb      	b.n	800c0ee <__swbuf_r+0x1a>
 800c156:	4621      	mov	r1, r4
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 f80d 	bl	800c178 <__swsetup_r>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d0cc      	beq.n	800c0fc <__swbuf_r+0x28>
 800c162:	f04f 37ff 	mov.w	r7, #4294967295
 800c166:	4638      	mov	r0, r7
 800c168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c16a:	bf00      	nop
 800c16c:	0800dc78 	.word	0x0800dc78
 800c170:	0800dc98 	.word	0x0800dc98
 800c174:	0800dc58 	.word	0x0800dc58

0800c178 <__swsetup_r>:
 800c178:	4b32      	ldr	r3, [pc, #200]	; (800c244 <__swsetup_r+0xcc>)
 800c17a:	b570      	push	{r4, r5, r6, lr}
 800c17c:	681d      	ldr	r5, [r3, #0]
 800c17e:	4606      	mov	r6, r0
 800c180:	460c      	mov	r4, r1
 800c182:	b125      	cbz	r5, 800c18e <__swsetup_r+0x16>
 800c184:	69ab      	ldr	r3, [r5, #24]
 800c186:	b913      	cbnz	r3, 800c18e <__swsetup_r+0x16>
 800c188:	4628      	mov	r0, r5
 800c18a:	f000 f953 	bl	800c434 <__sinit>
 800c18e:	4b2e      	ldr	r3, [pc, #184]	; (800c248 <__swsetup_r+0xd0>)
 800c190:	429c      	cmp	r4, r3
 800c192:	d10f      	bne.n	800c1b4 <__swsetup_r+0x3c>
 800c194:	686c      	ldr	r4, [r5, #4]
 800c196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	0715      	lsls	r5, r2, #28
 800c19e:	d42c      	bmi.n	800c1fa <__swsetup_r+0x82>
 800c1a0:	06d0      	lsls	r0, r2, #27
 800c1a2:	d411      	bmi.n	800c1c8 <__swsetup_r+0x50>
 800c1a4:	2209      	movs	r2, #9
 800c1a6:	6032      	str	r2, [r6, #0]
 800c1a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b2:	e03e      	b.n	800c232 <__swsetup_r+0xba>
 800c1b4:	4b25      	ldr	r3, [pc, #148]	; (800c24c <__swsetup_r+0xd4>)
 800c1b6:	429c      	cmp	r4, r3
 800c1b8:	d101      	bne.n	800c1be <__swsetup_r+0x46>
 800c1ba:	68ac      	ldr	r4, [r5, #8]
 800c1bc:	e7eb      	b.n	800c196 <__swsetup_r+0x1e>
 800c1be:	4b24      	ldr	r3, [pc, #144]	; (800c250 <__swsetup_r+0xd8>)
 800c1c0:	429c      	cmp	r4, r3
 800c1c2:	bf08      	it	eq
 800c1c4:	68ec      	ldreq	r4, [r5, #12]
 800c1c6:	e7e6      	b.n	800c196 <__swsetup_r+0x1e>
 800c1c8:	0751      	lsls	r1, r2, #29
 800c1ca:	d512      	bpl.n	800c1f2 <__swsetup_r+0x7a>
 800c1cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1ce:	b141      	cbz	r1, 800c1e2 <__swsetup_r+0x6a>
 800c1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1d4:	4299      	cmp	r1, r3
 800c1d6:	d002      	beq.n	800c1de <__swsetup_r+0x66>
 800c1d8:	4630      	mov	r0, r6
 800c1da:	f000 fa19 	bl	800c610 <_free_r>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	6363      	str	r3, [r4, #52]	; 0x34
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	6063      	str	r3, [r4, #4]
 800c1ee:	6923      	ldr	r3, [r4, #16]
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	f043 0308 	orr.w	r3, r3, #8
 800c1f8:	81a3      	strh	r3, [r4, #12]
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	b94b      	cbnz	r3, 800c212 <__swsetup_r+0x9a>
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c208:	d003      	beq.n	800c212 <__swsetup_r+0x9a>
 800c20a:	4621      	mov	r1, r4
 800c20c:	4630      	mov	r0, r6
 800c20e:	f000 f9bf 	bl	800c590 <__smakebuf_r>
 800c212:	89a2      	ldrh	r2, [r4, #12]
 800c214:	f012 0301 	ands.w	r3, r2, #1
 800c218:	d00c      	beq.n	800c234 <__swsetup_r+0xbc>
 800c21a:	2300      	movs	r3, #0
 800c21c:	60a3      	str	r3, [r4, #8]
 800c21e:	6963      	ldr	r3, [r4, #20]
 800c220:	425b      	negs	r3, r3
 800c222:	61a3      	str	r3, [r4, #24]
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	b953      	cbnz	r3, 800c23e <__swsetup_r+0xc6>
 800c228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c230:	d1ba      	bne.n	800c1a8 <__swsetup_r+0x30>
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	0792      	lsls	r2, r2, #30
 800c236:	bf58      	it	pl
 800c238:	6963      	ldrpl	r3, [r4, #20]
 800c23a:	60a3      	str	r3, [r4, #8]
 800c23c:	e7f2      	b.n	800c224 <__swsetup_r+0xac>
 800c23e:	2000      	movs	r0, #0
 800c240:	e7f7      	b.n	800c232 <__swsetup_r+0xba>
 800c242:	bf00      	nop
 800c244:	20000048 	.word	0x20000048
 800c248:	0800dc78 	.word	0x0800dc78
 800c24c:	0800dc98 	.word	0x0800dc98
 800c250:	0800dc58 	.word	0x0800dc58

0800c254 <__sflush_r>:
 800c254:	898a      	ldrh	r2, [r1, #12]
 800c256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25a:	4605      	mov	r5, r0
 800c25c:	0710      	lsls	r0, r2, #28
 800c25e:	460c      	mov	r4, r1
 800c260:	d458      	bmi.n	800c314 <__sflush_r+0xc0>
 800c262:	684b      	ldr	r3, [r1, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dc05      	bgt.n	800c274 <__sflush_r+0x20>
 800c268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	dc02      	bgt.n	800c274 <__sflush_r+0x20>
 800c26e:	2000      	movs	r0, #0
 800c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c276:	2e00      	cmp	r6, #0
 800c278:	d0f9      	beq.n	800c26e <__sflush_r+0x1a>
 800c27a:	2300      	movs	r3, #0
 800c27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c280:	682f      	ldr	r7, [r5, #0]
 800c282:	6a21      	ldr	r1, [r4, #32]
 800c284:	602b      	str	r3, [r5, #0]
 800c286:	d032      	beq.n	800c2ee <__sflush_r+0x9a>
 800c288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	075a      	lsls	r2, r3, #29
 800c28e:	d505      	bpl.n	800c29c <__sflush_r+0x48>
 800c290:	6863      	ldr	r3, [r4, #4]
 800c292:	1ac0      	subs	r0, r0, r3
 800c294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c296:	b10b      	cbz	r3, 800c29c <__sflush_r+0x48>
 800c298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c29a:	1ac0      	subs	r0, r0, r3
 800c29c:	2300      	movs	r3, #0
 800c29e:	4602      	mov	r2, r0
 800c2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2a2:	6a21      	ldr	r1, [r4, #32]
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	47b0      	blx	r6
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	d106      	bne.n	800c2bc <__sflush_r+0x68>
 800c2ae:	6829      	ldr	r1, [r5, #0]
 800c2b0:	291d      	cmp	r1, #29
 800c2b2:	d848      	bhi.n	800c346 <__sflush_r+0xf2>
 800c2b4:	4a29      	ldr	r2, [pc, #164]	; (800c35c <__sflush_r+0x108>)
 800c2b6:	40ca      	lsrs	r2, r1
 800c2b8:	07d6      	lsls	r6, r2, #31
 800c2ba:	d544      	bpl.n	800c346 <__sflush_r+0xf2>
 800c2bc:	2200      	movs	r2, #0
 800c2be:	6062      	str	r2, [r4, #4]
 800c2c0:	04d9      	lsls	r1, r3, #19
 800c2c2:	6922      	ldr	r2, [r4, #16]
 800c2c4:	6022      	str	r2, [r4, #0]
 800c2c6:	d504      	bpl.n	800c2d2 <__sflush_r+0x7e>
 800c2c8:	1c42      	adds	r2, r0, #1
 800c2ca:	d101      	bne.n	800c2d0 <__sflush_r+0x7c>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b903      	cbnz	r3, 800c2d2 <__sflush_r+0x7e>
 800c2d0:	6560      	str	r0, [r4, #84]	; 0x54
 800c2d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2d4:	602f      	str	r7, [r5, #0]
 800c2d6:	2900      	cmp	r1, #0
 800c2d8:	d0c9      	beq.n	800c26e <__sflush_r+0x1a>
 800c2da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	d002      	beq.n	800c2e8 <__sflush_r+0x94>
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f000 f994 	bl	800c610 <_free_r>
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c2ec:	e7c0      	b.n	800c270 <__sflush_r+0x1c>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	47b0      	blx	r6
 800c2f4:	1c41      	adds	r1, r0, #1
 800c2f6:	d1c8      	bne.n	800c28a <__sflush_r+0x36>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0c5      	beq.n	800c28a <__sflush_r+0x36>
 800c2fe:	2b1d      	cmp	r3, #29
 800c300:	d001      	beq.n	800c306 <__sflush_r+0xb2>
 800c302:	2b16      	cmp	r3, #22
 800c304:	d101      	bne.n	800c30a <__sflush_r+0xb6>
 800c306:	602f      	str	r7, [r5, #0]
 800c308:	e7b1      	b.n	800c26e <__sflush_r+0x1a>
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c310:	81a3      	strh	r3, [r4, #12]
 800c312:	e7ad      	b.n	800c270 <__sflush_r+0x1c>
 800c314:	690f      	ldr	r7, [r1, #16]
 800c316:	2f00      	cmp	r7, #0
 800c318:	d0a9      	beq.n	800c26e <__sflush_r+0x1a>
 800c31a:	0793      	lsls	r3, r2, #30
 800c31c:	680e      	ldr	r6, [r1, #0]
 800c31e:	bf08      	it	eq
 800c320:	694b      	ldreq	r3, [r1, #20]
 800c322:	600f      	str	r7, [r1, #0]
 800c324:	bf18      	it	ne
 800c326:	2300      	movne	r3, #0
 800c328:	eba6 0807 	sub.w	r8, r6, r7
 800c32c:	608b      	str	r3, [r1, #8]
 800c32e:	f1b8 0f00 	cmp.w	r8, #0
 800c332:	dd9c      	ble.n	800c26e <__sflush_r+0x1a>
 800c334:	4643      	mov	r3, r8
 800c336:	463a      	mov	r2, r7
 800c338:	6a21      	ldr	r1, [r4, #32]
 800c33a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b0      	blx	r6
 800c340:	2800      	cmp	r0, #0
 800c342:	dc06      	bgt.n	800c352 <__sflush_r+0xfe>
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c34a:	81a3      	strh	r3, [r4, #12]
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	e78e      	b.n	800c270 <__sflush_r+0x1c>
 800c352:	4407      	add	r7, r0
 800c354:	eba8 0800 	sub.w	r8, r8, r0
 800c358:	e7e9      	b.n	800c32e <__sflush_r+0xda>
 800c35a:	bf00      	nop
 800c35c:	20400001 	.word	0x20400001

0800c360 <_fflush_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	690b      	ldr	r3, [r1, #16]
 800c364:	4605      	mov	r5, r0
 800c366:	460c      	mov	r4, r1
 800c368:	b1db      	cbz	r3, 800c3a2 <_fflush_r+0x42>
 800c36a:	b118      	cbz	r0, 800c374 <_fflush_r+0x14>
 800c36c:	6983      	ldr	r3, [r0, #24]
 800c36e:	b90b      	cbnz	r3, 800c374 <_fflush_r+0x14>
 800c370:	f000 f860 	bl	800c434 <__sinit>
 800c374:	4b0c      	ldr	r3, [pc, #48]	; (800c3a8 <_fflush_r+0x48>)
 800c376:	429c      	cmp	r4, r3
 800c378:	d109      	bne.n	800c38e <_fflush_r+0x2e>
 800c37a:	686c      	ldr	r4, [r5, #4]
 800c37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c380:	b17b      	cbz	r3, 800c3a2 <_fflush_r+0x42>
 800c382:	4621      	mov	r1, r4
 800c384:	4628      	mov	r0, r5
 800c386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c38a:	f7ff bf63 	b.w	800c254 <__sflush_r>
 800c38e:	4b07      	ldr	r3, [pc, #28]	; (800c3ac <_fflush_r+0x4c>)
 800c390:	429c      	cmp	r4, r3
 800c392:	d101      	bne.n	800c398 <_fflush_r+0x38>
 800c394:	68ac      	ldr	r4, [r5, #8]
 800c396:	e7f1      	b.n	800c37c <_fflush_r+0x1c>
 800c398:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <_fflush_r+0x50>)
 800c39a:	429c      	cmp	r4, r3
 800c39c:	bf08      	it	eq
 800c39e:	68ec      	ldreq	r4, [r5, #12]
 800c3a0:	e7ec      	b.n	800c37c <_fflush_r+0x1c>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	bd38      	pop	{r3, r4, r5, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800dc78 	.word	0x0800dc78
 800c3ac:	0800dc98 	.word	0x0800dc98
 800c3b0:	0800dc58 	.word	0x0800dc58

0800c3b4 <std>:
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	b510      	push	{r4, lr}
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c3be:	6083      	str	r3, [r0, #8]
 800c3c0:	8181      	strh	r1, [r0, #12]
 800c3c2:	6643      	str	r3, [r0, #100]	; 0x64
 800c3c4:	81c2      	strh	r2, [r0, #14]
 800c3c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ca:	6183      	str	r3, [r0, #24]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	2208      	movs	r2, #8
 800c3d0:	305c      	adds	r0, #92	; 0x5c
 800c3d2:	f7ff fde6 	bl	800bfa2 <memset>
 800c3d6:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <std+0x38>)
 800c3d8:	6263      	str	r3, [r4, #36]	; 0x24
 800c3da:	4b05      	ldr	r3, [pc, #20]	; (800c3f0 <std+0x3c>)
 800c3dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3de:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <std+0x40>)
 800c3e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3e2:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <std+0x44>)
 800c3e4:	6224      	str	r4, [r4, #32]
 800c3e6:	6323      	str	r3, [r4, #48]	; 0x30
 800c3e8:	bd10      	pop	{r4, pc}
 800c3ea:	bf00      	nop
 800c3ec:	0800cd7d 	.word	0x0800cd7d
 800c3f0:	0800cd9f 	.word	0x0800cd9f
 800c3f4:	0800cdd7 	.word	0x0800cdd7
 800c3f8:	0800cdfb 	.word	0x0800cdfb

0800c3fc <_cleanup_r>:
 800c3fc:	4901      	ldr	r1, [pc, #4]	; (800c404 <_cleanup_r+0x8>)
 800c3fe:	f000 b885 	b.w	800c50c <_fwalk_reent>
 800c402:	bf00      	nop
 800c404:	0800c361 	.word	0x0800c361

0800c408 <__sfmoreglue>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	1e4a      	subs	r2, r1, #1
 800c40c:	2568      	movs	r5, #104	; 0x68
 800c40e:	4355      	muls	r5, r2
 800c410:	460e      	mov	r6, r1
 800c412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c416:	f000 f949 	bl	800c6ac <_malloc_r>
 800c41a:	4604      	mov	r4, r0
 800c41c:	b140      	cbz	r0, 800c430 <__sfmoreglue+0x28>
 800c41e:	2100      	movs	r1, #0
 800c420:	e9c0 1600 	strd	r1, r6, [r0]
 800c424:	300c      	adds	r0, #12
 800c426:	60a0      	str	r0, [r4, #8]
 800c428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c42c:	f7ff fdb9 	bl	800bfa2 <memset>
 800c430:	4620      	mov	r0, r4
 800c432:	bd70      	pop	{r4, r5, r6, pc}

0800c434 <__sinit>:
 800c434:	6983      	ldr	r3, [r0, #24]
 800c436:	b510      	push	{r4, lr}
 800c438:	4604      	mov	r4, r0
 800c43a:	bb33      	cbnz	r3, 800c48a <__sinit+0x56>
 800c43c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c440:	6503      	str	r3, [r0, #80]	; 0x50
 800c442:	4b12      	ldr	r3, [pc, #72]	; (800c48c <__sinit+0x58>)
 800c444:	4a12      	ldr	r2, [pc, #72]	; (800c490 <__sinit+0x5c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6282      	str	r2, [r0, #40]	; 0x28
 800c44a:	4298      	cmp	r0, r3
 800c44c:	bf04      	itt	eq
 800c44e:	2301      	moveq	r3, #1
 800c450:	6183      	streq	r3, [r0, #24]
 800c452:	f000 f81f 	bl	800c494 <__sfp>
 800c456:	6060      	str	r0, [r4, #4]
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 f81b 	bl	800c494 <__sfp>
 800c45e:	60a0      	str	r0, [r4, #8]
 800c460:	4620      	mov	r0, r4
 800c462:	f000 f817 	bl	800c494 <__sfp>
 800c466:	2200      	movs	r2, #0
 800c468:	60e0      	str	r0, [r4, #12]
 800c46a:	2104      	movs	r1, #4
 800c46c:	6860      	ldr	r0, [r4, #4]
 800c46e:	f7ff ffa1 	bl	800c3b4 <std>
 800c472:	2201      	movs	r2, #1
 800c474:	2109      	movs	r1, #9
 800c476:	68a0      	ldr	r0, [r4, #8]
 800c478:	f7ff ff9c 	bl	800c3b4 <std>
 800c47c:	2202      	movs	r2, #2
 800c47e:	2112      	movs	r1, #18
 800c480:	68e0      	ldr	r0, [r4, #12]
 800c482:	f7ff ff97 	bl	800c3b4 <std>
 800c486:	2301      	movs	r3, #1
 800c488:	61a3      	str	r3, [r4, #24]
 800c48a:	bd10      	pop	{r4, pc}
 800c48c:	0800dc54 	.word	0x0800dc54
 800c490:	0800c3fd 	.word	0x0800c3fd

0800c494 <__sfp>:
 800c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c496:	4b1b      	ldr	r3, [pc, #108]	; (800c504 <__sfp+0x70>)
 800c498:	681e      	ldr	r6, [r3, #0]
 800c49a:	69b3      	ldr	r3, [r6, #24]
 800c49c:	4607      	mov	r7, r0
 800c49e:	b913      	cbnz	r3, 800c4a6 <__sfp+0x12>
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f7ff ffc7 	bl	800c434 <__sinit>
 800c4a6:	3648      	adds	r6, #72	; 0x48
 800c4a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	d503      	bpl.n	800c4b8 <__sfp+0x24>
 800c4b0:	6833      	ldr	r3, [r6, #0]
 800c4b2:	b133      	cbz	r3, 800c4c2 <__sfp+0x2e>
 800c4b4:	6836      	ldr	r6, [r6, #0]
 800c4b6:	e7f7      	b.n	800c4a8 <__sfp+0x14>
 800c4b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4bc:	b16d      	cbz	r5, 800c4da <__sfp+0x46>
 800c4be:	3468      	adds	r4, #104	; 0x68
 800c4c0:	e7f4      	b.n	800c4ac <__sfp+0x18>
 800c4c2:	2104      	movs	r1, #4
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	f7ff ff9f 	bl	800c408 <__sfmoreglue>
 800c4ca:	6030      	str	r0, [r6, #0]
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d1f1      	bne.n	800c4b4 <__sfp+0x20>
 800c4d0:	230c      	movs	r3, #12
 800c4d2:	603b      	str	r3, [r7, #0]
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4da:	4b0b      	ldr	r3, [pc, #44]	; (800c508 <__sfp+0x74>)
 800c4dc:	6665      	str	r5, [r4, #100]	; 0x64
 800c4de:	e9c4 5500 	strd	r5, r5, [r4]
 800c4e2:	60a5      	str	r5, [r4, #8]
 800c4e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c4e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c4ec:	2208      	movs	r2, #8
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4f4:	f7ff fd55 	bl	800bfa2 <memset>
 800c4f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c500:	e7e9      	b.n	800c4d6 <__sfp+0x42>
 800c502:	bf00      	nop
 800c504:	0800dc54 	.word	0x0800dc54
 800c508:	ffff0001 	.word	0xffff0001

0800c50c <_fwalk_reent>:
 800c50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c510:	4680      	mov	r8, r0
 800c512:	4689      	mov	r9, r1
 800c514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c518:	2600      	movs	r6, #0
 800c51a:	b914      	cbnz	r4, 800c522 <_fwalk_reent+0x16>
 800c51c:	4630      	mov	r0, r6
 800c51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c522:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c526:	3f01      	subs	r7, #1
 800c528:	d501      	bpl.n	800c52e <_fwalk_reent+0x22>
 800c52a:	6824      	ldr	r4, [r4, #0]
 800c52c:	e7f5      	b.n	800c51a <_fwalk_reent+0xe>
 800c52e:	89ab      	ldrh	r3, [r5, #12]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d907      	bls.n	800c544 <_fwalk_reent+0x38>
 800c534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c538:	3301      	adds	r3, #1
 800c53a:	d003      	beq.n	800c544 <_fwalk_reent+0x38>
 800c53c:	4629      	mov	r1, r5
 800c53e:	4640      	mov	r0, r8
 800c540:	47c8      	blx	r9
 800c542:	4306      	orrs	r6, r0
 800c544:	3568      	adds	r5, #104	; 0x68
 800c546:	e7ee      	b.n	800c526 <_fwalk_reent+0x1a>

0800c548 <__swhatbuf_r>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	460e      	mov	r6, r1
 800c54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c550:	2900      	cmp	r1, #0
 800c552:	b096      	sub	sp, #88	; 0x58
 800c554:	4614      	mov	r4, r2
 800c556:	461d      	mov	r5, r3
 800c558:	da07      	bge.n	800c56a <__swhatbuf_r+0x22>
 800c55a:	2300      	movs	r3, #0
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	89b3      	ldrh	r3, [r6, #12]
 800c560:	061a      	lsls	r2, r3, #24
 800c562:	d410      	bmi.n	800c586 <__swhatbuf_r+0x3e>
 800c564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c568:	e00e      	b.n	800c588 <__swhatbuf_r+0x40>
 800c56a:	466a      	mov	r2, sp
 800c56c:	f000 fc6c 	bl	800ce48 <_fstat_r>
 800c570:	2800      	cmp	r0, #0
 800c572:	dbf2      	blt.n	800c55a <__swhatbuf_r+0x12>
 800c574:	9a01      	ldr	r2, [sp, #4]
 800c576:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c57a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c57e:	425a      	negs	r2, r3
 800c580:	415a      	adcs	r2, r3
 800c582:	602a      	str	r2, [r5, #0]
 800c584:	e7ee      	b.n	800c564 <__swhatbuf_r+0x1c>
 800c586:	2340      	movs	r3, #64	; 0x40
 800c588:	2000      	movs	r0, #0
 800c58a:	6023      	str	r3, [r4, #0]
 800c58c:	b016      	add	sp, #88	; 0x58
 800c58e:	bd70      	pop	{r4, r5, r6, pc}

0800c590 <__smakebuf_r>:
 800c590:	898b      	ldrh	r3, [r1, #12]
 800c592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c594:	079d      	lsls	r5, r3, #30
 800c596:	4606      	mov	r6, r0
 800c598:	460c      	mov	r4, r1
 800c59a:	d507      	bpl.n	800c5ac <__smakebuf_r+0x1c>
 800c59c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	6123      	str	r3, [r4, #16]
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	b002      	add	sp, #8
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	ab01      	add	r3, sp, #4
 800c5ae:	466a      	mov	r2, sp
 800c5b0:	f7ff ffca 	bl	800c548 <__swhatbuf_r>
 800c5b4:	9900      	ldr	r1, [sp, #0]
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f000 f877 	bl	800c6ac <_malloc_r>
 800c5be:	b948      	cbnz	r0, 800c5d4 <__smakebuf_r+0x44>
 800c5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c4:	059a      	lsls	r2, r3, #22
 800c5c6:	d4ef      	bmi.n	800c5a8 <__smakebuf_r+0x18>
 800c5c8:	f023 0303 	bic.w	r3, r3, #3
 800c5cc:	f043 0302 	orr.w	r3, r3, #2
 800c5d0:	81a3      	strh	r3, [r4, #12]
 800c5d2:	e7e3      	b.n	800c59c <__smakebuf_r+0xc>
 800c5d4:	4b0d      	ldr	r3, [pc, #52]	; (800c60c <__smakebuf_r+0x7c>)
 800c5d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	6020      	str	r0, [r4, #0]
 800c5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e0:	81a3      	strh	r3, [r4, #12]
 800c5e2:	9b00      	ldr	r3, [sp, #0]
 800c5e4:	6163      	str	r3, [r4, #20]
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	6120      	str	r0, [r4, #16]
 800c5ea:	b15b      	cbz	r3, 800c604 <__smakebuf_r+0x74>
 800c5ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f000 fc3b 	bl	800ce6c <_isatty_r>
 800c5f6:	b128      	cbz	r0, 800c604 <__smakebuf_r+0x74>
 800c5f8:	89a3      	ldrh	r3, [r4, #12]
 800c5fa:	f023 0303 	bic.w	r3, r3, #3
 800c5fe:	f043 0301 	orr.w	r3, r3, #1
 800c602:	81a3      	strh	r3, [r4, #12]
 800c604:	89a3      	ldrh	r3, [r4, #12]
 800c606:	431d      	orrs	r5, r3
 800c608:	81a5      	strh	r5, [r4, #12]
 800c60a:	e7cd      	b.n	800c5a8 <__smakebuf_r+0x18>
 800c60c:	0800c3fd 	.word	0x0800c3fd

0800c610 <_free_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4605      	mov	r5, r0
 800c614:	2900      	cmp	r1, #0
 800c616:	d045      	beq.n	800c6a4 <_free_r+0x94>
 800c618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c61c:	1f0c      	subs	r4, r1, #4
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfb8      	it	lt
 800c622:	18e4      	addlt	r4, r4, r3
 800c624:	f000 fc44 	bl	800ceb0 <__malloc_lock>
 800c628:	4a1f      	ldr	r2, [pc, #124]	; (800c6a8 <_free_r+0x98>)
 800c62a:	6813      	ldr	r3, [r2, #0]
 800c62c:	4610      	mov	r0, r2
 800c62e:	b933      	cbnz	r3, 800c63e <_free_r+0x2e>
 800c630:	6063      	str	r3, [r4, #4]
 800c632:	6014      	str	r4, [r2, #0]
 800c634:	4628      	mov	r0, r5
 800c636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c63a:	f000 bc3a 	b.w	800ceb2 <__malloc_unlock>
 800c63e:	42a3      	cmp	r3, r4
 800c640:	d90c      	bls.n	800c65c <_free_r+0x4c>
 800c642:	6821      	ldr	r1, [r4, #0]
 800c644:	1862      	adds	r2, r4, r1
 800c646:	4293      	cmp	r3, r2
 800c648:	bf04      	itt	eq
 800c64a:	681a      	ldreq	r2, [r3, #0]
 800c64c:	685b      	ldreq	r3, [r3, #4]
 800c64e:	6063      	str	r3, [r4, #4]
 800c650:	bf04      	itt	eq
 800c652:	1852      	addeq	r2, r2, r1
 800c654:	6022      	streq	r2, [r4, #0]
 800c656:	6004      	str	r4, [r0, #0]
 800c658:	e7ec      	b.n	800c634 <_free_r+0x24>
 800c65a:	4613      	mov	r3, r2
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	b10a      	cbz	r2, 800c664 <_free_r+0x54>
 800c660:	42a2      	cmp	r2, r4
 800c662:	d9fa      	bls.n	800c65a <_free_r+0x4a>
 800c664:	6819      	ldr	r1, [r3, #0]
 800c666:	1858      	adds	r0, r3, r1
 800c668:	42a0      	cmp	r0, r4
 800c66a:	d10b      	bne.n	800c684 <_free_r+0x74>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	4401      	add	r1, r0
 800c670:	1858      	adds	r0, r3, r1
 800c672:	4282      	cmp	r2, r0
 800c674:	6019      	str	r1, [r3, #0]
 800c676:	d1dd      	bne.n	800c634 <_free_r+0x24>
 800c678:	6810      	ldr	r0, [r2, #0]
 800c67a:	6852      	ldr	r2, [r2, #4]
 800c67c:	605a      	str	r2, [r3, #4]
 800c67e:	4401      	add	r1, r0
 800c680:	6019      	str	r1, [r3, #0]
 800c682:	e7d7      	b.n	800c634 <_free_r+0x24>
 800c684:	d902      	bls.n	800c68c <_free_r+0x7c>
 800c686:	230c      	movs	r3, #12
 800c688:	602b      	str	r3, [r5, #0]
 800c68a:	e7d3      	b.n	800c634 <_free_r+0x24>
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	1821      	adds	r1, r4, r0
 800c690:	428a      	cmp	r2, r1
 800c692:	bf04      	itt	eq
 800c694:	6811      	ldreq	r1, [r2, #0]
 800c696:	6852      	ldreq	r2, [r2, #4]
 800c698:	6062      	str	r2, [r4, #4]
 800c69a:	bf04      	itt	eq
 800c69c:	1809      	addeq	r1, r1, r0
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	605c      	str	r4, [r3, #4]
 800c6a2:	e7c7      	b.n	800c634 <_free_r+0x24>
 800c6a4:	bd38      	pop	{r3, r4, r5, pc}
 800c6a6:	bf00      	nop
 800c6a8:	2000141c 	.word	0x2000141c

0800c6ac <_malloc_r>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	1ccd      	adds	r5, r1, #3
 800c6b0:	f025 0503 	bic.w	r5, r5, #3
 800c6b4:	3508      	adds	r5, #8
 800c6b6:	2d0c      	cmp	r5, #12
 800c6b8:	bf38      	it	cc
 800c6ba:	250c      	movcc	r5, #12
 800c6bc:	2d00      	cmp	r5, #0
 800c6be:	4606      	mov	r6, r0
 800c6c0:	db01      	blt.n	800c6c6 <_malloc_r+0x1a>
 800c6c2:	42a9      	cmp	r1, r5
 800c6c4:	d903      	bls.n	800c6ce <_malloc_r+0x22>
 800c6c6:	230c      	movs	r3, #12
 800c6c8:	6033      	str	r3, [r6, #0]
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	f000 fbef 	bl	800ceb0 <__malloc_lock>
 800c6d2:	4a21      	ldr	r2, [pc, #132]	; (800c758 <_malloc_r+0xac>)
 800c6d4:	6814      	ldr	r4, [r2, #0]
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	b991      	cbnz	r1, 800c700 <_malloc_r+0x54>
 800c6da:	4c20      	ldr	r4, [pc, #128]	; (800c75c <_malloc_r+0xb0>)
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	b91b      	cbnz	r3, 800c6e8 <_malloc_r+0x3c>
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f000 fb3b 	bl	800cd5c <_sbrk_r>
 800c6e6:	6020      	str	r0, [r4, #0]
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f000 fb36 	bl	800cd5c <_sbrk_r>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d124      	bne.n	800c73e <_malloc_r+0x92>
 800c6f4:	230c      	movs	r3, #12
 800c6f6:	6033      	str	r3, [r6, #0]
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f000 fbda 	bl	800ceb2 <__malloc_unlock>
 800c6fe:	e7e4      	b.n	800c6ca <_malloc_r+0x1e>
 800c700:	680b      	ldr	r3, [r1, #0]
 800c702:	1b5b      	subs	r3, r3, r5
 800c704:	d418      	bmi.n	800c738 <_malloc_r+0x8c>
 800c706:	2b0b      	cmp	r3, #11
 800c708:	d90f      	bls.n	800c72a <_malloc_r+0x7e>
 800c70a:	600b      	str	r3, [r1, #0]
 800c70c:	50cd      	str	r5, [r1, r3]
 800c70e:	18cc      	adds	r4, r1, r3
 800c710:	4630      	mov	r0, r6
 800c712:	f000 fbce 	bl	800ceb2 <__malloc_unlock>
 800c716:	f104 000b 	add.w	r0, r4, #11
 800c71a:	1d23      	adds	r3, r4, #4
 800c71c:	f020 0007 	bic.w	r0, r0, #7
 800c720:	1ac3      	subs	r3, r0, r3
 800c722:	d0d3      	beq.n	800c6cc <_malloc_r+0x20>
 800c724:	425a      	negs	r2, r3
 800c726:	50e2      	str	r2, [r4, r3]
 800c728:	e7d0      	b.n	800c6cc <_malloc_r+0x20>
 800c72a:	428c      	cmp	r4, r1
 800c72c:	684b      	ldr	r3, [r1, #4]
 800c72e:	bf16      	itet	ne
 800c730:	6063      	strne	r3, [r4, #4]
 800c732:	6013      	streq	r3, [r2, #0]
 800c734:	460c      	movne	r4, r1
 800c736:	e7eb      	b.n	800c710 <_malloc_r+0x64>
 800c738:	460c      	mov	r4, r1
 800c73a:	6849      	ldr	r1, [r1, #4]
 800c73c:	e7cc      	b.n	800c6d8 <_malloc_r+0x2c>
 800c73e:	1cc4      	adds	r4, r0, #3
 800c740:	f024 0403 	bic.w	r4, r4, #3
 800c744:	42a0      	cmp	r0, r4
 800c746:	d005      	beq.n	800c754 <_malloc_r+0xa8>
 800c748:	1a21      	subs	r1, r4, r0
 800c74a:	4630      	mov	r0, r6
 800c74c:	f000 fb06 	bl	800cd5c <_sbrk_r>
 800c750:	3001      	adds	r0, #1
 800c752:	d0cf      	beq.n	800c6f4 <_malloc_r+0x48>
 800c754:	6025      	str	r5, [r4, #0]
 800c756:	e7db      	b.n	800c710 <_malloc_r+0x64>
 800c758:	2000141c 	.word	0x2000141c
 800c75c:	20001420 	.word	0x20001420

0800c760 <__sfputc_r>:
 800c760:	6893      	ldr	r3, [r2, #8]
 800c762:	3b01      	subs	r3, #1
 800c764:	2b00      	cmp	r3, #0
 800c766:	b410      	push	{r4}
 800c768:	6093      	str	r3, [r2, #8]
 800c76a:	da08      	bge.n	800c77e <__sfputc_r+0x1e>
 800c76c:	6994      	ldr	r4, [r2, #24]
 800c76e:	42a3      	cmp	r3, r4
 800c770:	db01      	blt.n	800c776 <__sfputc_r+0x16>
 800c772:	290a      	cmp	r1, #10
 800c774:	d103      	bne.n	800c77e <__sfputc_r+0x1e>
 800c776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c77a:	f7ff bcab 	b.w	800c0d4 <__swbuf_r>
 800c77e:	6813      	ldr	r3, [r2, #0]
 800c780:	1c58      	adds	r0, r3, #1
 800c782:	6010      	str	r0, [r2, #0]
 800c784:	7019      	strb	r1, [r3, #0]
 800c786:	4608      	mov	r0, r1
 800c788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <__sfputs_r>:
 800c78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c790:	4606      	mov	r6, r0
 800c792:	460f      	mov	r7, r1
 800c794:	4614      	mov	r4, r2
 800c796:	18d5      	adds	r5, r2, r3
 800c798:	42ac      	cmp	r4, r5
 800c79a:	d101      	bne.n	800c7a0 <__sfputs_r+0x12>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e007      	b.n	800c7b0 <__sfputs_r+0x22>
 800c7a0:	463a      	mov	r2, r7
 800c7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7ff ffda 	bl	800c760 <__sfputc_r>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d1f3      	bne.n	800c798 <__sfputs_r+0xa>
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7b4 <_vfiprintf_r>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	b09d      	sub	sp, #116	; 0x74
 800c7bc:	4617      	mov	r7, r2
 800c7be:	461d      	mov	r5, r3
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	b118      	cbz	r0, 800c7cc <_vfiprintf_r+0x18>
 800c7c4:	6983      	ldr	r3, [r0, #24]
 800c7c6:	b90b      	cbnz	r3, 800c7cc <_vfiprintf_r+0x18>
 800c7c8:	f7ff fe34 	bl	800c434 <__sinit>
 800c7cc:	4b7c      	ldr	r3, [pc, #496]	; (800c9c0 <_vfiprintf_r+0x20c>)
 800c7ce:	429c      	cmp	r4, r3
 800c7d0:	d158      	bne.n	800c884 <_vfiprintf_r+0xd0>
 800c7d2:	6874      	ldr	r4, [r6, #4]
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	0718      	lsls	r0, r3, #28
 800c7d8:	d55e      	bpl.n	800c898 <_vfiprintf_r+0xe4>
 800c7da:	6923      	ldr	r3, [r4, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d05b      	beq.n	800c898 <_vfiprintf_r+0xe4>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e4:	2320      	movs	r3, #32
 800c7e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ea:	2330      	movs	r3, #48	; 0x30
 800c7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7f0:	9503      	str	r5, [sp, #12]
 800c7f2:	f04f 0b01 	mov.w	fp, #1
 800c7f6:	46b8      	mov	r8, r7
 800c7f8:	4645      	mov	r5, r8
 800c7fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c7fe:	b10b      	cbz	r3, 800c804 <_vfiprintf_r+0x50>
 800c800:	2b25      	cmp	r3, #37	; 0x25
 800c802:	d154      	bne.n	800c8ae <_vfiprintf_r+0xfa>
 800c804:	ebb8 0a07 	subs.w	sl, r8, r7
 800c808:	d00b      	beq.n	800c822 <_vfiprintf_r+0x6e>
 800c80a:	4653      	mov	r3, sl
 800c80c:	463a      	mov	r2, r7
 800c80e:	4621      	mov	r1, r4
 800c810:	4630      	mov	r0, r6
 800c812:	f7ff ffbc 	bl	800c78e <__sfputs_r>
 800c816:	3001      	adds	r0, #1
 800c818:	f000 80c2 	beq.w	800c9a0 <_vfiprintf_r+0x1ec>
 800c81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c81e:	4453      	add	r3, sl
 800c820:	9309      	str	r3, [sp, #36]	; 0x24
 800c822:	f898 3000 	ldrb.w	r3, [r8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 80ba 	beq.w	800c9a0 <_vfiprintf_r+0x1ec>
 800c82c:	2300      	movs	r3, #0
 800c82e:	f04f 32ff 	mov.w	r2, #4294967295
 800c832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	9307      	str	r3, [sp, #28]
 800c83a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c83e:	931a      	str	r3, [sp, #104]	; 0x68
 800c840:	46a8      	mov	r8, r5
 800c842:	2205      	movs	r2, #5
 800c844:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c848:	485e      	ldr	r0, [pc, #376]	; (800c9c4 <_vfiprintf_r+0x210>)
 800c84a:	f7f3 fca1 	bl	8000190 <memchr>
 800c84e:	9b04      	ldr	r3, [sp, #16]
 800c850:	bb78      	cbnz	r0, 800c8b2 <_vfiprintf_r+0xfe>
 800c852:	06d9      	lsls	r1, r3, #27
 800c854:	bf44      	itt	mi
 800c856:	2220      	movmi	r2, #32
 800c858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c85c:	071a      	lsls	r2, r3, #28
 800c85e:	bf44      	itt	mi
 800c860:	222b      	movmi	r2, #43	; 0x2b
 800c862:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c866:	782a      	ldrb	r2, [r5, #0]
 800c868:	2a2a      	cmp	r2, #42	; 0x2a
 800c86a:	d02a      	beq.n	800c8c2 <_vfiprintf_r+0x10e>
 800c86c:	9a07      	ldr	r2, [sp, #28]
 800c86e:	46a8      	mov	r8, r5
 800c870:	2000      	movs	r0, #0
 800c872:	250a      	movs	r5, #10
 800c874:	4641      	mov	r1, r8
 800c876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c87a:	3b30      	subs	r3, #48	; 0x30
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	d969      	bls.n	800c954 <_vfiprintf_r+0x1a0>
 800c880:	b360      	cbz	r0, 800c8dc <_vfiprintf_r+0x128>
 800c882:	e024      	b.n	800c8ce <_vfiprintf_r+0x11a>
 800c884:	4b50      	ldr	r3, [pc, #320]	; (800c9c8 <_vfiprintf_r+0x214>)
 800c886:	429c      	cmp	r4, r3
 800c888:	d101      	bne.n	800c88e <_vfiprintf_r+0xda>
 800c88a:	68b4      	ldr	r4, [r6, #8]
 800c88c:	e7a2      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c88e:	4b4f      	ldr	r3, [pc, #316]	; (800c9cc <_vfiprintf_r+0x218>)
 800c890:	429c      	cmp	r4, r3
 800c892:	bf08      	it	eq
 800c894:	68f4      	ldreq	r4, [r6, #12]
 800c896:	e79d      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c898:	4621      	mov	r1, r4
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7ff fc6c 	bl	800c178 <__swsetup_r>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d09d      	beq.n	800c7e0 <_vfiprintf_r+0x2c>
 800c8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a8:	b01d      	add	sp, #116	; 0x74
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ae:	46a8      	mov	r8, r5
 800c8b0:	e7a2      	b.n	800c7f8 <_vfiprintf_r+0x44>
 800c8b2:	4a44      	ldr	r2, [pc, #272]	; (800c9c4 <_vfiprintf_r+0x210>)
 800c8b4:	1a80      	subs	r0, r0, r2
 800c8b6:	fa0b f000 	lsl.w	r0, fp, r0
 800c8ba:	4318      	orrs	r0, r3
 800c8bc:	9004      	str	r0, [sp, #16]
 800c8be:	4645      	mov	r5, r8
 800c8c0:	e7be      	b.n	800c840 <_vfiprintf_r+0x8c>
 800c8c2:	9a03      	ldr	r2, [sp, #12]
 800c8c4:	1d11      	adds	r1, r2, #4
 800c8c6:	6812      	ldr	r2, [r2, #0]
 800c8c8:	9103      	str	r1, [sp, #12]
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	db01      	blt.n	800c8d2 <_vfiprintf_r+0x11e>
 800c8ce:	9207      	str	r2, [sp, #28]
 800c8d0:	e004      	b.n	800c8dc <_vfiprintf_r+0x128>
 800c8d2:	4252      	negs	r2, r2
 800c8d4:	f043 0302 	orr.w	r3, r3, #2
 800c8d8:	9207      	str	r2, [sp, #28]
 800c8da:	9304      	str	r3, [sp, #16]
 800c8dc:	f898 3000 	ldrb.w	r3, [r8]
 800c8e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e2:	d10e      	bne.n	800c902 <_vfiprintf_r+0x14e>
 800c8e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ea:	d138      	bne.n	800c95e <_vfiprintf_r+0x1aa>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	1d1a      	adds	r2, r3, #4
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	9203      	str	r2, [sp, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	bfb8      	it	lt
 800c8f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8fc:	f108 0802 	add.w	r8, r8, #2
 800c900:	9305      	str	r3, [sp, #20]
 800c902:	4d33      	ldr	r5, [pc, #204]	; (800c9d0 <_vfiprintf_r+0x21c>)
 800c904:	f898 1000 	ldrb.w	r1, [r8]
 800c908:	2203      	movs	r2, #3
 800c90a:	4628      	mov	r0, r5
 800c90c:	f7f3 fc40 	bl	8000190 <memchr>
 800c910:	b140      	cbz	r0, 800c924 <_vfiprintf_r+0x170>
 800c912:	2340      	movs	r3, #64	; 0x40
 800c914:	1b40      	subs	r0, r0, r5
 800c916:	fa03 f000 	lsl.w	r0, r3, r0
 800c91a:	9b04      	ldr	r3, [sp, #16]
 800c91c:	4303      	orrs	r3, r0
 800c91e:	f108 0801 	add.w	r8, r8, #1
 800c922:	9304      	str	r3, [sp, #16]
 800c924:	f898 1000 	ldrb.w	r1, [r8]
 800c928:	482a      	ldr	r0, [pc, #168]	; (800c9d4 <_vfiprintf_r+0x220>)
 800c92a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c92e:	2206      	movs	r2, #6
 800c930:	f108 0701 	add.w	r7, r8, #1
 800c934:	f7f3 fc2c 	bl	8000190 <memchr>
 800c938:	2800      	cmp	r0, #0
 800c93a:	d037      	beq.n	800c9ac <_vfiprintf_r+0x1f8>
 800c93c:	4b26      	ldr	r3, [pc, #152]	; (800c9d8 <_vfiprintf_r+0x224>)
 800c93e:	bb1b      	cbnz	r3, 800c988 <_vfiprintf_r+0x1d4>
 800c940:	9b03      	ldr	r3, [sp, #12]
 800c942:	3307      	adds	r3, #7
 800c944:	f023 0307 	bic.w	r3, r3, #7
 800c948:	3308      	adds	r3, #8
 800c94a:	9303      	str	r3, [sp, #12]
 800c94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c94e:	444b      	add	r3, r9
 800c950:	9309      	str	r3, [sp, #36]	; 0x24
 800c952:	e750      	b.n	800c7f6 <_vfiprintf_r+0x42>
 800c954:	fb05 3202 	mla	r2, r5, r2, r3
 800c958:	2001      	movs	r0, #1
 800c95a:	4688      	mov	r8, r1
 800c95c:	e78a      	b.n	800c874 <_vfiprintf_r+0xc0>
 800c95e:	2300      	movs	r3, #0
 800c960:	f108 0801 	add.w	r8, r8, #1
 800c964:	9305      	str	r3, [sp, #20]
 800c966:	4619      	mov	r1, r3
 800c968:	250a      	movs	r5, #10
 800c96a:	4640      	mov	r0, r8
 800c96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c970:	3a30      	subs	r2, #48	; 0x30
 800c972:	2a09      	cmp	r2, #9
 800c974:	d903      	bls.n	800c97e <_vfiprintf_r+0x1ca>
 800c976:	2b00      	cmp	r3, #0
 800c978:	d0c3      	beq.n	800c902 <_vfiprintf_r+0x14e>
 800c97a:	9105      	str	r1, [sp, #20]
 800c97c:	e7c1      	b.n	800c902 <_vfiprintf_r+0x14e>
 800c97e:	fb05 2101 	mla	r1, r5, r1, r2
 800c982:	2301      	movs	r3, #1
 800c984:	4680      	mov	r8, r0
 800c986:	e7f0      	b.n	800c96a <_vfiprintf_r+0x1b6>
 800c988:	ab03      	add	r3, sp, #12
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	4622      	mov	r2, r4
 800c98e:	4b13      	ldr	r3, [pc, #76]	; (800c9dc <_vfiprintf_r+0x228>)
 800c990:	a904      	add	r1, sp, #16
 800c992:	4630      	mov	r0, r6
 800c994:	f3af 8000 	nop.w
 800c998:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c99c:	4681      	mov	r9, r0
 800c99e:	d1d5      	bne.n	800c94c <_vfiprintf_r+0x198>
 800c9a0:	89a3      	ldrh	r3, [r4, #12]
 800c9a2:	065b      	lsls	r3, r3, #25
 800c9a4:	f53f af7e 	bmi.w	800c8a4 <_vfiprintf_r+0xf0>
 800c9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9aa:	e77d      	b.n	800c8a8 <_vfiprintf_r+0xf4>
 800c9ac:	ab03      	add	r3, sp, #12
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <_vfiprintf_r+0x228>)
 800c9b4:	a904      	add	r1, sp, #16
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	f000 f888 	bl	800cacc <_printf_i>
 800c9bc:	e7ec      	b.n	800c998 <_vfiprintf_r+0x1e4>
 800c9be:	bf00      	nop
 800c9c0:	0800dc78 	.word	0x0800dc78
 800c9c4:	0800dcb8 	.word	0x0800dcb8
 800c9c8:	0800dc98 	.word	0x0800dc98
 800c9cc:	0800dc58 	.word	0x0800dc58
 800c9d0:	0800dcbe 	.word	0x0800dcbe
 800c9d4:	0800dcc2 	.word	0x0800dcc2
 800c9d8:	00000000 	.word	0x00000000
 800c9dc:	0800c78f 	.word	0x0800c78f

0800c9e0 <_printf_common>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	4691      	mov	r9, r2
 800c9e6:	461f      	mov	r7, r3
 800c9e8:	688a      	ldr	r2, [r1, #8]
 800c9ea:	690b      	ldr	r3, [r1, #16]
 800c9ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	bfb8      	it	lt
 800c9f4:	4613      	movlt	r3, r2
 800c9f6:	f8c9 3000 	str.w	r3, [r9]
 800c9fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9fe:	4606      	mov	r6, r0
 800ca00:	460c      	mov	r4, r1
 800ca02:	b112      	cbz	r2, 800ca0a <_printf_common+0x2a>
 800ca04:	3301      	adds	r3, #1
 800ca06:	f8c9 3000 	str.w	r3, [r9]
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	0699      	lsls	r1, r3, #26
 800ca0e:	bf42      	ittt	mi
 800ca10:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ca14:	3302      	addmi	r3, #2
 800ca16:	f8c9 3000 	strmi.w	r3, [r9]
 800ca1a:	6825      	ldr	r5, [r4, #0]
 800ca1c:	f015 0506 	ands.w	r5, r5, #6
 800ca20:	d107      	bne.n	800ca32 <_printf_common+0x52>
 800ca22:	f104 0a19 	add.w	sl, r4, #25
 800ca26:	68e3      	ldr	r3, [r4, #12]
 800ca28:	f8d9 2000 	ldr.w	r2, [r9]
 800ca2c:	1a9b      	subs	r3, r3, r2
 800ca2e:	42ab      	cmp	r3, r5
 800ca30:	dc28      	bgt.n	800ca84 <_printf_common+0xa4>
 800ca32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ca36:	6822      	ldr	r2, [r4, #0]
 800ca38:	3300      	adds	r3, #0
 800ca3a:	bf18      	it	ne
 800ca3c:	2301      	movne	r3, #1
 800ca3e:	0692      	lsls	r2, r2, #26
 800ca40:	d42d      	bmi.n	800ca9e <_printf_common+0xbe>
 800ca42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca46:	4639      	mov	r1, r7
 800ca48:	4630      	mov	r0, r6
 800ca4a:	47c0      	blx	r8
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d020      	beq.n	800ca92 <_printf_common+0xb2>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	68e5      	ldr	r5, [r4, #12]
 800ca54:	f8d9 2000 	ldr.w	r2, [r9]
 800ca58:	f003 0306 	and.w	r3, r3, #6
 800ca5c:	2b04      	cmp	r3, #4
 800ca5e:	bf08      	it	eq
 800ca60:	1aad      	subeq	r5, r5, r2
 800ca62:	68a3      	ldr	r3, [r4, #8]
 800ca64:	6922      	ldr	r2, [r4, #16]
 800ca66:	bf0c      	ite	eq
 800ca68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca6c:	2500      	movne	r5, #0
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	bfc4      	itt	gt
 800ca72:	1a9b      	subgt	r3, r3, r2
 800ca74:	18ed      	addgt	r5, r5, r3
 800ca76:	f04f 0900 	mov.w	r9, #0
 800ca7a:	341a      	adds	r4, #26
 800ca7c:	454d      	cmp	r5, r9
 800ca7e:	d11a      	bne.n	800cab6 <_printf_common+0xd6>
 800ca80:	2000      	movs	r0, #0
 800ca82:	e008      	b.n	800ca96 <_printf_common+0xb6>
 800ca84:	2301      	movs	r3, #1
 800ca86:	4652      	mov	r2, sl
 800ca88:	4639      	mov	r1, r7
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	47c0      	blx	r8
 800ca8e:	3001      	adds	r0, #1
 800ca90:	d103      	bne.n	800ca9a <_printf_common+0xba>
 800ca92:	f04f 30ff 	mov.w	r0, #4294967295
 800ca96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9a:	3501      	adds	r5, #1
 800ca9c:	e7c3      	b.n	800ca26 <_printf_common+0x46>
 800ca9e:	18e1      	adds	r1, r4, r3
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	2030      	movs	r0, #48	; 0x30
 800caa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caa8:	4422      	add	r2, r4
 800caaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800caae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cab2:	3302      	adds	r3, #2
 800cab4:	e7c5      	b.n	800ca42 <_printf_common+0x62>
 800cab6:	2301      	movs	r3, #1
 800cab8:	4622      	mov	r2, r4
 800caba:	4639      	mov	r1, r7
 800cabc:	4630      	mov	r0, r6
 800cabe:	47c0      	blx	r8
 800cac0:	3001      	adds	r0, #1
 800cac2:	d0e6      	beq.n	800ca92 <_printf_common+0xb2>
 800cac4:	f109 0901 	add.w	r9, r9, #1
 800cac8:	e7d8      	b.n	800ca7c <_printf_common+0x9c>
	...

0800cacc <_printf_i>:
 800cacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cad0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cad4:	460c      	mov	r4, r1
 800cad6:	7e09      	ldrb	r1, [r1, #24]
 800cad8:	b085      	sub	sp, #20
 800cada:	296e      	cmp	r1, #110	; 0x6e
 800cadc:	4617      	mov	r7, r2
 800cade:	4606      	mov	r6, r0
 800cae0:	4698      	mov	r8, r3
 800cae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cae4:	f000 80b3 	beq.w	800cc4e <_printf_i+0x182>
 800cae8:	d822      	bhi.n	800cb30 <_printf_i+0x64>
 800caea:	2963      	cmp	r1, #99	; 0x63
 800caec:	d036      	beq.n	800cb5c <_printf_i+0x90>
 800caee:	d80a      	bhi.n	800cb06 <_printf_i+0x3a>
 800caf0:	2900      	cmp	r1, #0
 800caf2:	f000 80b9 	beq.w	800cc68 <_printf_i+0x19c>
 800caf6:	2958      	cmp	r1, #88	; 0x58
 800caf8:	f000 8083 	beq.w	800cc02 <_printf_i+0x136>
 800cafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cb04:	e032      	b.n	800cb6c <_printf_i+0xa0>
 800cb06:	2964      	cmp	r1, #100	; 0x64
 800cb08:	d001      	beq.n	800cb0e <_printf_i+0x42>
 800cb0a:	2969      	cmp	r1, #105	; 0x69
 800cb0c:	d1f6      	bne.n	800cafc <_printf_i+0x30>
 800cb0e:	6820      	ldr	r0, [r4, #0]
 800cb10:	6813      	ldr	r3, [r2, #0]
 800cb12:	0605      	lsls	r5, r0, #24
 800cb14:	f103 0104 	add.w	r1, r3, #4
 800cb18:	d52a      	bpl.n	800cb70 <_printf_i+0xa4>
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	6011      	str	r1, [r2, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	da03      	bge.n	800cb2a <_printf_i+0x5e>
 800cb22:	222d      	movs	r2, #45	; 0x2d
 800cb24:	425b      	negs	r3, r3
 800cb26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cb2a:	486f      	ldr	r0, [pc, #444]	; (800cce8 <_printf_i+0x21c>)
 800cb2c:	220a      	movs	r2, #10
 800cb2e:	e039      	b.n	800cba4 <_printf_i+0xd8>
 800cb30:	2973      	cmp	r1, #115	; 0x73
 800cb32:	f000 809d 	beq.w	800cc70 <_printf_i+0x1a4>
 800cb36:	d808      	bhi.n	800cb4a <_printf_i+0x7e>
 800cb38:	296f      	cmp	r1, #111	; 0x6f
 800cb3a:	d020      	beq.n	800cb7e <_printf_i+0xb2>
 800cb3c:	2970      	cmp	r1, #112	; 0x70
 800cb3e:	d1dd      	bne.n	800cafc <_printf_i+0x30>
 800cb40:	6823      	ldr	r3, [r4, #0]
 800cb42:	f043 0320 	orr.w	r3, r3, #32
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	e003      	b.n	800cb52 <_printf_i+0x86>
 800cb4a:	2975      	cmp	r1, #117	; 0x75
 800cb4c:	d017      	beq.n	800cb7e <_printf_i+0xb2>
 800cb4e:	2978      	cmp	r1, #120	; 0x78
 800cb50:	d1d4      	bne.n	800cafc <_printf_i+0x30>
 800cb52:	2378      	movs	r3, #120	; 0x78
 800cb54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb58:	4864      	ldr	r0, [pc, #400]	; (800ccec <_printf_i+0x220>)
 800cb5a:	e055      	b.n	800cc08 <_printf_i+0x13c>
 800cb5c:	6813      	ldr	r3, [r2, #0]
 800cb5e:	1d19      	adds	r1, r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	6011      	str	r1, [r2, #0]
 800cb64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e08c      	b.n	800cc8a <_printf_i+0x1be>
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	6011      	str	r1, [r2, #0]
 800cb74:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb78:	bf18      	it	ne
 800cb7a:	b21b      	sxthne	r3, r3
 800cb7c:	e7cf      	b.n	800cb1e <_printf_i+0x52>
 800cb7e:	6813      	ldr	r3, [r2, #0]
 800cb80:	6825      	ldr	r5, [r4, #0]
 800cb82:	1d18      	adds	r0, r3, #4
 800cb84:	6010      	str	r0, [r2, #0]
 800cb86:	0628      	lsls	r0, r5, #24
 800cb88:	d501      	bpl.n	800cb8e <_printf_i+0xc2>
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	e002      	b.n	800cb94 <_printf_i+0xc8>
 800cb8e:	0668      	lsls	r0, r5, #25
 800cb90:	d5fb      	bpl.n	800cb8a <_printf_i+0xbe>
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	4854      	ldr	r0, [pc, #336]	; (800cce8 <_printf_i+0x21c>)
 800cb96:	296f      	cmp	r1, #111	; 0x6f
 800cb98:	bf14      	ite	ne
 800cb9a:	220a      	movne	r2, #10
 800cb9c:	2208      	moveq	r2, #8
 800cb9e:	2100      	movs	r1, #0
 800cba0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cba4:	6865      	ldr	r5, [r4, #4]
 800cba6:	60a5      	str	r5, [r4, #8]
 800cba8:	2d00      	cmp	r5, #0
 800cbaa:	f2c0 8095 	blt.w	800ccd8 <_printf_i+0x20c>
 800cbae:	6821      	ldr	r1, [r4, #0]
 800cbb0:	f021 0104 	bic.w	r1, r1, #4
 800cbb4:	6021      	str	r1, [r4, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d13d      	bne.n	800cc36 <_printf_i+0x16a>
 800cbba:	2d00      	cmp	r5, #0
 800cbbc:	f040 808e 	bne.w	800ccdc <_printf_i+0x210>
 800cbc0:	4665      	mov	r5, ip
 800cbc2:	2a08      	cmp	r2, #8
 800cbc4:	d10b      	bne.n	800cbde <_printf_i+0x112>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	07db      	lsls	r3, r3, #31
 800cbca:	d508      	bpl.n	800cbde <_printf_i+0x112>
 800cbcc:	6923      	ldr	r3, [r4, #16]
 800cbce:	6862      	ldr	r2, [r4, #4]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	bfde      	ittt	le
 800cbd4:	2330      	movle	r3, #48	; 0x30
 800cbd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbda:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbde:	ebac 0305 	sub.w	r3, ip, r5
 800cbe2:	6123      	str	r3, [r4, #16]
 800cbe4:	f8cd 8000 	str.w	r8, [sp]
 800cbe8:	463b      	mov	r3, r7
 800cbea:	aa03      	add	r2, sp, #12
 800cbec:	4621      	mov	r1, r4
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f7ff fef6 	bl	800c9e0 <_printf_common>
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d14d      	bne.n	800cc94 <_printf_i+0x1c8>
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfc:	b005      	add	sp, #20
 800cbfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc02:	4839      	ldr	r0, [pc, #228]	; (800cce8 <_printf_i+0x21c>)
 800cc04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cc08:	6813      	ldr	r3, [r2, #0]
 800cc0a:	6821      	ldr	r1, [r4, #0]
 800cc0c:	1d1d      	adds	r5, r3, #4
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6015      	str	r5, [r2, #0]
 800cc12:	060a      	lsls	r2, r1, #24
 800cc14:	d50b      	bpl.n	800cc2e <_printf_i+0x162>
 800cc16:	07ca      	lsls	r2, r1, #31
 800cc18:	bf44      	itt	mi
 800cc1a:	f041 0120 	orrmi.w	r1, r1, #32
 800cc1e:	6021      	strmi	r1, [r4, #0]
 800cc20:	b91b      	cbnz	r3, 800cc2a <_printf_i+0x15e>
 800cc22:	6822      	ldr	r2, [r4, #0]
 800cc24:	f022 0220 	bic.w	r2, r2, #32
 800cc28:	6022      	str	r2, [r4, #0]
 800cc2a:	2210      	movs	r2, #16
 800cc2c:	e7b7      	b.n	800cb9e <_printf_i+0xd2>
 800cc2e:	064d      	lsls	r5, r1, #25
 800cc30:	bf48      	it	mi
 800cc32:	b29b      	uxthmi	r3, r3
 800cc34:	e7ef      	b.n	800cc16 <_printf_i+0x14a>
 800cc36:	4665      	mov	r5, ip
 800cc38:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc3c:	fb02 3311 	mls	r3, r2, r1, r3
 800cc40:	5cc3      	ldrb	r3, [r0, r3]
 800cc42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cc46:	460b      	mov	r3, r1
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	d1f5      	bne.n	800cc38 <_printf_i+0x16c>
 800cc4c:	e7b9      	b.n	800cbc2 <_printf_i+0xf6>
 800cc4e:	6813      	ldr	r3, [r2, #0]
 800cc50:	6825      	ldr	r5, [r4, #0]
 800cc52:	6961      	ldr	r1, [r4, #20]
 800cc54:	1d18      	adds	r0, r3, #4
 800cc56:	6010      	str	r0, [r2, #0]
 800cc58:	0628      	lsls	r0, r5, #24
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	d501      	bpl.n	800cc62 <_printf_i+0x196>
 800cc5e:	6019      	str	r1, [r3, #0]
 800cc60:	e002      	b.n	800cc68 <_printf_i+0x19c>
 800cc62:	066a      	lsls	r2, r5, #25
 800cc64:	d5fb      	bpl.n	800cc5e <_printf_i+0x192>
 800cc66:	8019      	strh	r1, [r3, #0]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	6123      	str	r3, [r4, #16]
 800cc6c:	4665      	mov	r5, ip
 800cc6e:	e7b9      	b.n	800cbe4 <_printf_i+0x118>
 800cc70:	6813      	ldr	r3, [r2, #0]
 800cc72:	1d19      	adds	r1, r3, #4
 800cc74:	6011      	str	r1, [r2, #0]
 800cc76:	681d      	ldr	r5, [r3, #0]
 800cc78:	6862      	ldr	r2, [r4, #4]
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f7f3 fa87 	bl	8000190 <memchr>
 800cc82:	b108      	cbz	r0, 800cc88 <_printf_i+0x1bc>
 800cc84:	1b40      	subs	r0, r0, r5
 800cc86:	6060      	str	r0, [r4, #4]
 800cc88:	6863      	ldr	r3, [r4, #4]
 800cc8a:	6123      	str	r3, [r4, #16]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc92:	e7a7      	b.n	800cbe4 <_printf_i+0x118>
 800cc94:	6923      	ldr	r3, [r4, #16]
 800cc96:	462a      	mov	r2, r5
 800cc98:	4639      	mov	r1, r7
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	47c0      	blx	r8
 800cc9e:	3001      	adds	r0, #1
 800cca0:	d0aa      	beq.n	800cbf8 <_printf_i+0x12c>
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	079b      	lsls	r3, r3, #30
 800cca6:	d413      	bmi.n	800ccd0 <_printf_i+0x204>
 800cca8:	68e0      	ldr	r0, [r4, #12]
 800ccaa:	9b03      	ldr	r3, [sp, #12]
 800ccac:	4298      	cmp	r0, r3
 800ccae:	bfb8      	it	lt
 800ccb0:	4618      	movlt	r0, r3
 800ccb2:	e7a3      	b.n	800cbfc <_printf_i+0x130>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	464a      	mov	r2, r9
 800ccb8:	4639      	mov	r1, r7
 800ccba:	4630      	mov	r0, r6
 800ccbc:	47c0      	blx	r8
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	d09a      	beq.n	800cbf8 <_printf_i+0x12c>
 800ccc2:	3501      	adds	r5, #1
 800ccc4:	68e3      	ldr	r3, [r4, #12]
 800ccc6:	9a03      	ldr	r2, [sp, #12]
 800ccc8:	1a9b      	subs	r3, r3, r2
 800ccca:	42ab      	cmp	r3, r5
 800cccc:	dcf2      	bgt.n	800ccb4 <_printf_i+0x1e8>
 800ccce:	e7eb      	b.n	800cca8 <_printf_i+0x1dc>
 800ccd0:	2500      	movs	r5, #0
 800ccd2:	f104 0919 	add.w	r9, r4, #25
 800ccd6:	e7f5      	b.n	800ccc4 <_printf_i+0x1f8>
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1ac      	bne.n	800cc36 <_printf_i+0x16a>
 800ccdc:	7803      	ldrb	r3, [r0, #0]
 800ccde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cce2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cce6:	e76c      	b.n	800cbc2 <_printf_i+0xf6>
 800cce8:	0800dcc9 	.word	0x0800dcc9
 800ccec:	0800dcda 	.word	0x0800dcda

0800ccf0 <_putc_r>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	b118      	cbz	r0, 800cd02 <_putc_r+0x12>
 800ccfa:	6983      	ldr	r3, [r0, #24]
 800ccfc:	b90b      	cbnz	r3, 800cd02 <_putc_r+0x12>
 800ccfe:	f7ff fb99 	bl	800c434 <__sinit>
 800cd02:	4b13      	ldr	r3, [pc, #76]	; (800cd50 <_putc_r+0x60>)
 800cd04:	429c      	cmp	r4, r3
 800cd06:	d112      	bne.n	800cd2e <_putc_r+0x3e>
 800cd08:	6874      	ldr	r4, [r6, #4]
 800cd0a:	68a3      	ldr	r3, [r4, #8]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	60a3      	str	r3, [r4, #8]
 800cd12:	da16      	bge.n	800cd42 <_putc_r+0x52>
 800cd14:	69a2      	ldr	r2, [r4, #24]
 800cd16:	4293      	cmp	r3, r2
 800cd18:	db02      	blt.n	800cd20 <_putc_r+0x30>
 800cd1a:	b2eb      	uxtb	r3, r5
 800cd1c:	2b0a      	cmp	r3, #10
 800cd1e:	d110      	bne.n	800cd42 <_putc_r+0x52>
 800cd20:	4622      	mov	r2, r4
 800cd22:	4629      	mov	r1, r5
 800cd24:	4630      	mov	r0, r6
 800cd26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd2a:	f7ff b9d3 	b.w	800c0d4 <__swbuf_r>
 800cd2e:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <_putc_r+0x64>)
 800cd30:	429c      	cmp	r4, r3
 800cd32:	d101      	bne.n	800cd38 <_putc_r+0x48>
 800cd34:	68b4      	ldr	r4, [r6, #8]
 800cd36:	e7e8      	b.n	800cd0a <_putc_r+0x1a>
 800cd38:	4b07      	ldr	r3, [pc, #28]	; (800cd58 <_putc_r+0x68>)
 800cd3a:	429c      	cmp	r4, r3
 800cd3c:	bf08      	it	eq
 800cd3e:	68f4      	ldreq	r4, [r6, #12]
 800cd40:	e7e3      	b.n	800cd0a <_putc_r+0x1a>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	6022      	str	r2, [r4, #0]
 800cd48:	701d      	strb	r5, [r3, #0]
 800cd4a:	b2e8      	uxtb	r0, r5
 800cd4c:	bd70      	pop	{r4, r5, r6, pc}
 800cd4e:	bf00      	nop
 800cd50:	0800dc78 	.word	0x0800dc78
 800cd54:	0800dc98 	.word	0x0800dc98
 800cd58:	0800dc58 	.word	0x0800dc58

0800cd5c <_sbrk_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4c06      	ldr	r4, [pc, #24]	; (800cd78 <_sbrk_r+0x1c>)
 800cd60:	2300      	movs	r3, #0
 800cd62:	4605      	mov	r5, r0
 800cd64:	4608      	mov	r0, r1
 800cd66:	6023      	str	r3, [r4, #0]
 800cd68:	f7f5 faec 	bl	8002344 <_sbrk>
 800cd6c:	1c43      	adds	r3, r0, #1
 800cd6e:	d102      	bne.n	800cd76 <_sbrk_r+0x1a>
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	b103      	cbz	r3, 800cd76 <_sbrk_r+0x1a>
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	20001668 	.word	0x20001668

0800cd7c <__sread>:
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	460c      	mov	r4, r1
 800cd80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd84:	f000 f896 	bl	800ceb4 <_read_r>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	bfab      	itete	ge
 800cd8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd8e:	89a3      	ldrhlt	r3, [r4, #12]
 800cd90:	181b      	addge	r3, r3, r0
 800cd92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd96:	bfac      	ite	ge
 800cd98:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd9a:	81a3      	strhlt	r3, [r4, #12]
 800cd9c:	bd10      	pop	{r4, pc}

0800cd9e <__swrite>:
 800cd9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda2:	461f      	mov	r7, r3
 800cda4:	898b      	ldrh	r3, [r1, #12]
 800cda6:	05db      	lsls	r3, r3, #23
 800cda8:	4605      	mov	r5, r0
 800cdaa:	460c      	mov	r4, r1
 800cdac:	4616      	mov	r6, r2
 800cdae:	d505      	bpl.n	800cdbc <__swrite+0x1e>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb8:	f000 f868 	bl	800ce8c <_lseek_r>
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdc6:	81a3      	strh	r3, [r4, #12]
 800cdc8:	4632      	mov	r2, r6
 800cdca:	463b      	mov	r3, r7
 800cdcc:	4628      	mov	r0, r5
 800cdce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd2:	f000 b817 	b.w	800ce04 <_write_r>

0800cdd6 <__sseek>:
 800cdd6:	b510      	push	{r4, lr}
 800cdd8:	460c      	mov	r4, r1
 800cdda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdde:	f000 f855 	bl	800ce8c <_lseek_r>
 800cde2:	1c43      	adds	r3, r0, #1
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	bf15      	itete	ne
 800cde8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdf2:	81a3      	strheq	r3, [r4, #12]
 800cdf4:	bf18      	it	ne
 800cdf6:	81a3      	strhne	r3, [r4, #12]
 800cdf8:	bd10      	pop	{r4, pc}

0800cdfa <__sclose>:
 800cdfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdfe:	f000 b813 	b.w	800ce28 <_close_r>
	...

0800ce04 <_write_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4c07      	ldr	r4, [pc, #28]	; (800ce24 <_write_r+0x20>)
 800ce08:	4605      	mov	r5, r0
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	2200      	movs	r2, #0
 800ce10:	6022      	str	r2, [r4, #0]
 800ce12:	461a      	mov	r2, r3
 800ce14:	f7fd f868 	bl	8009ee8 <_write>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_write_r+0x1e>
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_write_r+0x1e>
 800ce20:	602b      	str	r3, [r5, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	20001668 	.word	0x20001668

0800ce28 <_close_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4c06      	ldr	r4, [pc, #24]	; (800ce44 <_close_r+0x1c>)
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	4605      	mov	r5, r0
 800ce30:	4608      	mov	r0, r1
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	f7f5 fa52 	bl	80022dc <_close>
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	d102      	bne.n	800ce42 <_close_r+0x1a>
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	b103      	cbz	r3, 800ce42 <_close_r+0x1a>
 800ce40:	602b      	str	r3, [r5, #0]
 800ce42:	bd38      	pop	{r3, r4, r5, pc}
 800ce44:	20001668 	.word	0x20001668

0800ce48 <_fstat_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4c07      	ldr	r4, [pc, #28]	; (800ce68 <_fstat_r+0x20>)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4605      	mov	r5, r0
 800ce50:	4608      	mov	r0, r1
 800ce52:	4611      	mov	r1, r2
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	f7f5 fa4d 	bl	80022f4 <_fstat>
 800ce5a:	1c43      	adds	r3, r0, #1
 800ce5c:	d102      	bne.n	800ce64 <_fstat_r+0x1c>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	b103      	cbz	r3, 800ce64 <_fstat_r+0x1c>
 800ce62:	602b      	str	r3, [r5, #0]
 800ce64:	bd38      	pop	{r3, r4, r5, pc}
 800ce66:	bf00      	nop
 800ce68:	20001668 	.word	0x20001668

0800ce6c <_isatty_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4c06      	ldr	r4, [pc, #24]	; (800ce88 <_isatty_r+0x1c>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4605      	mov	r5, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	6023      	str	r3, [r4, #0]
 800ce78:	f7f5 fa4c 	bl	8002314 <_isatty>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d102      	bne.n	800ce86 <_isatty_r+0x1a>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	b103      	cbz	r3, 800ce86 <_isatty_r+0x1a>
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	20001668 	.word	0x20001668

0800ce8c <_lseek_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4c07      	ldr	r4, [pc, #28]	; (800ceac <_lseek_r+0x20>)
 800ce90:	4605      	mov	r5, r0
 800ce92:	4608      	mov	r0, r1
 800ce94:	4611      	mov	r1, r2
 800ce96:	2200      	movs	r2, #0
 800ce98:	6022      	str	r2, [r4, #0]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	f7f5 fa45 	bl	800232a <_lseek>
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	d102      	bne.n	800ceaa <_lseek_r+0x1e>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	b103      	cbz	r3, 800ceaa <_lseek_r+0x1e>
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	bd38      	pop	{r3, r4, r5, pc}
 800ceac:	20001668 	.word	0x20001668

0800ceb0 <__malloc_lock>:
 800ceb0:	4770      	bx	lr

0800ceb2 <__malloc_unlock>:
 800ceb2:	4770      	bx	lr

0800ceb4 <_read_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4c07      	ldr	r4, [pc, #28]	; (800ced4 <_read_r+0x20>)
 800ceb8:	4605      	mov	r5, r0
 800ceba:	4608      	mov	r0, r1
 800cebc:	4611      	mov	r1, r2
 800cebe:	2200      	movs	r2, #0
 800cec0:	6022      	str	r2, [r4, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f7f5 f9ed 	bl	80022a2 <_read>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_read_r+0x1e>
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_read_r+0x1e>
 800ced0:	602b      	str	r3, [r5, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	20001668 	.word	0x20001668

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr
